/*
Finverse Public

Documentation of the early finverse services

API version: 0.0.1
Contact: devs@finverse.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package finverse

import (
	"encoding/json"
)

// ErrorResponse struct for ErrorResponse
type ErrorResponse struct {
	Err *string `json:"err,omitempty"`
	HttpStatusCode *float32 `json:"http_status_code,omitempty"`
	StatusText *string `json:"status_text,omitempty"`
	AppCode *float32 `json:"app_code,omitempty"`
	ErrorCategory *string `json:"error_category,omitempty"`
	ErrorText *string `json:"error_text,omitempty"`
	RequestId *string `json:"request_id,omitempty"`
}

// NewErrorResponse instantiates a new ErrorResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewErrorResponse() *ErrorResponse {
	this := ErrorResponse{}
	return &this
}

// NewErrorResponseWithDefaults instantiates a new ErrorResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewErrorResponseWithDefaults() *ErrorResponse {
	this := ErrorResponse{}
	return &this
}

// GetErr returns the Err field value if set, zero value otherwise.
func (o *ErrorResponse) GetErr() string {
	if o == nil || o.Err == nil {
		var ret string
		return ret
	}
	return *o.Err
}

// GetErrOk returns a tuple with the Err field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorResponse) GetErrOk() (*string, bool) {
	if o == nil || o.Err == nil {
		return nil, false
	}
	return o.Err, true
}

// HasErr returns a boolean if a field has been set.
func (o *ErrorResponse) HasErr() bool {
	if o != nil && o.Err != nil {
		return true
	}

	return false
}

// SetErr gets a reference to the given string and assigns it to the Err field.
func (o *ErrorResponse) SetErr(v string) {
	o.Err = &v
}

// GetHttpStatusCode returns the HttpStatusCode field value if set, zero value otherwise.
func (o *ErrorResponse) GetHttpStatusCode() float32 {
	if o == nil || o.HttpStatusCode == nil {
		var ret float32
		return ret
	}
	return *o.HttpStatusCode
}

// GetHttpStatusCodeOk returns a tuple with the HttpStatusCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorResponse) GetHttpStatusCodeOk() (*float32, bool) {
	if o == nil || o.HttpStatusCode == nil {
		return nil, false
	}
	return o.HttpStatusCode, true
}

// HasHttpStatusCode returns a boolean if a field has been set.
func (o *ErrorResponse) HasHttpStatusCode() bool {
	if o != nil && o.HttpStatusCode != nil {
		return true
	}

	return false
}

// SetHttpStatusCode gets a reference to the given float32 and assigns it to the HttpStatusCode field.
func (o *ErrorResponse) SetHttpStatusCode(v float32) {
	o.HttpStatusCode = &v
}

// GetStatusText returns the StatusText field value if set, zero value otherwise.
func (o *ErrorResponse) GetStatusText() string {
	if o == nil || o.StatusText == nil {
		var ret string
		return ret
	}
	return *o.StatusText
}

// GetStatusTextOk returns a tuple with the StatusText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorResponse) GetStatusTextOk() (*string, bool) {
	if o == nil || o.StatusText == nil {
		return nil, false
	}
	return o.StatusText, true
}

// HasStatusText returns a boolean if a field has been set.
func (o *ErrorResponse) HasStatusText() bool {
	if o != nil && o.StatusText != nil {
		return true
	}

	return false
}

// SetStatusText gets a reference to the given string and assigns it to the StatusText field.
func (o *ErrorResponse) SetStatusText(v string) {
	o.StatusText = &v
}

// GetAppCode returns the AppCode field value if set, zero value otherwise.
func (o *ErrorResponse) GetAppCode() float32 {
	if o == nil || o.AppCode == nil {
		var ret float32
		return ret
	}
	return *o.AppCode
}

// GetAppCodeOk returns a tuple with the AppCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorResponse) GetAppCodeOk() (*float32, bool) {
	if o == nil || o.AppCode == nil {
		return nil, false
	}
	return o.AppCode, true
}

// HasAppCode returns a boolean if a field has been set.
func (o *ErrorResponse) HasAppCode() bool {
	if o != nil && o.AppCode != nil {
		return true
	}

	return false
}

// SetAppCode gets a reference to the given float32 and assigns it to the AppCode field.
func (o *ErrorResponse) SetAppCode(v float32) {
	o.AppCode = &v
}

// GetErrorCategory returns the ErrorCategory field value if set, zero value otherwise.
func (o *ErrorResponse) GetErrorCategory() string {
	if o == nil || o.ErrorCategory == nil {
		var ret string
		return ret
	}
	return *o.ErrorCategory
}

// GetErrorCategoryOk returns a tuple with the ErrorCategory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorResponse) GetErrorCategoryOk() (*string, bool) {
	if o == nil || o.ErrorCategory == nil {
		return nil, false
	}
	return o.ErrorCategory, true
}

// HasErrorCategory returns a boolean if a field has been set.
func (o *ErrorResponse) HasErrorCategory() bool {
	if o != nil && o.ErrorCategory != nil {
		return true
	}

	return false
}

// SetErrorCategory gets a reference to the given string and assigns it to the ErrorCategory field.
func (o *ErrorResponse) SetErrorCategory(v string) {
	o.ErrorCategory = &v
}

// GetErrorText returns the ErrorText field value if set, zero value otherwise.
func (o *ErrorResponse) GetErrorText() string {
	if o == nil || o.ErrorText == nil {
		var ret string
		return ret
	}
	return *o.ErrorText
}

// GetErrorTextOk returns a tuple with the ErrorText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorResponse) GetErrorTextOk() (*string, bool) {
	if o == nil || o.ErrorText == nil {
		return nil, false
	}
	return o.ErrorText, true
}

// HasErrorText returns a boolean if a field has been set.
func (o *ErrorResponse) HasErrorText() bool {
	if o != nil && o.ErrorText != nil {
		return true
	}

	return false
}

// SetErrorText gets a reference to the given string and assigns it to the ErrorText field.
func (o *ErrorResponse) SetErrorText(v string) {
	o.ErrorText = &v
}

// GetRequestId returns the RequestId field value if set, zero value otherwise.
func (o *ErrorResponse) GetRequestId() string {
	if o == nil || o.RequestId == nil {
		var ret string
		return ret
	}
	return *o.RequestId
}

// GetRequestIdOk returns a tuple with the RequestId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorResponse) GetRequestIdOk() (*string, bool) {
	if o == nil || o.RequestId == nil {
		return nil, false
	}
	return o.RequestId, true
}

// HasRequestId returns a boolean if a field has been set.
func (o *ErrorResponse) HasRequestId() bool {
	if o != nil && o.RequestId != nil {
		return true
	}

	return false
}

// SetRequestId gets a reference to the given string and assigns it to the RequestId field.
func (o *ErrorResponse) SetRequestId(v string) {
	o.RequestId = &v
}

func (o ErrorResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Err != nil {
		toSerialize["err"] = o.Err
	}
	if o.HttpStatusCode != nil {
		toSerialize["http_status_code"] = o.HttpStatusCode
	}
	if o.StatusText != nil {
		toSerialize["status_text"] = o.StatusText
	}
	if o.AppCode != nil {
		toSerialize["app_code"] = o.AppCode
	}
	if o.ErrorCategory != nil {
		toSerialize["error_category"] = o.ErrorCategory
	}
	if o.ErrorText != nil {
		toSerialize["error_text"] = o.ErrorText
	}
	if o.RequestId != nil {
		toSerialize["request_id"] = o.RequestId
	}
	return json.Marshal(toSerialize)
}

type NullableErrorResponse struct {
	value *ErrorResponse
	isSet bool
}

func (v NullableErrorResponse) Get() *ErrorResponse {
	return v.value
}

func (v *NullableErrorResponse) Set(val *ErrorResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableErrorResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableErrorResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableErrorResponse(val *ErrorResponse) *NullableErrorResponse {
	return &NullableErrorResponse{value: val, isSet: true}
}

func (v NullableErrorResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableErrorResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


