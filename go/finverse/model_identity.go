/*
Finverse Public

Documentation of the early finverse services

API version: 0.0.1
Contact: devs@finverse.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package finverse

import (
	"encoding/json"
)

// Identity struct for Identity
type Identity struct {
	Names []IdentityName `json:"names,omitempty"`
	Addresses []IdentityAddress `json:"addresses,omitempty"`
	Emails []IdentityEmail `json:"emails,omitempty"`
	PhoneNumbers []IdentityPhoneNumber `json:"phone_numbers,omitempty"`
	DateOfBirths []IdentityDateOfBirth `json:"date_of_births,omitempty"`
}

// NewIdentity instantiates a new Identity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIdentity() *Identity {
	this := Identity{}
	return &this
}

// NewIdentityWithDefaults instantiates a new Identity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIdentityWithDefaults() *Identity {
	this := Identity{}
	return &this
}

// GetNames returns the Names field value if set, zero value otherwise.
func (o *Identity) GetNames() []IdentityName {
	if o == nil || o.Names == nil {
		var ret []IdentityName
		return ret
	}
	return o.Names
}

// GetNamesOk returns a tuple with the Names field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Identity) GetNamesOk() ([]IdentityName, bool) {
	if o == nil || o.Names == nil {
		return nil, false
	}
	return o.Names, true
}

// HasNames returns a boolean if a field has been set.
func (o *Identity) HasNames() bool {
	if o != nil && o.Names != nil {
		return true
	}

	return false
}

// SetNames gets a reference to the given []IdentityName and assigns it to the Names field.
func (o *Identity) SetNames(v []IdentityName) {
	o.Names = v
}

// GetAddresses returns the Addresses field value if set, zero value otherwise.
func (o *Identity) GetAddresses() []IdentityAddress {
	if o == nil || o.Addresses == nil {
		var ret []IdentityAddress
		return ret
	}
	return o.Addresses
}

// GetAddressesOk returns a tuple with the Addresses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Identity) GetAddressesOk() ([]IdentityAddress, bool) {
	if o == nil || o.Addresses == nil {
		return nil, false
	}
	return o.Addresses, true
}

// HasAddresses returns a boolean if a field has been set.
func (o *Identity) HasAddresses() bool {
	if o != nil && o.Addresses != nil {
		return true
	}

	return false
}

// SetAddresses gets a reference to the given []IdentityAddress and assigns it to the Addresses field.
func (o *Identity) SetAddresses(v []IdentityAddress) {
	o.Addresses = v
}

// GetEmails returns the Emails field value if set, zero value otherwise.
func (o *Identity) GetEmails() []IdentityEmail {
	if o == nil || o.Emails == nil {
		var ret []IdentityEmail
		return ret
	}
	return o.Emails
}

// GetEmailsOk returns a tuple with the Emails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Identity) GetEmailsOk() ([]IdentityEmail, bool) {
	if o == nil || o.Emails == nil {
		return nil, false
	}
	return o.Emails, true
}

// HasEmails returns a boolean if a field has been set.
func (o *Identity) HasEmails() bool {
	if o != nil && o.Emails != nil {
		return true
	}

	return false
}

// SetEmails gets a reference to the given []IdentityEmail and assigns it to the Emails field.
func (o *Identity) SetEmails(v []IdentityEmail) {
	o.Emails = v
}

// GetPhoneNumbers returns the PhoneNumbers field value if set, zero value otherwise.
func (o *Identity) GetPhoneNumbers() []IdentityPhoneNumber {
	if o == nil || o.PhoneNumbers == nil {
		var ret []IdentityPhoneNumber
		return ret
	}
	return o.PhoneNumbers
}

// GetPhoneNumbersOk returns a tuple with the PhoneNumbers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Identity) GetPhoneNumbersOk() ([]IdentityPhoneNumber, bool) {
	if o == nil || o.PhoneNumbers == nil {
		return nil, false
	}
	return o.PhoneNumbers, true
}

// HasPhoneNumbers returns a boolean if a field has been set.
func (o *Identity) HasPhoneNumbers() bool {
	if o != nil && o.PhoneNumbers != nil {
		return true
	}

	return false
}

// SetPhoneNumbers gets a reference to the given []IdentityPhoneNumber and assigns it to the PhoneNumbers field.
func (o *Identity) SetPhoneNumbers(v []IdentityPhoneNumber) {
	o.PhoneNumbers = v
}

// GetDateOfBirths returns the DateOfBirths field value if set, zero value otherwise.
func (o *Identity) GetDateOfBirths() []IdentityDateOfBirth {
	if o == nil || o.DateOfBirths == nil {
		var ret []IdentityDateOfBirth
		return ret
	}
	return o.DateOfBirths
}

// GetDateOfBirthsOk returns a tuple with the DateOfBirths field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Identity) GetDateOfBirthsOk() ([]IdentityDateOfBirth, bool) {
	if o == nil || o.DateOfBirths == nil {
		return nil, false
	}
	return o.DateOfBirths, true
}

// HasDateOfBirths returns a boolean if a field has been set.
func (o *Identity) HasDateOfBirths() bool {
	if o != nil && o.DateOfBirths != nil {
		return true
	}

	return false
}

// SetDateOfBirths gets a reference to the given []IdentityDateOfBirth and assigns it to the DateOfBirths field.
func (o *Identity) SetDateOfBirths(v []IdentityDateOfBirth) {
	o.DateOfBirths = v
}

func (o Identity) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Names != nil {
		toSerialize["names"] = o.Names
	}
	if o.Addresses != nil {
		toSerialize["addresses"] = o.Addresses
	}
	if o.Emails != nil {
		toSerialize["emails"] = o.Emails
	}
	if o.PhoneNumbers != nil {
		toSerialize["phone_numbers"] = o.PhoneNumbers
	}
	if o.DateOfBirths != nil {
		toSerialize["date_of_births"] = o.DateOfBirths
	}
	return json.Marshal(toSerialize)
}

type NullableIdentity struct {
	value *Identity
	isSet bool
}

func (v NullableIdentity) Get() *Identity {
	return v.value
}

func (v *NullableIdentity) Set(val *Identity) {
	v.value = val
	v.isSet = true
}

func (v NullableIdentity) IsSet() bool {
	return v.isSet
}

func (v *NullableIdentity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIdentity(val *Identity) *NullableIdentity {
	return &NullableIdentity{value: val, isSet: true}
}

func (v NullableIdentity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIdentity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


