/*
Finverse Public

Documentation of the early finverse services

API version: 0.0.1
Contact: devs@finverse.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package finverse

import (
	"encoding/json"
	"time"
)

// StatementLink struct for StatementLink
type StatementLink struct {
	// signedURL to download statement
	Url *string `json:"url,omitempty"`
	// expiry of the signedURL
	Expiry *time.Time `json:"expiry,omitempty"`
	StatementId *string `json:"statement_id,omitempty"`
}

// NewStatementLink instantiates a new StatementLink object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStatementLink() *StatementLink {
	this := StatementLink{}
	return &this
}

// NewStatementLinkWithDefaults instantiates a new StatementLink object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStatementLinkWithDefaults() *StatementLink {
	this := StatementLink{}
	return &this
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *StatementLink) GetUrl() string {
	if o == nil || o.Url == nil {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatementLink) GetUrlOk() (*string, bool) {
	if o == nil || o.Url == nil {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *StatementLink) HasUrl() bool {
	if o != nil && o.Url != nil {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *StatementLink) SetUrl(v string) {
	o.Url = &v
}

// GetExpiry returns the Expiry field value if set, zero value otherwise.
func (o *StatementLink) GetExpiry() time.Time {
	if o == nil || o.Expiry == nil {
		var ret time.Time
		return ret
	}
	return *o.Expiry
}

// GetExpiryOk returns a tuple with the Expiry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatementLink) GetExpiryOk() (*time.Time, bool) {
	if o == nil || o.Expiry == nil {
		return nil, false
	}
	return o.Expiry, true
}

// HasExpiry returns a boolean if a field has been set.
func (o *StatementLink) HasExpiry() bool {
	if o != nil && o.Expiry != nil {
		return true
	}

	return false
}

// SetExpiry gets a reference to the given time.Time and assigns it to the Expiry field.
func (o *StatementLink) SetExpiry(v time.Time) {
	o.Expiry = &v
}

// GetStatementId returns the StatementId field value if set, zero value otherwise.
func (o *StatementLink) GetStatementId() string {
	if o == nil || o.StatementId == nil {
		var ret string
		return ret
	}
	return *o.StatementId
}

// GetStatementIdOk returns a tuple with the StatementId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatementLink) GetStatementIdOk() (*string, bool) {
	if o == nil || o.StatementId == nil {
		return nil, false
	}
	return o.StatementId, true
}

// HasStatementId returns a boolean if a field has been set.
func (o *StatementLink) HasStatementId() bool {
	if o != nil && o.StatementId != nil {
		return true
	}

	return false
}

// SetStatementId gets a reference to the given string and assigns it to the StatementId field.
func (o *StatementLink) SetStatementId(v string) {
	o.StatementId = &v
}

func (o StatementLink) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Url != nil {
		toSerialize["url"] = o.Url
	}
	if o.Expiry != nil {
		toSerialize["expiry"] = o.Expiry
	}
	if o.StatementId != nil {
		toSerialize["statement_id"] = o.StatementId
	}
	return json.Marshal(toSerialize)
}

type NullableStatementLink struct {
	value *StatementLink
	isSet bool
}

func (v NullableStatementLink) Get() *StatementLink {
	return v.value
}

func (v *NullableStatementLink) Set(val *StatementLink) {
	v.value = val
	v.isSet = true
}

func (v NullableStatementLink) IsSet() bool {
	return v.isSet
}

func (v *NullableStatementLink) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStatementLink(val *StatementLink) *NullableStatementLink {
	return &NullableStatementLink{value: val, isSet: true}
}

func (v NullableStatementLink) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStatementLink) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


