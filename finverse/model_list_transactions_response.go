/*
Finverse Public

Documentation of the early finverse services

API version: 0.0.1
Contact: info@finverse.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package finverse

import (
	"encoding/json"
	"fmt"
)

// checks if the ListTransactionsResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListTransactionsResponse{}

// ListTransactionsResponse struct for ListTransactionsResponse
type ListTransactionsResponse struct {
	Accounts             []Account           `json:"accounts,omitempty"`
	Transactions         []Transaction       `json:"transactions,omitempty"`
	LoginIdentity        *LoginIdentityShort `json:"login_identity,omitempty"`
	Institution          *InstitutionShort   `json:"institution,omitempty"`
	TotalTransactions    int32               `json:"total_transactions"`
	AdditionalProperties map[string]interface{}
}

type _ListTransactionsResponse ListTransactionsResponse

// NewListTransactionsResponse instantiates a new ListTransactionsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListTransactionsResponse(totalTransactions int32) *ListTransactionsResponse {
	this := ListTransactionsResponse{}
	this.TotalTransactions = totalTransactions
	return &this
}

// NewListTransactionsResponseWithDefaults instantiates a new ListTransactionsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListTransactionsResponseWithDefaults() *ListTransactionsResponse {
	this := ListTransactionsResponse{}
	return &this
}

// GetAccounts returns the Accounts field value if set, zero value otherwise.
func (o *ListTransactionsResponse) GetAccounts() []Account {
	if o == nil || IsNil(o.Accounts) {
		var ret []Account
		return ret
	}
	return o.Accounts
}

// GetAccountsOk returns a tuple with the Accounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListTransactionsResponse) GetAccountsOk() ([]Account, bool) {
	if o == nil || IsNil(o.Accounts) {
		return nil, false
	}
	return o.Accounts, true
}

// HasAccounts returns a boolean if a field has been set.
func (o *ListTransactionsResponse) HasAccounts() bool {
	if o != nil && !IsNil(o.Accounts) {
		return true
	}

	return false
}

// SetAccounts gets a reference to the given []Account and assigns it to the Accounts field.
func (o *ListTransactionsResponse) SetAccounts(v []Account) {
	o.Accounts = v
}

// GetTransactions returns the Transactions field value if set, zero value otherwise.
func (o *ListTransactionsResponse) GetTransactions() []Transaction {
	if o == nil || IsNil(o.Transactions) {
		var ret []Transaction
		return ret
	}
	return o.Transactions
}

// GetTransactionsOk returns a tuple with the Transactions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListTransactionsResponse) GetTransactionsOk() ([]Transaction, bool) {
	if o == nil || IsNil(o.Transactions) {
		return nil, false
	}
	return o.Transactions, true
}

// HasTransactions returns a boolean if a field has been set.
func (o *ListTransactionsResponse) HasTransactions() bool {
	if o != nil && !IsNil(o.Transactions) {
		return true
	}

	return false
}

// SetTransactions gets a reference to the given []Transaction and assigns it to the Transactions field.
func (o *ListTransactionsResponse) SetTransactions(v []Transaction) {
	o.Transactions = v
}

// GetLoginIdentity returns the LoginIdentity field value if set, zero value otherwise.
func (o *ListTransactionsResponse) GetLoginIdentity() LoginIdentityShort {
	if o == nil || IsNil(o.LoginIdentity) {
		var ret LoginIdentityShort
		return ret
	}
	return *o.LoginIdentity
}

// GetLoginIdentityOk returns a tuple with the LoginIdentity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListTransactionsResponse) GetLoginIdentityOk() (*LoginIdentityShort, bool) {
	if o == nil || IsNil(o.LoginIdentity) {
		return nil, false
	}
	return o.LoginIdentity, true
}

// HasLoginIdentity returns a boolean if a field has been set.
func (o *ListTransactionsResponse) HasLoginIdentity() bool {
	if o != nil && !IsNil(o.LoginIdentity) {
		return true
	}

	return false
}

// SetLoginIdentity gets a reference to the given LoginIdentityShort and assigns it to the LoginIdentity field.
func (o *ListTransactionsResponse) SetLoginIdentity(v LoginIdentityShort) {
	o.LoginIdentity = &v
}

// GetInstitution returns the Institution field value if set, zero value otherwise.
func (o *ListTransactionsResponse) GetInstitution() InstitutionShort {
	if o == nil || IsNil(o.Institution) {
		var ret InstitutionShort
		return ret
	}
	return *o.Institution
}

// GetInstitutionOk returns a tuple with the Institution field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListTransactionsResponse) GetInstitutionOk() (*InstitutionShort, bool) {
	if o == nil || IsNil(o.Institution) {
		return nil, false
	}
	return o.Institution, true
}

// HasInstitution returns a boolean if a field has been set.
func (o *ListTransactionsResponse) HasInstitution() bool {
	if o != nil && !IsNil(o.Institution) {
		return true
	}

	return false
}

// SetInstitution gets a reference to the given InstitutionShort and assigns it to the Institution field.
func (o *ListTransactionsResponse) SetInstitution(v InstitutionShort) {
	o.Institution = &v
}

// GetTotalTransactions returns the TotalTransactions field value
func (o *ListTransactionsResponse) GetTotalTransactions() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TotalTransactions
}

// GetTotalTransactionsOk returns a tuple with the TotalTransactions field value
// and a boolean to check if the value has been set.
func (o *ListTransactionsResponse) GetTotalTransactionsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalTransactions, true
}

// SetTotalTransactions sets field value
func (o *ListTransactionsResponse) SetTotalTransactions(v int32) {
	o.TotalTransactions = v
}

func (o ListTransactionsResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListTransactionsResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Accounts) {
		toSerialize["accounts"] = o.Accounts
	}
	if !IsNil(o.Transactions) {
		toSerialize["transactions"] = o.Transactions
	}
	if !IsNil(o.LoginIdentity) {
		toSerialize["login_identity"] = o.LoginIdentity
	}
	if !IsNil(o.Institution) {
		toSerialize["institution"] = o.Institution
	}
	toSerialize["total_transactions"] = o.TotalTransactions

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ListTransactionsResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"total_transactions",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varListTransactionsResponse := _ListTransactionsResponse{}

	err = json.Unmarshal(data, &varListTransactionsResponse)

	if err != nil {
		return err
	}

	*o = ListTransactionsResponse(varListTransactionsResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "accounts")
		delete(additionalProperties, "transactions")
		delete(additionalProperties, "login_identity")
		delete(additionalProperties, "institution")
		delete(additionalProperties, "total_transactions")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableListTransactionsResponse struct {
	value *ListTransactionsResponse
	isSet bool
}

func (v NullableListTransactionsResponse) Get() *ListTransactionsResponse {
	return v.value
}

func (v *NullableListTransactionsResponse) Set(val *ListTransactionsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListTransactionsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListTransactionsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListTransactionsResponse(val *ListTransactionsResponse) *NullableListTransactionsResponse {
	return &NullableListTransactionsResponse{value: val, isSet: true}
}

func (v NullableListTransactionsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListTransactionsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
