/*
Finverse Public

Documentation of the early finverse services

API version: 0.0.1
Contact: info@finverse.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package finverse

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the MonthlyIncomeEstimate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MonthlyIncomeEstimate{}

// MonthlyIncomeEstimate struct for MonthlyIncomeEstimate
type MonthlyIncomeEstimate struct {
	EstimatedIncome IncomeEstimate `json:"estimated_income"`
	// The numeric month
	Month float32 `json:"month"`
	// The year
	Year float32 `json:"year"`
}

type _MonthlyIncomeEstimate MonthlyIncomeEstimate

// NewMonthlyIncomeEstimate instantiates a new MonthlyIncomeEstimate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMonthlyIncomeEstimate(estimatedIncome IncomeEstimate, month float32, year float32) *MonthlyIncomeEstimate {
	this := MonthlyIncomeEstimate{}
	this.EstimatedIncome = estimatedIncome
	this.Month = month
	this.Year = year
	return &this
}

// NewMonthlyIncomeEstimateWithDefaults instantiates a new MonthlyIncomeEstimate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMonthlyIncomeEstimateWithDefaults() *MonthlyIncomeEstimate {
	this := MonthlyIncomeEstimate{}
	return &this
}

// GetEstimatedIncome returns the EstimatedIncome field value
func (o *MonthlyIncomeEstimate) GetEstimatedIncome() IncomeEstimate {
	if o == nil {
		var ret IncomeEstimate
		return ret
	}

	return o.EstimatedIncome
}

// GetEstimatedIncomeOk returns a tuple with the EstimatedIncome field value
// and a boolean to check if the value has been set.
func (o *MonthlyIncomeEstimate) GetEstimatedIncomeOk() (*IncomeEstimate, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EstimatedIncome, true
}

// SetEstimatedIncome sets field value
func (o *MonthlyIncomeEstimate) SetEstimatedIncome(v IncomeEstimate) {
	o.EstimatedIncome = v
}

// GetMonth returns the Month field value
func (o *MonthlyIncomeEstimate) GetMonth() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Month
}

// GetMonthOk returns a tuple with the Month field value
// and a boolean to check if the value has been set.
func (o *MonthlyIncomeEstimate) GetMonthOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Month, true
}

// SetMonth sets field value
func (o *MonthlyIncomeEstimate) SetMonth(v float32) {
	o.Month = v
}

// GetYear returns the Year field value
func (o *MonthlyIncomeEstimate) GetYear() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Year
}

// GetYearOk returns a tuple with the Year field value
// and a boolean to check if the value has been set.
func (o *MonthlyIncomeEstimate) GetYearOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Year, true
}

// SetYear sets field value
func (o *MonthlyIncomeEstimate) SetYear(v float32) {
	o.Year = v
}

func (o MonthlyIncomeEstimate) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MonthlyIncomeEstimate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["estimated_income"] = o.EstimatedIncome
	toSerialize["month"] = o.Month
	toSerialize["year"] = o.Year
	return toSerialize, nil
}

func (o *MonthlyIncomeEstimate) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"estimated_income",
		"month",
		"year",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMonthlyIncomeEstimate := _MonthlyIncomeEstimate{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMonthlyIncomeEstimate)

	if err != nil {
		return err
	}

	*o = MonthlyIncomeEstimate(varMonthlyIncomeEstimate)

	return err
}

type NullableMonthlyIncomeEstimate struct {
	value *MonthlyIncomeEstimate
	isSet bool
}

func (v NullableMonthlyIncomeEstimate) Get() *MonthlyIncomeEstimate {
	return v.value
}

func (v *NullableMonthlyIncomeEstimate) Set(val *MonthlyIncomeEstimate) {
	v.value = val
	v.isSet = true
}

func (v NullableMonthlyIncomeEstimate) IsSet() bool {
	return v.isSet
}

func (v *NullableMonthlyIncomeEstimate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMonthlyIncomeEstimate(val *MonthlyIncomeEstimate) *NullableMonthlyIncomeEstimate {
	return &NullableMonthlyIncomeEstimate{value: val, isSet: true}
}

func (v NullableMonthlyIncomeEstimate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMonthlyIncomeEstimate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
