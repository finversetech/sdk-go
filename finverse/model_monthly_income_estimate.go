/*
Finverse Public

Documentation of the early finverse services

API version: 0.0.1
Contact: devs@finverse.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package finverse

import (
	"encoding/json"
)

// MonthlyIncomeEstimate struct for MonthlyIncomeEstimate
type MonthlyIncomeEstimate struct {
	EstimatedIncome *IncomeEstimate `json:"estimated_income,omitempty"`
	// The numeric month
	Month *float32 `json:"month,omitempty"`
	// The year
	Year *float32 `json:"year,omitempty"`
}

// NewMonthlyIncomeEstimate instantiates a new MonthlyIncomeEstimate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMonthlyIncomeEstimate() *MonthlyIncomeEstimate {
	this := MonthlyIncomeEstimate{}
	return &this
}

// NewMonthlyIncomeEstimateWithDefaults instantiates a new MonthlyIncomeEstimate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMonthlyIncomeEstimateWithDefaults() *MonthlyIncomeEstimate {
	this := MonthlyIncomeEstimate{}
	return &this
}

// GetEstimatedIncome returns the EstimatedIncome field value if set, zero value otherwise.
func (o *MonthlyIncomeEstimate) GetEstimatedIncome() IncomeEstimate {
	if o == nil || o.EstimatedIncome == nil {
		var ret IncomeEstimate
		return ret
	}
	return *o.EstimatedIncome
}

// GetEstimatedIncomeOk returns a tuple with the EstimatedIncome field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonthlyIncomeEstimate) GetEstimatedIncomeOk() (*IncomeEstimate, bool) {
	if o == nil || o.EstimatedIncome == nil {
		return nil, false
	}
	return o.EstimatedIncome, true
}

// HasEstimatedIncome returns a boolean if a field has been set.
func (o *MonthlyIncomeEstimate) HasEstimatedIncome() bool {
	if o != nil && o.EstimatedIncome != nil {
		return true
	}

	return false
}

// SetEstimatedIncome gets a reference to the given IncomeEstimate and assigns it to the EstimatedIncome field.
func (o *MonthlyIncomeEstimate) SetEstimatedIncome(v IncomeEstimate) {
	o.EstimatedIncome = &v
}

// GetMonth returns the Month field value if set, zero value otherwise.
func (o *MonthlyIncomeEstimate) GetMonth() float32 {
	if o == nil || o.Month == nil {
		var ret float32
		return ret
	}
	return *o.Month
}

// GetMonthOk returns a tuple with the Month field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonthlyIncomeEstimate) GetMonthOk() (*float32, bool) {
	if o == nil || o.Month == nil {
		return nil, false
	}
	return o.Month, true
}

// HasMonth returns a boolean if a field has been set.
func (o *MonthlyIncomeEstimate) HasMonth() bool {
	if o != nil && o.Month != nil {
		return true
	}

	return false
}

// SetMonth gets a reference to the given float32 and assigns it to the Month field.
func (o *MonthlyIncomeEstimate) SetMonth(v float32) {
	o.Month = &v
}

// GetYear returns the Year field value if set, zero value otherwise.
func (o *MonthlyIncomeEstimate) GetYear() float32 {
	if o == nil || o.Year == nil {
		var ret float32
		return ret
	}
	return *o.Year
}

// GetYearOk returns a tuple with the Year field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonthlyIncomeEstimate) GetYearOk() (*float32, bool) {
	if o == nil || o.Year == nil {
		return nil, false
	}
	return o.Year, true
}

// HasYear returns a boolean if a field has been set.
func (o *MonthlyIncomeEstimate) HasYear() bool {
	if o != nil && o.Year != nil {
		return true
	}

	return false
}

// SetYear gets a reference to the given float32 and assigns it to the Year field.
func (o *MonthlyIncomeEstimate) SetYear(v float32) {
	o.Year = &v
}

func (o MonthlyIncomeEstimate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.EstimatedIncome != nil {
		toSerialize["estimated_income"] = o.EstimatedIncome
	}
	if o.Month != nil {
		toSerialize["month"] = o.Month
	}
	if o.Year != nil {
		toSerialize["year"] = o.Year
	}
	return json.Marshal(toSerialize)
}

type NullableMonthlyIncomeEstimate struct {
	value *MonthlyIncomeEstimate
	isSet bool
}

func (v NullableMonthlyIncomeEstimate) Get() *MonthlyIncomeEstimate {
	return v.value
}

func (v *NullableMonthlyIncomeEstimate) Set(val *MonthlyIncomeEstimate) {
	v.value = val
	v.isSet = true
}

func (v NullableMonthlyIncomeEstimate) IsSet() bool {
	return v.isSet
}

func (v *NullableMonthlyIncomeEstimate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMonthlyIncomeEstimate(val *MonthlyIncomeEstimate) *NullableMonthlyIncomeEstimate {
	return &NullableMonthlyIncomeEstimate{value: val, isSet: true}
}

func (v NullableMonthlyIncomeEstimate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMonthlyIncomeEstimate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
