/*
Finverse Public

Documentation of the early finverse services

API version: 0.0.1
Contact: info@finverse.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package finverse

import (
	"encoding/json"
)

// checks if the IdentityPhoneNumber type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IdentityPhoneNumber{}

// IdentityPhoneNumber struct for IdentityPhoneNumber
type IdentityPhoneNumber struct {
	Raw                  *string  `json:"raw,omitempty"`
	MobilePhone          *string  `json:"mobile_phone,omitempty"`
	OtherPhone           *string  `json:"other_phone,omitempty"`
	MaskedPhone          *string  `json:"masked_phone,omitempty"`
	Source               *string  `json:"source,omitempty"`
	SourceIds            []string `json:"source_ids,omitempty"`
	AccountIds           []string `json:"account_ids,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _IdentityPhoneNumber IdentityPhoneNumber

// NewIdentityPhoneNumber instantiates a new IdentityPhoneNumber object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIdentityPhoneNumber() *IdentityPhoneNumber {
	this := IdentityPhoneNumber{}
	return &this
}

// NewIdentityPhoneNumberWithDefaults instantiates a new IdentityPhoneNumber object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIdentityPhoneNumberWithDefaults() *IdentityPhoneNumber {
	this := IdentityPhoneNumber{}
	return &this
}

// GetRaw returns the Raw field value if set, zero value otherwise.
func (o *IdentityPhoneNumber) GetRaw() string {
	if o == nil || IsNil(o.Raw) {
		var ret string
		return ret
	}
	return *o.Raw
}

// GetRawOk returns a tuple with the Raw field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityPhoneNumber) GetRawOk() (*string, bool) {
	if o == nil || IsNil(o.Raw) {
		return nil, false
	}
	return o.Raw, true
}

// HasRaw returns a boolean if a field has been set.
func (o *IdentityPhoneNumber) HasRaw() bool {
	if o != nil && !IsNil(o.Raw) {
		return true
	}

	return false
}

// SetRaw gets a reference to the given string and assigns it to the Raw field.
func (o *IdentityPhoneNumber) SetRaw(v string) {
	o.Raw = &v
}

// GetMobilePhone returns the MobilePhone field value if set, zero value otherwise.
func (o *IdentityPhoneNumber) GetMobilePhone() string {
	if o == nil || IsNil(o.MobilePhone) {
		var ret string
		return ret
	}
	return *o.MobilePhone
}

// GetMobilePhoneOk returns a tuple with the MobilePhone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityPhoneNumber) GetMobilePhoneOk() (*string, bool) {
	if o == nil || IsNil(o.MobilePhone) {
		return nil, false
	}
	return o.MobilePhone, true
}

// HasMobilePhone returns a boolean if a field has been set.
func (o *IdentityPhoneNumber) HasMobilePhone() bool {
	if o != nil && !IsNil(o.MobilePhone) {
		return true
	}

	return false
}

// SetMobilePhone gets a reference to the given string and assigns it to the MobilePhone field.
func (o *IdentityPhoneNumber) SetMobilePhone(v string) {
	o.MobilePhone = &v
}

// GetOtherPhone returns the OtherPhone field value if set, zero value otherwise.
func (o *IdentityPhoneNumber) GetOtherPhone() string {
	if o == nil || IsNil(o.OtherPhone) {
		var ret string
		return ret
	}
	return *o.OtherPhone
}

// GetOtherPhoneOk returns a tuple with the OtherPhone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityPhoneNumber) GetOtherPhoneOk() (*string, bool) {
	if o == nil || IsNil(o.OtherPhone) {
		return nil, false
	}
	return o.OtherPhone, true
}

// HasOtherPhone returns a boolean if a field has been set.
func (o *IdentityPhoneNumber) HasOtherPhone() bool {
	if o != nil && !IsNil(o.OtherPhone) {
		return true
	}

	return false
}

// SetOtherPhone gets a reference to the given string and assigns it to the OtherPhone field.
func (o *IdentityPhoneNumber) SetOtherPhone(v string) {
	o.OtherPhone = &v
}

// GetMaskedPhone returns the MaskedPhone field value if set, zero value otherwise.
func (o *IdentityPhoneNumber) GetMaskedPhone() string {
	if o == nil || IsNil(o.MaskedPhone) {
		var ret string
		return ret
	}
	return *o.MaskedPhone
}

// GetMaskedPhoneOk returns a tuple with the MaskedPhone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityPhoneNumber) GetMaskedPhoneOk() (*string, bool) {
	if o == nil || IsNil(o.MaskedPhone) {
		return nil, false
	}
	return o.MaskedPhone, true
}

// HasMaskedPhone returns a boolean if a field has been set.
func (o *IdentityPhoneNumber) HasMaskedPhone() bool {
	if o != nil && !IsNil(o.MaskedPhone) {
		return true
	}

	return false
}

// SetMaskedPhone gets a reference to the given string and assigns it to the MaskedPhone field.
func (o *IdentityPhoneNumber) SetMaskedPhone(v string) {
	o.MaskedPhone = &v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *IdentityPhoneNumber) GetSource() string {
	if o == nil || IsNil(o.Source) {
		var ret string
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityPhoneNumber) GetSourceOk() (*string, bool) {
	if o == nil || IsNil(o.Source) {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *IdentityPhoneNumber) HasSource() bool {
	if o != nil && !IsNil(o.Source) {
		return true
	}

	return false
}

// SetSource gets a reference to the given string and assigns it to the Source field.
func (o *IdentityPhoneNumber) SetSource(v string) {
	o.Source = &v
}

// GetSourceIds returns the SourceIds field value if set, zero value otherwise.
func (o *IdentityPhoneNumber) GetSourceIds() []string {
	if o == nil || IsNil(o.SourceIds) {
		var ret []string
		return ret
	}
	return o.SourceIds
}

// GetSourceIdsOk returns a tuple with the SourceIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityPhoneNumber) GetSourceIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.SourceIds) {
		return nil, false
	}
	return o.SourceIds, true
}

// HasSourceIds returns a boolean if a field has been set.
func (o *IdentityPhoneNumber) HasSourceIds() bool {
	if o != nil && !IsNil(o.SourceIds) {
		return true
	}

	return false
}

// SetSourceIds gets a reference to the given []string and assigns it to the SourceIds field.
func (o *IdentityPhoneNumber) SetSourceIds(v []string) {
	o.SourceIds = v
}

// GetAccountIds returns the AccountIds field value if set, zero value otherwise.
func (o *IdentityPhoneNumber) GetAccountIds() []string {
	if o == nil || IsNil(o.AccountIds) {
		var ret []string
		return ret
	}
	return o.AccountIds
}

// GetAccountIdsOk returns a tuple with the AccountIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityPhoneNumber) GetAccountIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.AccountIds) {
		return nil, false
	}
	return o.AccountIds, true
}

// HasAccountIds returns a boolean if a field has been set.
func (o *IdentityPhoneNumber) HasAccountIds() bool {
	if o != nil && !IsNil(o.AccountIds) {
		return true
	}

	return false
}

// SetAccountIds gets a reference to the given []string and assigns it to the AccountIds field.
func (o *IdentityPhoneNumber) SetAccountIds(v []string) {
	o.AccountIds = v
}

func (o IdentityPhoneNumber) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IdentityPhoneNumber) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Raw) {
		toSerialize["raw"] = o.Raw
	}
	if !IsNil(o.MobilePhone) {
		toSerialize["mobile_phone"] = o.MobilePhone
	}
	if !IsNil(o.OtherPhone) {
		toSerialize["other_phone"] = o.OtherPhone
	}
	if !IsNil(o.MaskedPhone) {
		toSerialize["masked_phone"] = o.MaskedPhone
	}
	if !IsNil(o.Source) {
		toSerialize["source"] = o.Source
	}
	if !IsNil(o.SourceIds) {
		toSerialize["source_ids"] = o.SourceIds
	}
	if !IsNil(o.AccountIds) {
		toSerialize["account_ids"] = o.AccountIds
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *IdentityPhoneNumber) UnmarshalJSON(data []byte) (err error) {
	varIdentityPhoneNumber := _IdentityPhoneNumber{}

	err = json.Unmarshal(data, &varIdentityPhoneNumber)

	if err != nil {
		return err
	}

	*o = IdentityPhoneNumber(varIdentityPhoneNumber)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "raw")
		delete(additionalProperties, "mobile_phone")
		delete(additionalProperties, "other_phone")
		delete(additionalProperties, "masked_phone")
		delete(additionalProperties, "source")
		delete(additionalProperties, "source_ids")
		delete(additionalProperties, "account_ids")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableIdentityPhoneNumber struct {
	value *IdentityPhoneNumber
	isSet bool
}

func (v NullableIdentityPhoneNumber) Get() *IdentityPhoneNumber {
	return v.value
}

func (v *NullableIdentityPhoneNumber) Set(val *IdentityPhoneNumber) {
	v.value = val
	v.isSet = true
}

func (v NullableIdentityPhoneNumber) IsSet() bool {
	return v.isSet
}

func (v *NullableIdentityPhoneNumber) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIdentityPhoneNumber(val *IdentityPhoneNumber) *NullableIdentityPhoneNumber {
	return &NullableIdentityPhoneNumber{value: val, isSet: true}
}

func (v NullableIdentityPhoneNumber) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIdentityPhoneNumber) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
