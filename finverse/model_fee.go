/*
Finverse Public

Documentation of the early finverse services

API version: 0.0.1
Contact: info@finverse.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package finverse

import (
	"encoding/json"
)

// Fee struct for Fee
type Fee struct {
	// The amount of fee for a single transaction. Expressed in currency's smallest unit or “minor unit”, as defined in ISO 4217.
	Amount   *int32  `json:"amount,omitempty"`
	Currency *string `json:"currency,omitempty"`
	PaidBy   *string `json:"paid_by,omitempty"`
	// The payment account Id
	PaidByAccountId *string `json:"paid_by_account_id,omitempty"`
}

// NewFee instantiates a new Fee object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFee() *Fee {
	this := Fee{}
	return &this
}

// NewFeeWithDefaults instantiates a new Fee object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFeeWithDefaults() *Fee {
	this := Fee{}
	return &this
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *Fee) GetAmount() int32 {
	if o == nil || o.Amount == nil {
		var ret int32
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fee) GetAmountOk() (*int32, bool) {
	if o == nil || o.Amount == nil {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *Fee) HasAmount() bool {
	if o != nil && o.Amount != nil {
		return true
	}

	return false
}

// SetAmount gets a reference to the given int32 and assigns it to the Amount field.
func (o *Fee) SetAmount(v int32) {
	o.Amount = &v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *Fee) GetCurrency() string {
	if o == nil || o.Currency == nil {
		var ret string
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fee) GetCurrencyOk() (*string, bool) {
	if o == nil || o.Currency == nil {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *Fee) HasCurrency() bool {
	if o != nil && o.Currency != nil {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given string and assigns it to the Currency field.
func (o *Fee) SetCurrency(v string) {
	o.Currency = &v
}

// GetPaidBy returns the PaidBy field value if set, zero value otherwise.
func (o *Fee) GetPaidBy() string {
	if o == nil || o.PaidBy == nil {
		var ret string
		return ret
	}
	return *o.PaidBy
}

// GetPaidByOk returns a tuple with the PaidBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fee) GetPaidByOk() (*string, bool) {
	if o == nil || o.PaidBy == nil {
		return nil, false
	}
	return o.PaidBy, true
}

// HasPaidBy returns a boolean if a field has been set.
func (o *Fee) HasPaidBy() bool {
	if o != nil && o.PaidBy != nil {
		return true
	}

	return false
}

// SetPaidBy gets a reference to the given string and assigns it to the PaidBy field.
func (o *Fee) SetPaidBy(v string) {
	o.PaidBy = &v
}

// GetPaidByAccountId returns the PaidByAccountId field value if set, zero value otherwise.
func (o *Fee) GetPaidByAccountId() string {
	if o == nil || o.PaidByAccountId == nil {
		var ret string
		return ret
	}
	return *o.PaidByAccountId
}

// GetPaidByAccountIdOk returns a tuple with the PaidByAccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fee) GetPaidByAccountIdOk() (*string, bool) {
	if o == nil || o.PaidByAccountId == nil {
		return nil, false
	}
	return o.PaidByAccountId, true
}

// HasPaidByAccountId returns a boolean if a field has been set.
func (o *Fee) HasPaidByAccountId() bool {
	if o != nil && o.PaidByAccountId != nil {
		return true
	}

	return false
}

// SetPaidByAccountId gets a reference to the given string and assigns it to the PaidByAccountId field.
func (o *Fee) SetPaidByAccountId(v string) {
	o.PaidByAccountId = &v
}

func (o Fee) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Amount != nil {
		toSerialize["amount"] = o.Amount
	}
	if o.Currency != nil {
		toSerialize["currency"] = o.Currency
	}
	if o.PaidBy != nil {
		toSerialize["paid_by"] = o.PaidBy
	}
	if o.PaidByAccountId != nil {
		toSerialize["paid_by_account_id"] = o.PaidByAccountId
	}
	return json.Marshal(toSerialize)
}

type NullableFee struct {
	value *Fee
	isSet bool
}

func (v NullableFee) Get() *Fee {
	return v.value
}

func (v *NullableFee) Set(val *Fee) {
	v.value = val
	v.isSet = true
}

func (v NullableFee) IsSet() bool {
	return v.isSet
}

func (v *NullableFee) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFee(val *Fee) *NullableFee {
	return &NullableFee{value: val, isSet: true}
}

func (v NullableFee) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFee) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
