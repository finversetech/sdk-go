/*
Finverse Public

Documentation of the early finverse services

API version: 0.0.1
Contact: info@finverse.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package finverse

import (
	"encoding/json"
)

// checks if the LinkResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LinkResponse{}

// LinkResponse struct for LinkResponse
type LinkResponse struct {
	AuthUrl              *string `json:"auth_url,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _LinkResponse LinkResponse

// NewLinkResponse instantiates a new LinkResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLinkResponse() *LinkResponse {
	this := LinkResponse{}
	return &this
}

// NewLinkResponseWithDefaults instantiates a new LinkResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLinkResponseWithDefaults() *LinkResponse {
	this := LinkResponse{}
	return &this
}

// GetAuthUrl returns the AuthUrl field value if set, zero value otherwise.
func (o *LinkResponse) GetAuthUrl() string {
	if o == nil || IsNil(o.AuthUrl) {
		var ret string
		return ret
	}
	return *o.AuthUrl
}

// GetAuthUrlOk returns a tuple with the AuthUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkResponse) GetAuthUrlOk() (*string, bool) {
	if o == nil || IsNil(o.AuthUrl) {
		return nil, false
	}
	return o.AuthUrl, true
}

// HasAuthUrl returns a boolean if a field has been set.
func (o *LinkResponse) HasAuthUrl() bool {
	if o != nil && !IsNil(o.AuthUrl) {
		return true
	}

	return false
}

// SetAuthUrl gets a reference to the given string and assigns it to the AuthUrl field.
func (o *LinkResponse) SetAuthUrl(v string) {
	o.AuthUrl = &v
}

func (o LinkResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LinkResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AuthUrl) {
		toSerialize["auth_url"] = o.AuthUrl
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *LinkResponse) UnmarshalJSON(data []byte) (err error) {
	varLinkResponse := _LinkResponse{}

	err = json.Unmarshal(data, &varLinkResponse)

	if err != nil {
		return err
	}

	*o = LinkResponse(varLinkResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "auth_url")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableLinkResponse struct {
	value *LinkResponse
	isSet bool
}

func (v NullableLinkResponse) Get() *LinkResponse {
	return v.value
}

func (v *NullableLinkResponse) Set(val *LinkResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableLinkResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableLinkResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLinkResponse(val *LinkResponse) *NullableLinkResponse {
	return &NullableLinkResponse{value: val, isSet: true}
}

func (v NullableLinkResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLinkResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
