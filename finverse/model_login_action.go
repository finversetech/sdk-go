/*
Finverse Public

Documentation of the early finverse services

API version: 0.0.1
Contact: info@finverse.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package finverse

import (
	"encoding/json"
)

// LoginAction struct for LoginAction
type LoginAction struct {
	Type     *string       `json:"type,omitempty"`
	Name     *string       `json:"name,omitempty"`
	Messages []UserMessage `json:"messages,omitempty"`
	Fields   []UserField   `json:"fields,omitempty"`
	Buttons  []UserButton  `json:"buttons,omitempty"`
}

// NewLoginAction instantiates a new LoginAction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLoginAction() *LoginAction {
	this := LoginAction{}
	return &this
}

// NewLoginActionWithDefaults instantiates a new LoginAction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLoginActionWithDefaults() *LoginAction {
	this := LoginAction{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *LoginAction) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoginAction) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *LoginAction) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *LoginAction) SetType(v string) {
	o.Type = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *LoginAction) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoginAction) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *LoginAction) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *LoginAction) SetName(v string) {
	o.Name = &v
}

// GetMessages returns the Messages field value if set, zero value otherwise.
func (o *LoginAction) GetMessages() []UserMessage {
	if o == nil || o.Messages == nil {
		var ret []UserMessage
		return ret
	}
	return o.Messages
}

// GetMessagesOk returns a tuple with the Messages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoginAction) GetMessagesOk() ([]UserMessage, bool) {
	if o == nil || o.Messages == nil {
		return nil, false
	}
	return o.Messages, true
}

// HasMessages returns a boolean if a field has been set.
func (o *LoginAction) HasMessages() bool {
	if o != nil && o.Messages != nil {
		return true
	}

	return false
}

// SetMessages gets a reference to the given []UserMessage and assigns it to the Messages field.
func (o *LoginAction) SetMessages(v []UserMessage) {
	o.Messages = v
}

// GetFields returns the Fields field value if set, zero value otherwise.
func (o *LoginAction) GetFields() []UserField {
	if o == nil || o.Fields == nil {
		var ret []UserField
		return ret
	}
	return o.Fields
}

// GetFieldsOk returns a tuple with the Fields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoginAction) GetFieldsOk() ([]UserField, bool) {
	if o == nil || o.Fields == nil {
		return nil, false
	}
	return o.Fields, true
}

// HasFields returns a boolean if a field has been set.
func (o *LoginAction) HasFields() bool {
	if o != nil && o.Fields != nil {
		return true
	}

	return false
}

// SetFields gets a reference to the given []UserField and assigns it to the Fields field.
func (o *LoginAction) SetFields(v []UserField) {
	o.Fields = v
}

// GetButtons returns the Buttons field value if set, zero value otherwise.
func (o *LoginAction) GetButtons() []UserButton {
	if o == nil || o.Buttons == nil {
		var ret []UserButton
		return ret
	}
	return o.Buttons
}

// GetButtonsOk returns a tuple with the Buttons field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoginAction) GetButtonsOk() ([]UserButton, bool) {
	if o == nil || o.Buttons == nil {
		return nil, false
	}
	return o.Buttons, true
}

// HasButtons returns a boolean if a field has been set.
func (o *LoginAction) HasButtons() bool {
	if o != nil && o.Buttons != nil {
		return true
	}

	return false
}

// SetButtons gets a reference to the given []UserButton and assigns it to the Buttons field.
func (o *LoginAction) SetButtons(v []UserButton) {
	o.Buttons = v
}

func (o LoginAction) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Messages != nil {
		toSerialize["messages"] = o.Messages
	}
	if o.Fields != nil {
		toSerialize["fields"] = o.Fields
	}
	if o.Buttons != nil {
		toSerialize["buttons"] = o.Buttons
	}
	return json.Marshal(toSerialize)
}

type NullableLoginAction struct {
	value *LoginAction
	isSet bool
}

func (v NullableLoginAction) Get() *LoginAction {
	return v.value
}

func (v *NullableLoginAction) Set(val *LoginAction) {
	v.value = val
	v.isSet = true
}

func (v NullableLoginAction) IsSet() bool {
	return v.isSet
}

func (v *NullableLoginAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLoginAction(val *LoginAction) *NullableLoginAction {
	return &NullableLoginAction{value: val, isSet: true}
}

func (v NullableLoginAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLoginAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
