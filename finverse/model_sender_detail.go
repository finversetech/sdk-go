/*
Finverse Public

Documentation of the early finverse services

API version: 0.0.1
Contact: info@finverse.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package finverse

import (
	"encoding/json"
)

// checks if the SenderDetail type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SenderDetail{}

// SenderDetail struct for SenderDetail
type SenderDetail struct {
	// The type of the details. For e.g. HK_ID, PASSPORT etc
	DetailsType *string `json:"details_type,omitempty"`
	// The possible values of the detail. For e.g. A123456 for HK_ID
	Values               []string `json:"values,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SenderDetail SenderDetail

// NewSenderDetail instantiates a new SenderDetail object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSenderDetail() *SenderDetail {
	this := SenderDetail{}
	return &this
}

// NewSenderDetailWithDefaults instantiates a new SenderDetail object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSenderDetailWithDefaults() *SenderDetail {
	this := SenderDetail{}
	return &this
}

// GetDetailsType returns the DetailsType field value if set, zero value otherwise.
func (o *SenderDetail) GetDetailsType() string {
	if o == nil || IsNil(o.DetailsType) {
		var ret string
		return ret
	}
	return *o.DetailsType
}

// GetDetailsTypeOk returns a tuple with the DetailsType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SenderDetail) GetDetailsTypeOk() (*string, bool) {
	if o == nil || IsNil(o.DetailsType) {
		return nil, false
	}
	return o.DetailsType, true
}

// HasDetailsType returns a boolean if a field has been set.
func (o *SenderDetail) HasDetailsType() bool {
	if o != nil && !IsNil(o.DetailsType) {
		return true
	}

	return false
}

// SetDetailsType gets a reference to the given string and assigns it to the DetailsType field.
func (o *SenderDetail) SetDetailsType(v string) {
	o.DetailsType = &v
}

// GetValues returns the Values field value if set, zero value otherwise.
func (o *SenderDetail) GetValues() []string {
	if o == nil || IsNil(o.Values) {
		var ret []string
		return ret
	}
	return o.Values
}

// GetValuesOk returns a tuple with the Values field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SenderDetail) GetValuesOk() ([]string, bool) {
	if o == nil || IsNil(o.Values) {
		return nil, false
	}
	return o.Values, true
}

// HasValues returns a boolean if a field has been set.
func (o *SenderDetail) HasValues() bool {
	if o != nil && !IsNil(o.Values) {
		return true
	}

	return false
}

// SetValues gets a reference to the given []string and assigns it to the Values field.
func (o *SenderDetail) SetValues(v []string) {
	o.Values = v
}

func (o SenderDetail) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SenderDetail) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DetailsType) {
		toSerialize["details_type"] = o.DetailsType
	}
	if !IsNil(o.Values) {
		toSerialize["values"] = o.Values
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SenderDetail) UnmarshalJSON(data []byte) (err error) {
	varSenderDetail := _SenderDetail{}

	err = json.Unmarshal(data, &varSenderDetail)

	if err != nil {
		return err
	}

	*o = SenderDetail(varSenderDetail)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "details_type")
		delete(additionalProperties, "values")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSenderDetail struct {
	value *SenderDetail
	isSet bool
}

func (v NullableSenderDetail) Get() *SenderDetail {
	return v.value
}

func (v *NullableSenderDetail) Set(val *SenderDetail) {
	v.value = val
	v.isSet = true
}

func (v NullableSenderDetail) IsSet() bool {
	return v.isSet
}

func (v *NullableSenderDetail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSenderDetail(val *SenderDetail) *NullableSenderDetail {
	return &NullableSenderDetail{value: val, isSet: true}
}

func (v NullableSenderDetail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSenderDetail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
