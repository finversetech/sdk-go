/*
Finverse Public

Documentation of the early finverse services

API version: 0.0.1
Contact: info@finverse.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package finverse

import (
	"encoding/json"
)

// checks if the JWKSKey type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JWKSKey{}

// JWKSKey struct for JWKSKey
type JWKSKey struct {
	// The \"kty\" (key type) parameter identifies the cryptographic algorithm family used with the key, such as \"RSA\" or \"EC\".
	Kty *string `json:"kty,omitempty"`
	// The \"kid\" (key ID) parameter is used to match a specific key
	Kid *string `json:"kid,omitempty"`
	// The \"use\" (public key use) parameter identifies the intended use of the public key
	Use *string `json:"use,omitempty"`
	// RSA key value \"e\"
	E *string `json:"e,omitempty"`
	// RSA key value \"n\"
	N *string `json:"n,omitempty"`
	// The \"x5c\" (X.509 certificate chain) parameter contains a chain of one or more PKIX certificates
	X5c                  []string `json:"x5c,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _JWKSKey JWKSKey

// NewJWKSKey instantiates a new JWKSKey object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJWKSKey() *JWKSKey {
	this := JWKSKey{}
	return &this
}

// NewJWKSKeyWithDefaults instantiates a new JWKSKey object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJWKSKeyWithDefaults() *JWKSKey {
	this := JWKSKey{}
	return &this
}

// GetKty returns the Kty field value if set, zero value otherwise.
func (o *JWKSKey) GetKty() string {
	if o == nil || IsNil(o.Kty) {
		var ret string
		return ret
	}
	return *o.Kty
}

// GetKtyOk returns a tuple with the Kty field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JWKSKey) GetKtyOk() (*string, bool) {
	if o == nil || IsNil(o.Kty) {
		return nil, false
	}
	return o.Kty, true
}

// HasKty returns a boolean if a field has been set.
func (o *JWKSKey) HasKty() bool {
	if o != nil && !IsNil(o.Kty) {
		return true
	}

	return false
}

// SetKty gets a reference to the given string and assigns it to the Kty field.
func (o *JWKSKey) SetKty(v string) {
	o.Kty = &v
}

// GetKid returns the Kid field value if set, zero value otherwise.
func (o *JWKSKey) GetKid() string {
	if o == nil || IsNil(o.Kid) {
		var ret string
		return ret
	}
	return *o.Kid
}

// GetKidOk returns a tuple with the Kid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JWKSKey) GetKidOk() (*string, bool) {
	if o == nil || IsNil(o.Kid) {
		return nil, false
	}
	return o.Kid, true
}

// HasKid returns a boolean if a field has been set.
func (o *JWKSKey) HasKid() bool {
	if o != nil && !IsNil(o.Kid) {
		return true
	}

	return false
}

// SetKid gets a reference to the given string and assigns it to the Kid field.
func (o *JWKSKey) SetKid(v string) {
	o.Kid = &v
}

// GetUse returns the Use field value if set, zero value otherwise.
func (o *JWKSKey) GetUse() string {
	if o == nil || IsNil(o.Use) {
		var ret string
		return ret
	}
	return *o.Use
}

// GetUseOk returns a tuple with the Use field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JWKSKey) GetUseOk() (*string, bool) {
	if o == nil || IsNil(o.Use) {
		return nil, false
	}
	return o.Use, true
}

// HasUse returns a boolean if a field has been set.
func (o *JWKSKey) HasUse() bool {
	if o != nil && !IsNil(o.Use) {
		return true
	}

	return false
}

// SetUse gets a reference to the given string and assigns it to the Use field.
func (o *JWKSKey) SetUse(v string) {
	o.Use = &v
}

// GetE returns the E field value if set, zero value otherwise.
func (o *JWKSKey) GetE() string {
	if o == nil || IsNil(o.E) {
		var ret string
		return ret
	}
	return *o.E
}

// GetEOk returns a tuple with the E field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JWKSKey) GetEOk() (*string, bool) {
	if o == nil || IsNil(o.E) {
		return nil, false
	}
	return o.E, true
}

// HasE returns a boolean if a field has been set.
func (o *JWKSKey) HasE() bool {
	if o != nil && !IsNil(o.E) {
		return true
	}

	return false
}

// SetE gets a reference to the given string and assigns it to the E field.
func (o *JWKSKey) SetE(v string) {
	o.E = &v
}

// GetN returns the N field value if set, zero value otherwise.
func (o *JWKSKey) GetN() string {
	if o == nil || IsNil(o.N) {
		var ret string
		return ret
	}
	return *o.N
}

// GetNOk returns a tuple with the N field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JWKSKey) GetNOk() (*string, bool) {
	if o == nil || IsNil(o.N) {
		return nil, false
	}
	return o.N, true
}

// HasN returns a boolean if a field has been set.
func (o *JWKSKey) HasN() bool {
	if o != nil && !IsNil(o.N) {
		return true
	}

	return false
}

// SetN gets a reference to the given string and assigns it to the N field.
func (o *JWKSKey) SetN(v string) {
	o.N = &v
}

// GetX5c returns the X5c field value if set, zero value otherwise.
func (o *JWKSKey) GetX5c() []string {
	if o == nil || IsNil(o.X5c) {
		var ret []string
		return ret
	}
	return o.X5c
}

// GetX5cOk returns a tuple with the X5c field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JWKSKey) GetX5cOk() ([]string, bool) {
	if o == nil || IsNil(o.X5c) {
		return nil, false
	}
	return o.X5c, true
}

// HasX5c returns a boolean if a field has been set.
func (o *JWKSKey) HasX5c() bool {
	if o != nil && !IsNil(o.X5c) {
		return true
	}

	return false
}

// SetX5c gets a reference to the given []string and assigns it to the X5c field.
func (o *JWKSKey) SetX5c(v []string) {
	o.X5c = v
}

func (o JWKSKey) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JWKSKey) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Kty) {
		toSerialize["kty"] = o.Kty
	}
	if !IsNil(o.Kid) {
		toSerialize["kid"] = o.Kid
	}
	if !IsNil(o.Use) {
		toSerialize["use"] = o.Use
	}
	if !IsNil(o.E) {
		toSerialize["e"] = o.E
	}
	if !IsNil(o.N) {
		toSerialize["n"] = o.N
	}
	if !IsNil(o.X5c) {
		toSerialize["x5c"] = o.X5c
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *JWKSKey) UnmarshalJSON(data []byte) (err error) {
	varJWKSKey := _JWKSKey{}

	err = json.Unmarshal(data, &varJWKSKey)

	if err != nil {
		return err
	}

	*o = JWKSKey(varJWKSKey)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "kty")
		delete(additionalProperties, "kid")
		delete(additionalProperties, "use")
		delete(additionalProperties, "e")
		delete(additionalProperties, "n")
		delete(additionalProperties, "x5c")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableJWKSKey struct {
	value *JWKSKey
	isSet bool
}

func (v NullableJWKSKey) Get() *JWKSKey {
	return v.value
}

func (v *NullableJWKSKey) Set(val *JWKSKey) {
	v.value = val
	v.isSet = true
}

func (v NullableJWKSKey) IsSet() bool {
	return v.isSet
}

func (v *NullableJWKSKey) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJWKSKey(val *JWKSKey) *NullableJWKSKey {
	return &NullableJWKSKey{value: val, isSet: true}
}

func (v NullableJWKSKey) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJWKSKey) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
