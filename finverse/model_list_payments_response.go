/*
Finverse Public

Documentation of the early finverse services

API version: 0.0.1
Contact: info@finverse.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package finverse

import (
	"encoding/json"
	"fmt"
)

// checks if the ListPaymentsResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListPaymentsResponse{}

// ListPaymentsResponse struct for ListPaymentsResponse
type ListPaymentsResponse struct {
	Payments             []PaymentResponse `json:"payments,omitempty"`
	TotalPayments        int32             `json:"total_payments"`
	AdditionalProperties map[string]interface{}
}

type _ListPaymentsResponse ListPaymentsResponse

// NewListPaymentsResponse instantiates a new ListPaymentsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListPaymentsResponse(totalPayments int32) *ListPaymentsResponse {
	this := ListPaymentsResponse{}
	this.TotalPayments = totalPayments
	return &this
}

// NewListPaymentsResponseWithDefaults instantiates a new ListPaymentsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListPaymentsResponseWithDefaults() *ListPaymentsResponse {
	this := ListPaymentsResponse{}
	return &this
}

// GetPayments returns the Payments field value if set, zero value otherwise.
func (o *ListPaymentsResponse) GetPayments() []PaymentResponse {
	if o == nil || IsNil(o.Payments) {
		var ret []PaymentResponse
		return ret
	}
	return o.Payments
}

// GetPaymentsOk returns a tuple with the Payments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListPaymentsResponse) GetPaymentsOk() ([]PaymentResponse, bool) {
	if o == nil || IsNil(o.Payments) {
		return nil, false
	}
	return o.Payments, true
}

// HasPayments returns a boolean if a field has been set.
func (o *ListPaymentsResponse) HasPayments() bool {
	if o != nil && !IsNil(o.Payments) {
		return true
	}

	return false
}

// SetPayments gets a reference to the given []PaymentResponse and assigns it to the Payments field.
func (o *ListPaymentsResponse) SetPayments(v []PaymentResponse) {
	o.Payments = v
}

// GetTotalPayments returns the TotalPayments field value
func (o *ListPaymentsResponse) GetTotalPayments() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TotalPayments
}

// GetTotalPaymentsOk returns a tuple with the TotalPayments field value
// and a boolean to check if the value has been set.
func (o *ListPaymentsResponse) GetTotalPaymentsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalPayments, true
}

// SetTotalPayments sets field value
func (o *ListPaymentsResponse) SetTotalPayments(v int32) {
	o.TotalPayments = v
}

func (o ListPaymentsResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListPaymentsResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Payments) {
		toSerialize["payments"] = o.Payments
	}
	toSerialize["total_payments"] = o.TotalPayments

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ListPaymentsResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"total_payments",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varListPaymentsResponse := _ListPaymentsResponse{}

	err = json.Unmarshal(data, &varListPaymentsResponse)

	if err != nil {
		return err
	}

	*o = ListPaymentsResponse(varListPaymentsResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "payments")
		delete(additionalProperties, "total_payments")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableListPaymentsResponse struct {
	value *ListPaymentsResponse
	isSet bool
}

func (v NullableListPaymentsResponse) Get() *ListPaymentsResponse {
	return v.value
}

func (v *NullableListPaymentsResponse) Set(val *ListPaymentsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListPaymentsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListPaymentsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListPaymentsResponse(val *ListPaymentsResponse) *NullableListPaymentsResponse {
	return &NullableListPaymentsResponse{value: val, isSet: true}
}

func (v NullableListPaymentsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListPaymentsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
