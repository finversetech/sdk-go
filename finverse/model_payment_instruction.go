/*
Finverse Public

Documentation of the early finverse services

API version: 0.0.1
Contact: info@finverse.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package finverse

import (
	"encoding/json"
	"time"
)

// checks if the PaymentInstruction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PaymentInstruction{}

// PaymentInstruction struct for PaymentInstruction
type PaymentInstruction struct {
	// An id of the this payment
	PaymentInstructionId *string `json:"payment_instruction_id,omitempty"`
	// An id of the user of this payment, need to equal to userId when creating link
	UserId *string `json:"user_id,omitempty"`
	// An id that links this payment to a specific Login Identity
	LoginIdentityId *string `json:"login_identity_id,omitempty"`
	// Type of payment that was created, please check Documentation on which payment type is supported in each institution
	Type *string `json:"type,omitempty"`
	// The recipient name
	RecipientName *string `json:"recipient_name,omitempty"`
	// The recipient account Id
	RecipientAccountId *string `json:"recipient_account_id,omitempty"`
	// The sender name
	SenderName    *string         `json:"sender_name,omitempty"`
	SenderAccount *PaymentAccount `json:"sender_account,omitempty"`
	// The sender account Id
	SenderAccountId *string `json:"sender_account_id,omitempty"`
	// When the payment should start
	StartDate NullableString `json:"start_date,omitempty"`
	// When the payment should stop
	EndDate NullableString `json:"end_date,omitempty"`
	// The currency for the payment
	Currency *string `json:"currency,omitempty"`
	// The payment amount
	Amount *float32 `json:"amount,omitempty"`
	// How often the payment should be executed
	Frequency *string `json:"frequency,omitempty"`
	// Related remarks about this instruction
	Remarks *string `json:"remarks,omitempty"`
	// Status of the payment
	Status *string `json:"status,omitempty"`
	// Reference identification returned by institution
	ReferenceId *string    `json:"reference_id,omitempty"`
	LastUpdate  *time.Time `json:"last_update,omitempty"`
	// Extra information collected for this payment instruction
	Info                 map[string]interface{} `json:"info,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PaymentInstruction PaymentInstruction

// NewPaymentInstruction instantiates a new PaymentInstruction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPaymentInstruction() *PaymentInstruction {
	this := PaymentInstruction{}
	return &this
}

// NewPaymentInstructionWithDefaults instantiates a new PaymentInstruction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPaymentInstructionWithDefaults() *PaymentInstruction {
	this := PaymentInstruction{}
	return &this
}

// GetPaymentInstructionId returns the PaymentInstructionId field value if set, zero value otherwise.
func (o *PaymentInstruction) GetPaymentInstructionId() string {
	if o == nil || IsNil(o.PaymentInstructionId) {
		var ret string
		return ret
	}
	return *o.PaymentInstructionId
}

// GetPaymentInstructionIdOk returns a tuple with the PaymentInstructionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentInstruction) GetPaymentInstructionIdOk() (*string, bool) {
	if o == nil || IsNil(o.PaymentInstructionId) {
		return nil, false
	}
	return o.PaymentInstructionId, true
}

// HasPaymentInstructionId returns a boolean if a field has been set.
func (o *PaymentInstruction) HasPaymentInstructionId() bool {
	if o != nil && !IsNil(o.PaymentInstructionId) {
		return true
	}

	return false
}

// SetPaymentInstructionId gets a reference to the given string and assigns it to the PaymentInstructionId field.
func (o *PaymentInstruction) SetPaymentInstructionId(v string) {
	o.PaymentInstructionId = &v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *PaymentInstruction) GetUserId() string {
	if o == nil || IsNil(o.UserId) {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentInstruction) GetUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *PaymentInstruction) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *PaymentInstruction) SetUserId(v string) {
	o.UserId = &v
}

// GetLoginIdentityId returns the LoginIdentityId field value if set, zero value otherwise.
func (o *PaymentInstruction) GetLoginIdentityId() string {
	if o == nil || IsNil(o.LoginIdentityId) {
		var ret string
		return ret
	}
	return *o.LoginIdentityId
}

// GetLoginIdentityIdOk returns a tuple with the LoginIdentityId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentInstruction) GetLoginIdentityIdOk() (*string, bool) {
	if o == nil || IsNil(o.LoginIdentityId) {
		return nil, false
	}
	return o.LoginIdentityId, true
}

// HasLoginIdentityId returns a boolean if a field has been set.
func (o *PaymentInstruction) HasLoginIdentityId() bool {
	if o != nil && !IsNil(o.LoginIdentityId) {
		return true
	}

	return false
}

// SetLoginIdentityId gets a reference to the given string and assigns it to the LoginIdentityId field.
func (o *PaymentInstruction) SetLoginIdentityId(v string) {
	o.LoginIdentityId = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *PaymentInstruction) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentInstruction) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *PaymentInstruction) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *PaymentInstruction) SetType(v string) {
	o.Type = &v
}

// GetRecipientName returns the RecipientName field value if set, zero value otherwise.
func (o *PaymentInstruction) GetRecipientName() string {
	if o == nil || IsNil(o.RecipientName) {
		var ret string
		return ret
	}
	return *o.RecipientName
}

// GetRecipientNameOk returns a tuple with the RecipientName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentInstruction) GetRecipientNameOk() (*string, bool) {
	if o == nil || IsNil(o.RecipientName) {
		return nil, false
	}
	return o.RecipientName, true
}

// HasRecipientName returns a boolean if a field has been set.
func (o *PaymentInstruction) HasRecipientName() bool {
	if o != nil && !IsNil(o.RecipientName) {
		return true
	}

	return false
}

// SetRecipientName gets a reference to the given string and assigns it to the RecipientName field.
func (o *PaymentInstruction) SetRecipientName(v string) {
	o.RecipientName = &v
}

// GetRecipientAccountId returns the RecipientAccountId field value if set, zero value otherwise.
func (o *PaymentInstruction) GetRecipientAccountId() string {
	if o == nil || IsNil(o.RecipientAccountId) {
		var ret string
		return ret
	}
	return *o.RecipientAccountId
}

// GetRecipientAccountIdOk returns a tuple with the RecipientAccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentInstruction) GetRecipientAccountIdOk() (*string, bool) {
	if o == nil || IsNil(o.RecipientAccountId) {
		return nil, false
	}
	return o.RecipientAccountId, true
}

// HasRecipientAccountId returns a boolean if a field has been set.
func (o *PaymentInstruction) HasRecipientAccountId() bool {
	if o != nil && !IsNil(o.RecipientAccountId) {
		return true
	}

	return false
}

// SetRecipientAccountId gets a reference to the given string and assigns it to the RecipientAccountId field.
func (o *PaymentInstruction) SetRecipientAccountId(v string) {
	o.RecipientAccountId = &v
}

// GetSenderName returns the SenderName field value if set, zero value otherwise.
func (o *PaymentInstruction) GetSenderName() string {
	if o == nil || IsNil(o.SenderName) {
		var ret string
		return ret
	}
	return *o.SenderName
}

// GetSenderNameOk returns a tuple with the SenderName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentInstruction) GetSenderNameOk() (*string, bool) {
	if o == nil || IsNil(o.SenderName) {
		return nil, false
	}
	return o.SenderName, true
}

// HasSenderName returns a boolean if a field has been set.
func (o *PaymentInstruction) HasSenderName() bool {
	if o != nil && !IsNil(o.SenderName) {
		return true
	}

	return false
}

// SetSenderName gets a reference to the given string and assigns it to the SenderName field.
func (o *PaymentInstruction) SetSenderName(v string) {
	o.SenderName = &v
}

// GetSenderAccount returns the SenderAccount field value if set, zero value otherwise.
func (o *PaymentInstruction) GetSenderAccount() PaymentAccount {
	if o == nil || IsNil(o.SenderAccount) {
		var ret PaymentAccount
		return ret
	}
	return *o.SenderAccount
}

// GetSenderAccountOk returns a tuple with the SenderAccount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentInstruction) GetSenderAccountOk() (*PaymentAccount, bool) {
	if o == nil || IsNil(o.SenderAccount) {
		return nil, false
	}
	return o.SenderAccount, true
}

// HasSenderAccount returns a boolean if a field has been set.
func (o *PaymentInstruction) HasSenderAccount() bool {
	if o != nil && !IsNil(o.SenderAccount) {
		return true
	}

	return false
}

// SetSenderAccount gets a reference to the given PaymentAccount and assigns it to the SenderAccount field.
func (o *PaymentInstruction) SetSenderAccount(v PaymentAccount) {
	o.SenderAccount = &v
}

// GetSenderAccountId returns the SenderAccountId field value if set, zero value otherwise.
func (o *PaymentInstruction) GetSenderAccountId() string {
	if o == nil || IsNil(o.SenderAccountId) {
		var ret string
		return ret
	}
	return *o.SenderAccountId
}

// GetSenderAccountIdOk returns a tuple with the SenderAccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentInstruction) GetSenderAccountIdOk() (*string, bool) {
	if o == nil || IsNil(o.SenderAccountId) {
		return nil, false
	}
	return o.SenderAccountId, true
}

// HasSenderAccountId returns a boolean if a field has been set.
func (o *PaymentInstruction) HasSenderAccountId() bool {
	if o != nil && !IsNil(o.SenderAccountId) {
		return true
	}

	return false
}

// SetSenderAccountId gets a reference to the given string and assigns it to the SenderAccountId field.
func (o *PaymentInstruction) SetSenderAccountId(v string) {
	o.SenderAccountId = &v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PaymentInstruction) GetStartDate() string {
	if o == nil || IsNil(o.StartDate.Get()) {
		var ret string
		return ret
	}
	return *o.StartDate.Get()
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PaymentInstruction) GetStartDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.StartDate.Get(), o.StartDate.IsSet()
}

// HasStartDate returns a boolean if a field has been set.
func (o *PaymentInstruction) HasStartDate() bool {
	if o != nil && o.StartDate.IsSet() {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given NullableString and assigns it to the StartDate field.
func (o *PaymentInstruction) SetStartDate(v string) {
	o.StartDate.Set(&v)
}

// SetStartDateNil sets the value for StartDate to be an explicit nil
func (o *PaymentInstruction) SetStartDateNil() {
	o.StartDate.Set(nil)
}

// UnsetStartDate ensures that no value is present for StartDate, not even an explicit nil
func (o *PaymentInstruction) UnsetStartDate() {
	o.StartDate.Unset()
}

// GetEndDate returns the EndDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PaymentInstruction) GetEndDate() string {
	if o == nil || IsNil(o.EndDate.Get()) {
		var ret string
		return ret
	}
	return *o.EndDate.Get()
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PaymentInstruction) GetEndDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EndDate.Get(), o.EndDate.IsSet()
}

// HasEndDate returns a boolean if a field has been set.
func (o *PaymentInstruction) HasEndDate() bool {
	if o != nil && o.EndDate.IsSet() {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given NullableString and assigns it to the EndDate field.
func (o *PaymentInstruction) SetEndDate(v string) {
	o.EndDate.Set(&v)
}

// SetEndDateNil sets the value for EndDate to be an explicit nil
func (o *PaymentInstruction) SetEndDateNil() {
	o.EndDate.Set(nil)
}

// UnsetEndDate ensures that no value is present for EndDate, not even an explicit nil
func (o *PaymentInstruction) UnsetEndDate() {
	o.EndDate.Unset()
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *PaymentInstruction) GetCurrency() string {
	if o == nil || IsNil(o.Currency) {
		var ret string
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentInstruction) GetCurrencyOk() (*string, bool) {
	if o == nil || IsNil(o.Currency) {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *PaymentInstruction) HasCurrency() bool {
	if o != nil && !IsNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given string and assigns it to the Currency field.
func (o *PaymentInstruction) SetCurrency(v string) {
	o.Currency = &v
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *PaymentInstruction) GetAmount() float32 {
	if o == nil || IsNil(o.Amount) {
		var ret float32
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentInstruction) GetAmountOk() (*float32, bool) {
	if o == nil || IsNil(o.Amount) {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *PaymentInstruction) HasAmount() bool {
	if o != nil && !IsNil(o.Amount) {
		return true
	}

	return false
}

// SetAmount gets a reference to the given float32 and assigns it to the Amount field.
func (o *PaymentInstruction) SetAmount(v float32) {
	o.Amount = &v
}

// GetFrequency returns the Frequency field value if set, zero value otherwise.
func (o *PaymentInstruction) GetFrequency() string {
	if o == nil || IsNil(o.Frequency) {
		var ret string
		return ret
	}
	return *o.Frequency
}

// GetFrequencyOk returns a tuple with the Frequency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentInstruction) GetFrequencyOk() (*string, bool) {
	if o == nil || IsNil(o.Frequency) {
		return nil, false
	}
	return o.Frequency, true
}

// HasFrequency returns a boolean if a field has been set.
func (o *PaymentInstruction) HasFrequency() bool {
	if o != nil && !IsNil(o.Frequency) {
		return true
	}

	return false
}

// SetFrequency gets a reference to the given string and assigns it to the Frequency field.
func (o *PaymentInstruction) SetFrequency(v string) {
	o.Frequency = &v
}

// GetRemarks returns the Remarks field value if set, zero value otherwise.
func (o *PaymentInstruction) GetRemarks() string {
	if o == nil || IsNil(o.Remarks) {
		var ret string
		return ret
	}
	return *o.Remarks
}

// GetRemarksOk returns a tuple with the Remarks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentInstruction) GetRemarksOk() (*string, bool) {
	if o == nil || IsNil(o.Remarks) {
		return nil, false
	}
	return o.Remarks, true
}

// HasRemarks returns a boolean if a field has been set.
func (o *PaymentInstruction) HasRemarks() bool {
	if o != nil && !IsNil(o.Remarks) {
		return true
	}

	return false
}

// SetRemarks gets a reference to the given string and assigns it to the Remarks field.
func (o *PaymentInstruction) SetRemarks(v string) {
	o.Remarks = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *PaymentInstruction) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentInstruction) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *PaymentInstruction) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *PaymentInstruction) SetStatus(v string) {
	o.Status = &v
}

// GetReferenceId returns the ReferenceId field value if set, zero value otherwise.
func (o *PaymentInstruction) GetReferenceId() string {
	if o == nil || IsNil(o.ReferenceId) {
		var ret string
		return ret
	}
	return *o.ReferenceId
}

// GetReferenceIdOk returns a tuple with the ReferenceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentInstruction) GetReferenceIdOk() (*string, bool) {
	if o == nil || IsNil(o.ReferenceId) {
		return nil, false
	}
	return o.ReferenceId, true
}

// HasReferenceId returns a boolean if a field has been set.
func (o *PaymentInstruction) HasReferenceId() bool {
	if o != nil && !IsNil(o.ReferenceId) {
		return true
	}

	return false
}

// SetReferenceId gets a reference to the given string and assigns it to the ReferenceId field.
func (o *PaymentInstruction) SetReferenceId(v string) {
	o.ReferenceId = &v
}

// GetLastUpdate returns the LastUpdate field value if set, zero value otherwise.
func (o *PaymentInstruction) GetLastUpdate() time.Time {
	if o == nil || IsNil(o.LastUpdate) {
		var ret time.Time
		return ret
	}
	return *o.LastUpdate
}

// GetLastUpdateOk returns a tuple with the LastUpdate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentInstruction) GetLastUpdateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastUpdate) {
		return nil, false
	}
	return o.LastUpdate, true
}

// HasLastUpdate returns a boolean if a field has been set.
func (o *PaymentInstruction) HasLastUpdate() bool {
	if o != nil && !IsNil(o.LastUpdate) {
		return true
	}

	return false
}

// SetLastUpdate gets a reference to the given time.Time and assigns it to the LastUpdate field.
func (o *PaymentInstruction) SetLastUpdate(v time.Time) {
	o.LastUpdate = &v
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *PaymentInstruction) GetInfo() map[string]interface{} {
	if o == nil || IsNil(o.Info) {
		var ret map[string]interface{}
		return ret
	}
	return o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentInstruction) GetInfoOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Info) {
		return map[string]interface{}{}, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *PaymentInstruction) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]interface{} and assigns it to the Info field.
func (o *PaymentInstruction) SetInfo(v map[string]interface{}) {
	o.Info = v
}

func (o PaymentInstruction) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PaymentInstruction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PaymentInstructionId) {
		toSerialize["payment_instruction_id"] = o.PaymentInstructionId
	}
	if !IsNil(o.UserId) {
		toSerialize["user_id"] = o.UserId
	}
	if !IsNil(o.LoginIdentityId) {
		toSerialize["login_identity_id"] = o.LoginIdentityId
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.RecipientName) {
		toSerialize["recipient_name"] = o.RecipientName
	}
	if !IsNil(o.RecipientAccountId) {
		toSerialize["recipient_account_id"] = o.RecipientAccountId
	}
	if !IsNil(o.SenderName) {
		toSerialize["sender_name"] = o.SenderName
	}
	if !IsNil(o.SenderAccount) {
		toSerialize["sender_account"] = o.SenderAccount
	}
	if !IsNil(o.SenderAccountId) {
		toSerialize["sender_account_id"] = o.SenderAccountId
	}
	if o.StartDate.IsSet() {
		toSerialize["start_date"] = o.StartDate.Get()
	}
	if o.EndDate.IsSet() {
		toSerialize["end_date"] = o.EndDate.Get()
	}
	if !IsNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	if !IsNil(o.Amount) {
		toSerialize["amount"] = o.Amount
	}
	if !IsNil(o.Frequency) {
		toSerialize["frequency"] = o.Frequency
	}
	if !IsNil(o.Remarks) {
		toSerialize["remarks"] = o.Remarks
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.ReferenceId) {
		toSerialize["reference_id"] = o.ReferenceId
	}
	if !IsNil(o.LastUpdate) {
		toSerialize["last_update"] = o.LastUpdate
	}
	if !IsNil(o.Info) {
		toSerialize["info"] = o.Info
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PaymentInstruction) UnmarshalJSON(data []byte) (err error) {
	varPaymentInstruction := _PaymentInstruction{}

	err = json.Unmarshal(data, &varPaymentInstruction)

	if err != nil {
		return err
	}

	*o = PaymentInstruction(varPaymentInstruction)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "payment_instruction_id")
		delete(additionalProperties, "user_id")
		delete(additionalProperties, "login_identity_id")
		delete(additionalProperties, "type")
		delete(additionalProperties, "recipient_name")
		delete(additionalProperties, "recipient_account_id")
		delete(additionalProperties, "sender_name")
		delete(additionalProperties, "sender_account")
		delete(additionalProperties, "sender_account_id")
		delete(additionalProperties, "start_date")
		delete(additionalProperties, "end_date")
		delete(additionalProperties, "currency")
		delete(additionalProperties, "amount")
		delete(additionalProperties, "frequency")
		delete(additionalProperties, "remarks")
		delete(additionalProperties, "status")
		delete(additionalProperties, "reference_id")
		delete(additionalProperties, "last_update")
		delete(additionalProperties, "info")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePaymentInstruction struct {
	value *PaymentInstruction
	isSet bool
}

func (v NullablePaymentInstruction) Get() *PaymentInstruction {
	return v.value
}

func (v *NullablePaymentInstruction) Set(val *PaymentInstruction) {
	v.value = val
	v.isSet = true
}

func (v NullablePaymentInstruction) IsSet() bool {
	return v.isSet
}

func (v *NullablePaymentInstruction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaymentInstruction(val *PaymentInstruction) *NullablePaymentInstruction {
	return &NullablePaymentInstruction{value: val, isSet: true}
}

func (v NullablePaymentInstruction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaymentInstruction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
