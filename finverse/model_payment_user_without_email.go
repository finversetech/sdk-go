/*
Finverse Public

Documentation of the early finverse services

API version: 0.0.1
Contact: info@finverse.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package finverse

import (
	"encoding/json"
	"time"
)

// PaymentUserWithoutEmail struct for PaymentUserWithoutEmail
type PaymentUserWithoutEmail struct {
	CreatedAt      *time.Time         `json:"created_at,omitempty"`
	Email          *string            `json:"email,omitempty"`
	ExternalUserId *string            `json:"external_user_id,omitempty"`
	Metadata       *map[string]string `json:"metadata,omitempty"`
	Name           *string            `json:"name,omitempty"`
	UserDetails    []SenderDetail     `json:"user_details,omitempty"`
	UpdatedAt      *time.Time         `json:"updated_at,omitempty"`
	NextBillUpdate NullableTime       `json:"next_bill_update,omitempty"`
	UserId         *string            `json:"user_id,omitempty"`
	UserType       *string            `json:"user_type,omitempty"`
	// Whether the user has given consent for autopay
	AutopayConsent      bool                         `json:"autopay_consent"`
	IntegrationMetadata *IntegrationMetadataResponse `json:"integration_metadata,omitempty"`
}

// NewPaymentUserWithoutEmail instantiates a new PaymentUserWithoutEmail object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPaymentUserWithoutEmail(autopayConsent bool) *PaymentUserWithoutEmail {
	this := PaymentUserWithoutEmail{}
	this.AutopayConsent = autopayConsent
	return &this
}

// NewPaymentUserWithoutEmailWithDefaults instantiates a new PaymentUserWithoutEmail object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPaymentUserWithoutEmailWithDefaults() *PaymentUserWithoutEmail {
	this := PaymentUserWithoutEmail{}
	return &this
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *PaymentUserWithoutEmail) GetCreatedAt() time.Time {
	if o == nil || o.CreatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentUserWithoutEmail) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || o.CreatedAt == nil {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *PaymentUserWithoutEmail) HasCreatedAt() bool {
	if o != nil && o.CreatedAt != nil {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *PaymentUserWithoutEmail) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *PaymentUserWithoutEmail) GetEmail() string {
	if o == nil || o.Email == nil {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentUserWithoutEmail) GetEmailOk() (*string, bool) {
	if o == nil || o.Email == nil {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *PaymentUserWithoutEmail) HasEmail() bool {
	if o != nil && o.Email != nil {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *PaymentUserWithoutEmail) SetEmail(v string) {
	o.Email = &v
}

// GetExternalUserId returns the ExternalUserId field value if set, zero value otherwise.
func (o *PaymentUserWithoutEmail) GetExternalUserId() string {
	if o == nil || o.ExternalUserId == nil {
		var ret string
		return ret
	}
	return *o.ExternalUserId
}

// GetExternalUserIdOk returns a tuple with the ExternalUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentUserWithoutEmail) GetExternalUserIdOk() (*string, bool) {
	if o == nil || o.ExternalUserId == nil {
		return nil, false
	}
	return o.ExternalUserId, true
}

// HasExternalUserId returns a boolean if a field has been set.
func (o *PaymentUserWithoutEmail) HasExternalUserId() bool {
	if o != nil && o.ExternalUserId != nil {
		return true
	}

	return false
}

// SetExternalUserId gets a reference to the given string and assigns it to the ExternalUserId field.
func (o *PaymentUserWithoutEmail) SetExternalUserId(v string) {
	o.ExternalUserId = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *PaymentUserWithoutEmail) GetMetadata() map[string]string {
	if o == nil || o.Metadata == nil {
		var ret map[string]string
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentUserWithoutEmail) GetMetadataOk() (*map[string]string, bool) {
	if o == nil || o.Metadata == nil {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *PaymentUserWithoutEmail) HasMetadata() bool {
	if o != nil && o.Metadata != nil {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]string and assigns it to the Metadata field.
func (o *PaymentUserWithoutEmail) SetMetadata(v map[string]string) {
	o.Metadata = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PaymentUserWithoutEmail) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentUserWithoutEmail) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *PaymentUserWithoutEmail) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PaymentUserWithoutEmail) SetName(v string) {
	o.Name = &v
}

// GetUserDetails returns the UserDetails field value if set, zero value otherwise.
func (o *PaymentUserWithoutEmail) GetUserDetails() []SenderDetail {
	if o == nil || o.UserDetails == nil {
		var ret []SenderDetail
		return ret
	}
	return o.UserDetails
}

// GetUserDetailsOk returns a tuple with the UserDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentUserWithoutEmail) GetUserDetailsOk() ([]SenderDetail, bool) {
	if o == nil || o.UserDetails == nil {
		return nil, false
	}
	return o.UserDetails, true
}

// HasUserDetails returns a boolean if a field has been set.
func (o *PaymentUserWithoutEmail) HasUserDetails() bool {
	if o != nil && o.UserDetails != nil {
		return true
	}

	return false
}

// SetUserDetails gets a reference to the given []SenderDetail and assigns it to the UserDetails field.
func (o *PaymentUserWithoutEmail) SetUserDetails(v []SenderDetail) {
	o.UserDetails = v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *PaymentUserWithoutEmail) GetUpdatedAt() time.Time {
	if o == nil || o.UpdatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentUserWithoutEmail) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || o.UpdatedAt == nil {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *PaymentUserWithoutEmail) HasUpdatedAt() bool {
	if o != nil && o.UpdatedAt != nil {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *PaymentUserWithoutEmail) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetNextBillUpdate returns the NextBillUpdate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PaymentUserWithoutEmail) GetNextBillUpdate() time.Time {
	if o == nil || o.NextBillUpdate.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.NextBillUpdate.Get()
}

// GetNextBillUpdateOk returns a tuple with the NextBillUpdate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PaymentUserWithoutEmail) GetNextBillUpdateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.NextBillUpdate.Get(), o.NextBillUpdate.IsSet()
}

// HasNextBillUpdate returns a boolean if a field has been set.
func (o *PaymentUserWithoutEmail) HasNextBillUpdate() bool {
	if o != nil && o.NextBillUpdate.IsSet() {
		return true
	}

	return false
}

// SetNextBillUpdate gets a reference to the given NullableTime and assigns it to the NextBillUpdate field.
func (o *PaymentUserWithoutEmail) SetNextBillUpdate(v time.Time) {
	o.NextBillUpdate.Set(&v)
}

// SetNextBillUpdateNil sets the value for NextBillUpdate to be an explicit nil
func (o *PaymentUserWithoutEmail) SetNextBillUpdateNil() {
	o.NextBillUpdate.Set(nil)
}

// UnsetNextBillUpdate ensures that no value is present for NextBillUpdate, not even an explicit nil
func (o *PaymentUserWithoutEmail) UnsetNextBillUpdate() {
	o.NextBillUpdate.Unset()
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *PaymentUserWithoutEmail) GetUserId() string {
	if o == nil || o.UserId == nil {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentUserWithoutEmail) GetUserIdOk() (*string, bool) {
	if o == nil || o.UserId == nil {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *PaymentUserWithoutEmail) HasUserId() bool {
	if o != nil && o.UserId != nil {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *PaymentUserWithoutEmail) SetUserId(v string) {
	o.UserId = &v
}

// GetUserType returns the UserType field value if set, zero value otherwise.
func (o *PaymentUserWithoutEmail) GetUserType() string {
	if o == nil || o.UserType == nil {
		var ret string
		return ret
	}
	return *o.UserType
}

// GetUserTypeOk returns a tuple with the UserType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentUserWithoutEmail) GetUserTypeOk() (*string, bool) {
	if o == nil || o.UserType == nil {
		return nil, false
	}
	return o.UserType, true
}

// HasUserType returns a boolean if a field has been set.
func (o *PaymentUserWithoutEmail) HasUserType() bool {
	if o != nil && o.UserType != nil {
		return true
	}

	return false
}

// SetUserType gets a reference to the given string and assigns it to the UserType field.
func (o *PaymentUserWithoutEmail) SetUserType(v string) {
	o.UserType = &v
}

// GetAutopayConsent returns the AutopayConsent field value
func (o *PaymentUserWithoutEmail) GetAutopayConsent() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.AutopayConsent
}

// GetAutopayConsentOk returns a tuple with the AutopayConsent field value
// and a boolean to check if the value has been set.
func (o *PaymentUserWithoutEmail) GetAutopayConsentOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AutopayConsent, true
}

// SetAutopayConsent sets field value
func (o *PaymentUserWithoutEmail) SetAutopayConsent(v bool) {
	o.AutopayConsent = v
}

// GetIntegrationMetadata returns the IntegrationMetadata field value if set, zero value otherwise.
func (o *PaymentUserWithoutEmail) GetIntegrationMetadata() IntegrationMetadataResponse {
	if o == nil || o.IntegrationMetadata == nil {
		var ret IntegrationMetadataResponse
		return ret
	}
	return *o.IntegrationMetadata
}

// GetIntegrationMetadataOk returns a tuple with the IntegrationMetadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentUserWithoutEmail) GetIntegrationMetadataOk() (*IntegrationMetadataResponse, bool) {
	if o == nil || o.IntegrationMetadata == nil {
		return nil, false
	}
	return o.IntegrationMetadata, true
}

// HasIntegrationMetadata returns a boolean if a field has been set.
func (o *PaymentUserWithoutEmail) HasIntegrationMetadata() bool {
	if o != nil && o.IntegrationMetadata != nil {
		return true
	}

	return false
}

// SetIntegrationMetadata gets a reference to the given IntegrationMetadataResponse and assigns it to the IntegrationMetadata field.
func (o *PaymentUserWithoutEmail) SetIntegrationMetadata(v IntegrationMetadataResponse) {
	o.IntegrationMetadata = &v
}

func (o PaymentUserWithoutEmail) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CreatedAt != nil {
		toSerialize["created_at"] = o.CreatedAt
	}
	if o.Email != nil {
		toSerialize["email"] = o.Email
	}
	if o.ExternalUserId != nil {
		toSerialize["external_user_id"] = o.ExternalUserId
	}
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.UserDetails != nil {
		toSerialize["user_details"] = o.UserDetails
	}
	if o.UpdatedAt != nil {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if o.NextBillUpdate.IsSet() {
		toSerialize["next_bill_update"] = o.NextBillUpdate.Get()
	}
	if o.UserId != nil {
		toSerialize["user_id"] = o.UserId
	}
	if o.UserType != nil {
		toSerialize["user_type"] = o.UserType
	}
	if true {
		toSerialize["autopay_consent"] = o.AutopayConsent
	}
	if o.IntegrationMetadata != nil {
		toSerialize["integration_metadata"] = o.IntegrationMetadata
	}
	return json.Marshal(toSerialize)
}

type NullablePaymentUserWithoutEmail struct {
	value *PaymentUserWithoutEmail
	isSet bool
}

func (v NullablePaymentUserWithoutEmail) Get() *PaymentUserWithoutEmail {
	return v.value
}

func (v *NullablePaymentUserWithoutEmail) Set(val *PaymentUserWithoutEmail) {
	v.value = val
	v.isSet = true
}

func (v NullablePaymentUserWithoutEmail) IsSet() bool {
	return v.isSet
}

func (v *NullablePaymentUserWithoutEmail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaymentUserWithoutEmail(val *PaymentUserWithoutEmail) *NullablePaymentUserWithoutEmail {
	return &NullablePaymentUserWithoutEmail{value: val, isSet: true}
}

func (v NullablePaymentUserWithoutEmail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaymentUserWithoutEmail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
