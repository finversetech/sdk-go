/*
Finverse Public

Documentation of the early finverse services

API version: 0.0.1
Contact: info@finverse.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package finverse

import (
	"encoding/json"
	"fmt"
)

// checks if the FvEmbeddedErrorModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FvEmbeddedErrorModel{}

// FvEmbeddedErrorModel struct for FvEmbeddedErrorModel
type FvEmbeddedErrorModel struct {
	// The error type
	Type                 string `json:"type"`
	ErrorCode            string `json:"error_code"`
	Message              string `json:"message"`
	Details              string `json:"details"`
	AdditionalProperties map[string]interface{}
}

type _FvEmbeddedErrorModel FvEmbeddedErrorModel

// NewFvEmbeddedErrorModel instantiates a new FvEmbeddedErrorModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFvEmbeddedErrorModel(type_ string, errorCode string, message string, details string) *FvEmbeddedErrorModel {
	this := FvEmbeddedErrorModel{}
	this.Type = type_
	this.ErrorCode = errorCode
	this.Message = message
	this.Details = details
	return &this
}

// NewFvEmbeddedErrorModelWithDefaults instantiates a new FvEmbeddedErrorModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFvEmbeddedErrorModelWithDefaults() *FvEmbeddedErrorModel {
	this := FvEmbeddedErrorModel{}
	return &this
}

// GetType returns the Type field value
func (o *FvEmbeddedErrorModel) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *FvEmbeddedErrorModel) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *FvEmbeddedErrorModel) SetType(v string) {
	o.Type = v
}

// GetErrorCode returns the ErrorCode field value
func (o *FvEmbeddedErrorModel) GetErrorCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ErrorCode
}

// GetErrorCodeOk returns a tuple with the ErrorCode field value
// and a boolean to check if the value has been set.
func (o *FvEmbeddedErrorModel) GetErrorCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ErrorCode, true
}

// SetErrorCode sets field value
func (o *FvEmbeddedErrorModel) SetErrorCode(v string) {
	o.ErrorCode = v
}

// GetMessage returns the Message field value
func (o *FvEmbeddedErrorModel) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *FvEmbeddedErrorModel) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *FvEmbeddedErrorModel) SetMessage(v string) {
	o.Message = v
}

// GetDetails returns the Details field value
func (o *FvEmbeddedErrorModel) GetDetails() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Details
}

// GetDetailsOk returns a tuple with the Details field value
// and a boolean to check if the value has been set.
func (o *FvEmbeddedErrorModel) GetDetailsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Details, true
}

// SetDetails sets field value
func (o *FvEmbeddedErrorModel) SetDetails(v string) {
	o.Details = v
}

func (o FvEmbeddedErrorModel) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FvEmbeddedErrorModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["error_code"] = o.ErrorCode
	toSerialize["message"] = o.Message
	toSerialize["details"] = o.Details

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *FvEmbeddedErrorModel) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"error_code",
		"message",
		"details",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFvEmbeddedErrorModel := _FvEmbeddedErrorModel{}

	err = json.Unmarshal(data, &varFvEmbeddedErrorModel)

	if err != nil {
		return err
	}

	*o = FvEmbeddedErrorModel(varFvEmbeddedErrorModel)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "error_code")
		delete(additionalProperties, "message")
		delete(additionalProperties, "details")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableFvEmbeddedErrorModel struct {
	value *FvEmbeddedErrorModel
	isSet bool
}

func (v NullableFvEmbeddedErrorModel) Get() *FvEmbeddedErrorModel {
	return v.value
}

func (v *NullableFvEmbeddedErrorModel) Set(val *FvEmbeddedErrorModel) {
	v.value = val
	v.isSet = true
}

func (v NullableFvEmbeddedErrorModel) IsSet() bool {
	return v.isSet
}

func (v *NullableFvEmbeddedErrorModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFvEmbeddedErrorModel(val *FvEmbeddedErrorModel) *NullableFvEmbeddedErrorModel {
	return &NullableFvEmbeddedErrorModel{value: val, isSet: true}
}

func (v NullableFvEmbeddedErrorModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFvEmbeddedErrorModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
