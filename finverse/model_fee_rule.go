/*
Finverse Public

Documentation of the early finverse services

API version: 0.0.1
Contact: info@finverse.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package finverse

import (
	"encoding/json"
	"fmt"
)

// checks if the FeeRule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FeeRule{}

// FeeRule struct for FeeRule
type FeeRule struct {
	// Minimum fee amount that will be charged. Actual amount multiplied by 1000
	MinAmount *int32 `json:"min_amount,omitempty"`
	// Maximum fee amount that will be charged. Actual amount multiplied by 1000
	MaxAmount *int32 `json:"max_amount,omitempty"`
	// The BPS amount that will be used to calculate the fee.
	FeeBps *int32 `json:"fee_bps,omitempty"`
	// The currency the fee is charged in
	Currency string `json:"currency"`
	// The fixed fee amount that will be charged on top of the calculated fee
	FeeFixed *int32 `json:"fee_fixed,omitempty"`
	// Whether the fee is paid by the RECIPIENT or SENDER
	FeePaidBy            string `json:"fee_paid_by"`
	AdditionalProperties map[string]interface{}
}

type _FeeRule FeeRule

// NewFeeRule instantiates a new FeeRule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFeeRule(currency string, feePaidBy string) *FeeRule {
	this := FeeRule{}
	this.Currency = currency
	this.FeePaidBy = feePaidBy
	return &this
}

// NewFeeRuleWithDefaults instantiates a new FeeRule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFeeRuleWithDefaults() *FeeRule {
	this := FeeRule{}
	return &this
}

// GetMinAmount returns the MinAmount field value if set, zero value otherwise.
func (o *FeeRule) GetMinAmount() int32 {
	if o == nil || IsNil(o.MinAmount) {
		var ret int32
		return ret
	}
	return *o.MinAmount
}

// GetMinAmountOk returns a tuple with the MinAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeeRule) GetMinAmountOk() (*int32, bool) {
	if o == nil || IsNil(o.MinAmount) {
		return nil, false
	}
	return o.MinAmount, true
}

// HasMinAmount returns a boolean if a field has been set.
func (o *FeeRule) HasMinAmount() bool {
	if o != nil && !IsNil(o.MinAmount) {
		return true
	}

	return false
}

// SetMinAmount gets a reference to the given int32 and assigns it to the MinAmount field.
func (o *FeeRule) SetMinAmount(v int32) {
	o.MinAmount = &v
}

// GetMaxAmount returns the MaxAmount field value if set, zero value otherwise.
func (o *FeeRule) GetMaxAmount() int32 {
	if o == nil || IsNil(o.MaxAmount) {
		var ret int32
		return ret
	}
	return *o.MaxAmount
}

// GetMaxAmountOk returns a tuple with the MaxAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeeRule) GetMaxAmountOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxAmount) {
		return nil, false
	}
	return o.MaxAmount, true
}

// HasMaxAmount returns a boolean if a field has been set.
func (o *FeeRule) HasMaxAmount() bool {
	if o != nil && !IsNil(o.MaxAmount) {
		return true
	}

	return false
}

// SetMaxAmount gets a reference to the given int32 and assigns it to the MaxAmount field.
func (o *FeeRule) SetMaxAmount(v int32) {
	o.MaxAmount = &v
}

// GetFeeBps returns the FeeBps field value if set, zero value otherwise.
func (o *FeeRule) GetFeeBps() int32 {
	if o == nil || IsNil(o.FeeBps) {
		var ret int32
		return ret
	}
	return *o.FeeBps
}

// GetFeeBpsOk returns a tuple with the FeeBps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeeRule) GetFeeBpsOk() (*int32, bool) {
	if o == nil || IsNil(o.FeeBps) {
		return nil, false
	}
	return o.FeeBps, true
}

// HasFeeBps returns a boolean if a field has been set.
func (o *FeeRule) HasFeeBps() bool {
	if o != nil && !IsNil(o.FeeBps) {
		return true
	}

	return false
}

// SetFeeBps gets a reference to the given int32 and assigns it to the FeeBps field.
func (o *FeeRule) SetFeeBps(v int32) {
	o.FeeBps = &v
}

// GetCurrency returns the Currency field value
func (o *FeeRule) GetCurrency() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value
// and a boolean to check if the value has been set.
func (o *FeeRule) GetCurrencyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Currency, true
}

// SetCurrency sets field value
func (o *FeeRule) SetCurrency(v string) {
	o.Currency = v
}

// GetFeeFixed returns the FeeFixed field value if set, zero value otherwise.
func (o *FeeRule) GetFeeFixed() int32 {
	if o == nil || IsNil(o.FeeFixed) {
		var ret int32
		return ret
	}
	return *o.FeeFixed
}

// GetFeeFixedOk returns a tuple with the FeeFixed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeeRule) GetFeeFixedOk() (*int32, bool) {
	if o == nil || IsNil(o.FeeFixed) {
		return nil, false
	}
	return o.FeeFixed, true
}

// HasFeeFixed returns a boolean if a field has been set.
func (o *FeeRule) HasFeeFixed() bool {
	if o != nil && !IsNil(o.FeeFixed) {
		return true
	}

	return false
}

// SetFeeFixed gets a reference to the given int32 and assigns it to the FeeFixed field.
func (o *FeeRule) SetFeeFixed(v int32) {
	o.FeeFixed = &v
}

// GetFeePaidBy returns the FeePaidBy field value
func (o *FeeRule) GetFeePaidBy() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FeePaidBy
}

// GetFeePaidByOk returns a tuple with the FeePaidBy field value
// and a boolean to check if the value has been set.
func (o *FeeRule) GetFeePaidByOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FeePaidBy, true
}

// SetFeePaidBy sets field value
func (o *FeeRule) SetFeePaidBy(v string) {
	o.FeePaidBy = v
}

func (o FeeRule) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FeeRule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MinAmount) {
		toSerialize["min_amount"] = o.MinAmount
	}
	if !IsNil(o.MaxAmount) {
		toSerialize["max_amount"] = o.MaxAmount
	}
	if !IsNil(o.FeeBps) {
		toSerialize["fee_bps"] = o.FeeBps
	}
	toSerialize["currency"] = o.Currency
	if !IsNil(o.FeeFixed) {
		toSerialize["fee_fixed"] = o.FeeFixed
	}
	toSerialize["fee_paid_by"] = o.FeePaidBy

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *FeeRule) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"currency",
		"fee_paid_by",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFeeRule := _FeeRule{}

	err = json.Unmarshal(data, &varFeeRule)

	if err != nil {
		return err
	}

	*o = FeeRule(varFeeRule)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "min_amount")
		delete(additionalProperties, "max_amount")
		delete(additionalProperties, "fee_bps")
		delete(additionalProperties, "currency")
		delete(additionalProperties, "fee_fixed")
		delete(additionalProperties, "fee_paid_by")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableFeeRule struct {
	value *FeeRule
	isSet bool
}

func (v NullableFeeRule) Get() *FeeRule {
	return v.value
}

func (v *NullableFeeRule) Set(val *FeeRule) {
	v.value = val
	v.isSet = true
}

func (v NullableFeeRule) IsSet() bool {
	return v.isSet
}

func (v *NullableFeeRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFeeRule(val *FeeRule) *NullableFeeRule {
	return &NullableFeeRule{value: val, isSet: true}
}

func (v NullableFeeRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFeeRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
