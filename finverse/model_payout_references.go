/*
Finverse Public

Documentation of the early finverse services

API version: 0.0.1
Contact: info@finverse.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package finverse

import (
	"encoding/json"
)

// checks if the PayoutReferences type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PayoutReferences{}

// PayoutReferences struct for PayoutReferences
type PayoutReferences struct {
	RecipientReference   *string `json:"recipient_reference,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PayoutReferences PayoutReferences

// NewPayoutReferences instantiates a new PayoutReferences object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPayoutReferences() *PayoutReferences {
	this := PayoutReferences{}
	return &this
}

// NewPayoutReferencesWithDefaults instantiates a new PayoutReferences object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPayoutReferencesWithDefaults() *PayoutReferences {
	this := PayoutReferences{}
	return &this
}

// GetRecipientReference returns the RecipientReference field value if set, zero value otherwise.
func (o *PayoutReferences) GetRecipientReference() string {
	if o == nil || IsNil(o.RecipientReference) {
		var ret string
		return ret
	}
	return *o.RecipientReference
}

// GetRecipientReferenceOk returns a tuple with the RecipientReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PayoutReferences) GetRecipientReferenceOk() (*string, bool) {
	if o == nil || IsNil(o.RecipientReference) {
		return nil, false
	}
	return o.RecipientReference, true
}

// HasRecipientReference returns a boolean if a field has been set.
func (o *PayoutReferences) HasRecipientReference() bool {
	if o != nil && !IsNil(o.RecipientReference) {
		return true
	}

	return false
}

// SetRecipientReference gets a reference to the given string and assigns it to the RecipientReference field.
func (o *PayoutReferences) SetRecipientReference(v string) {
	o.RecipientReference = &v
}

func (o PayoutReferences) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PayoutReferences) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RecipientReference) {
		toSerialize["recipient_reference"] = o.RecipientReference
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PayoutReferences) UnmarshalJSON(data []byte) (err error) {
	varPayoutReferences := _PayoutReferences{}

	err = json.Unmarshal(data, &varPayoutReferences)

	if err != nil {
		return err
	}

	*o = PayoutReferences(varPayoutReferences)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "recipient_reference")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePayoutReferences struct {
	value *PayoutReferences
	isSet bool
}

func (v NullablePayoutReferences) Get() *PayoutReferences {
	return v.value
}

func (v *NullablePayoutReferences) Set(val *PayoutReferences) {
	v.value = val
	v.isSet = true
}

func (v NullablePayoutReferences) IsSet() bool {
	return v.isSet
}

func (v *NullablePayoutReferences) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePayoutReferences(val *PayoutReferences) *NullablePayoutReferences {
	return &NullablePayoutReferences{value: val, isSet: true}
}

func (v NullablePayoutReferences) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePayoutReferences) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
