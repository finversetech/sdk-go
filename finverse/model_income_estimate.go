/*
Finverse Public

Documentation of the early finverse services

API version: 0.0.1
Contact: info@finverse.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package finverse

import (
	"encoding/json"
	"fmt"
)

// checks if the IncomeEstimate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IncomeEstimate{}

// IncomeEstimate struct for IncomeEstimate
type IncomeEstimate struct {
	// Income amount
	Amount float32 `json:"amount"`
	// Currency
	Currency             string `json:"currency"`
	AdditionalProperties map[string]interface{}
}

type _IncomeEstimate IncomeEstimate

// NewIncomeEstimate instantiates a new IncomeEstimate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIncomeEstimate(amount float32, currency string) *IncomeEstimate {
	this := IncomeEstimate{}
	this.Amount = amount
	this.Currency = currency
	return &this
}

// NewIncomeEstimateWithDefaults instantiates a new IncomeEstimate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIncomeEstimateWithDefaults() *IncomeEstimate {
	this := IncomeEstimate{}
	return &this
}

// GetAmount returns the Amount field value
func (o *IncomeEstimate) GetAmount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *IncomeEstimate) GetAmountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *IncomeEstimate) SetAmount(v float32) {
	o.Amount = v
}

// GetCurrency returns the Currency field value
func (o *IncomeEstimate) GetCurrency() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value
// and a boolean to check if the value has been set.
func (o *IncomeEstimate) GetCurrencyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Currency, true
}

// SetCurrency sets field value
func (o *IncomeEstimate) SetCurrency(v string) {
	o.Currency = v
}

func (o IncomeEstimate) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IncomeEstimate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["amount"] = o.Amount
	toSerialize["currency"] = o.Currency

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *IncomeEstimate) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"amount",
		"currency",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varIncomeEstimate := _IncomeEstimate{}

	err = json.Unmarshal(data, &varIncomeEstimate)

	if err != nil {
		return err
	}

	*o = IncomeEstimate(varIncomeEstimate)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "amount")
		delete(additionalProperties, "currency")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableIncomeEstimate struct {
	value *IncomeEstimate
	isSet bool
}

func (v NullableIncomeEstimate) Get() *IncomeEstimate {
	return v.value
}

func (v *NullableIncomeEstimate) Set(val *IncomeEstimate) {
	v.value = val
	v.isSet = true
}

func (v NullableIncomeEstimate) IsSet() bool {
	return v.isSet
}

func (v *NullableIncomeEstimate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIncomeEstimate(val *IncomeEstimate) *NullableIncomeEstimate {
	return &NullableIncomeEstimate{value: val, isSet: true}
}

func (v NullableIncomeEstimate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIncomeEstimate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
