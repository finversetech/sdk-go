/*
Finverse Public

Documentation of the early finverse services

API version: 0.0.1
Contact: info@finverse.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package finverse

import (
	"encoding/json"
	"fmt"
	"time"
)

// checks if the PaymentResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PaymentResponse{}

// PaymentResponse struct for PaymentResponse
type PaymentResponse struct {
	// Finverse Payment ID
	PaymentId *string `json:"payment_id,omitempty"`
	// Amount to be paid, in currency's smallest unit or “minor unit”, as defined in ISO 4217. For example, HKD 100.01 is represented as amount = 10001 (minor unit = cents). For currencies without minor units (e.g. VND, JPY), the amount is represented as is, without modification. For example, VND 15101 is represented as amount = 15101.
	Amount int32 `json:"amount"`
	// Surcharge amount in minor
	SurchargeAmount int32 `json:"surcharge_amount"`
	// Amount with all fees and surcharges applied in minor
	AmountTotalWithSurcharge int32 `json:"amount_total_with_surcharge"`
	// The currency code as defined in ISO 4217.
	Currency *string `json:"currency,omitempty"`
	// Indicates whether this is a mandate-based payment or one-off direct payment to an account. Possible values - MANDATE, SINGLE
	Type *string `json:"type,omitempty"`
	// Timestamp in ISO format (YYYY-MM-DDTHH:MM:SS.SSSZ)
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// Possible values - CREATED, AUTHORIZED, SUBMITTED, EXECUTED, FAILED, REJECTED, CANCELLED.
	Status *string `json:"status,omitempty"`
	// ID of the payment method this pament is referring to.
	PaymentMethodId  *string                  `json:"payment_method_id,omitempty"`
	PaymentDetails   *PaymentDetails2         `json:"payment_details,omitempty"`
	Recipient        *MandateRecipient        `json:"recipient,omitempty"`
	RecipientAccount *MandateRecipientAccount `json:"recipient_account,omitempty"`
	Sender           *GetMandateSender        `json:"sender,omitempty"`
	SenderAccount    *MandateSenderAccount    `json:"sender_account,omitempty"`
	Fees             []Fee                    `json:"fees,omitempty"`
	// Timestamp in ISO format (YYYY-MM-DDTHH:MM:SS.SSSZ)
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// Additional attributes of the payment in key:value format (e.g. payment_internal_id: 1234). It supports up to 10 key:value pairs, whereas the key and value supports up to 50 and 1000 characters respectively.
	Metadata             *map[string]string            `json:"metadata,omitempty"`
	Error                *FvEmbeddedErrorModel         `json:"error,omitempty"`
	PaymentMethod        *PaymentSnapshotPaymentMethod `json:"payment_method,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PaymentResponse PaymentResponse

// NewPaymentResponse instantiates a new PaymentResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPaymentResponse(amount int32, surchargeAmount int32, amountTotalWithSurcharge int32) *PaymentResponse {
	this := PaymentResponse{}
	this.Amount = amount
	this.SurchargeAmount = surchargeAmount
	this.AmountTotalWithSurcharge = amountTotalWithSurcharge
	return &this
}

// NewPaymentResponseWithDefaults instantiates a new PaymentResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPaymentResponseWithDefaults() *PaymentResponse {
	this := PaymentResponse{}
	return &this
}

// GetPaymentId returns the PaymentId field value if set, zero value otherwise.
func (o *PaymentResponse) GetPaymentId() string {
	if o == nil || IsNil(o.PaymentId) {
		var ret string
		return ret
	}
	return *o.PaymentId
}

// GetPaymentIdOk returns a tuple with the PaymentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentResponse) GetPaymentIdOk() (*string, bool) {
	if o == nil || IsNil(o.PaymentId) {
		return nil, false
	}
	return o.PaymentId, true
}

// HasPaymentId returns a boolean if a field has been set.
func (o *PaymentResponse) HasPaymentId() bool {
	if o != nil && !IsNil(o.PaymentId) {
		return true
	}

	return false
}

// SetPaymentId gets a reference to the given string and assigns it to the PaymentId field.
func (o *PaymentResponse) SetPaymentId(v string) {
	o.PaymentId = &v
}

// GetAmount returns the Amount field value
func (o *PaymentResponse) GetAmount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *PaymentResponse) GetAmountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *PaymentResponse) SetAmount(v int32) {
	o.Amount = v
}

// GetSurchargeAmount returns the SurchargeAmount field value
func (o *PaymentResponse) GetSurchargeAmount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.SurchargeAmount
}

// GetSurchargeAmountOk returns a tuple with the SurchargeAmount field value
// and a boolean to check if the value has been set.
func (o *PaymentResponse) GetSurchargeAmountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SurchargeAmount, true
}

// SetSurchargeAmount sets field value
func (o *PaymentResponse) SetSurchargeAmount(v int32) {
	o.SurchargeAmount = v
}

// GetAmountTotalWithSurcharge returns the AmountTotalWithSurcharge field value
func (o *PaymentResponse) GetAmountTotalWithSurcharge() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.AmountTotalWithSurcharge
}

// GetAmountTotalWithSurchargeOk returns a tuple with the AmountTotalWithSurcharge field value
// and a boolean to check if the value has been set.
func (o *PaymentResponse) GetAmountTotalWithSurchargeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AmountTotalWithSurcharge, true
}

// SetAmountTotalWithSurcharge sets field value
func (o *PaymentResponse) SetAmountTotalWithSurcharge(v int32) {
	o.AmountTotalWithSurcharge = v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *PaymentResponse) GetCurrency() string {
	if o == nil || IsNil(o.Currency) {
		var ret string
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentResponse) GetCurrencyOk() (*string, bool) {
	if o == nil || IsNil(o.Currency) {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *PaymentResponse) HasCurrency() bool {
	if o != nil && !IsNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given string and assigns it to the Currency field.
func (o *PaymentResponse) SetCurrency(v string) {
	o.Currency = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *PaymentResponse) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentResponse) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *PaymentResponse) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *PaymentResponse) SetType(v string) {
	o.Type = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *PaymentResponse) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentResponse) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *PaymentResponse) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *PaymentResponse) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *PaymentResponse) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentResponse) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *PaymentResponse) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *PaymentResponse) SetStatus(v string) {
	o.Status = &v
}

// GetPaymentMethodId returns the PaymentMethodId field value if set, zero value otherwise.
func (o *PaymentResponse) GetPaymentMethodId() string {
	if o == nil || IsNil(o.PaymentMethodId) {
		var ret string
		return ret
	}
	return *o.PaymentMethodId
}

// GetPaymentMethodIdOk returns a tuple with the PaymentMethodId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentResponse) GetPaymentMethodIdOk() (*string, bool) {
	if o == nil || IsNil(o.PaymentMethodId) {
		return nil, false
	}
	return o.PaymentMethodId, true
}

// HasPaymentMethodId returns a boolean if a field has been set.
func (o *PaymentResponse) HasPaymentMethodId() bool {
	if o != nil && !IsNil(o.PaymentMethodId) {
		return true
	}

	return false
}

// SetPaymentMethodId gets a reference to the given string and assigns it to the PaymentMethodId field.
func (o *PaymentResponse) SetPaymentMethodId(v string) {
	o.PaymentMethodId = &v
}

// GetPaymentDetails returns the PaymentDetails field value if set, zero value otherwise.
func (o *PaymentResponse) GetPaymentDetails() PaymentDetails2 {
	if o == nil || IsNil(o.PaymentDetails) {
		var ret PaymentDetails2
		return ret
	}
	return *o.PaymentDetails
}

// GetPaymentDetailsOk returns a tuple with the PaymentDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentResponse) GetPaymentDetailsOk() (*PaymentDetails2, bool) {
	if o == nil || IsNil(o.PaymentDetails) {
		return nil, false
	}
	return o.PaymentDetails, true
}

// HasPaymentDetails returns a boolean if a field has been set.
func (o *PaymentResponse) HasPaymentDetails() bool {
	if o != nil && !IsNil(o.PaymentDetails) {
		return true
	}

	return false
}

// SetPaymentDetails gets a reference to the given PaymentDetails2 and assigns it to the PaymentDetails field.
func (o *PaymentResponse) SetPaymentDetails(v PaymentDetails2) {
	o.PaymentDetails = &v
}

// GetRecipient returns the Recipient field value if set, zero value otherwise.
func (o *PaymentResponse) GetRecipient() MandateRecipient {
	if o == nil || IsNil(o.Recipient) {
		var ret MandateRecipient
		return ret
	}
	return *o.Recipient
}

// GetRecipientOk returns a tuple with the Recipient field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentResponse) GetRecipientOk() (*MandateRecipient, bool) {
	if o == nil || IsNil(o.Recipient) {
		return nil, false
	}
	return o.Recipient, true
}

// HasRecipient returns a boolean if a field has been set.
func (o *PaymentResponse) HasRecipient() bool {
	if o != nil && !IsNil(o.Recipient) {
		return true
	}

	return false
}

// SetRecipient gets a reference to the given MandateRecipient and assigns it to the Recipient field.
func (o *PaymentResponse) SetRecipient(v MandateRecipient) {
	o.Recipient = &v
}

// GetRecipientAccount returns the RecipientAccount field value if set, zero value otherwise.
func (o *PaymentResponse) GetRecipientAccount() MandateRecipientAccount {
	if o == nil || IsNil(o.RecipientAccount) {
		var ret MandateRecipientAccount
		return ret
	}
	return *o.RecipientAccount
}

// GetRecipientAccountOk returns a tuple with the RecipientAccount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentResponse) GetRecipientAccountOk() (*MandateRecipientAccount, bool) {
	if o == nil || IsNil(o.RecipientAccount) {
		return nil, false
	}
	return o.RecipientAccount, true
}

// HasRecipientAccount returns a boolean if a field has been set.
func (o *PaymentResponse) HasRecipientAccount() bool {
	if o != nil && !IsNil(o.RecipientAccount) {
		return true
	}

	return false
}

// SetRecipientAccount gets a reference to the given MandateRecipientAccount and assigns it to the RecipientAccount field.
func (o *PaymentResponse) SetRecipientAccount(v MandateRecipientAccount) {
	o.RecipientAccount = &v
}

// GetSender returns the Sender field value if set, zero value otherwise.
func (o *PaymentResponse) GetSender() GetMandateSender {
	if o == nil || IsNil(o.Sender) {
		var ret GetMandateSender
		return ret
	}
	return *o.Sender
}

// GetSenderOk returns a tuple with the Sender field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentResponse) GetSenderOk() (*GetMandateSender, bool) {
	if o == nil || IsNil(o.Sender) {
		return nil, false
	}
	return o.Sender, true
}

// HasSender returns a boolean if a field has been set.
func (o *PaymentResponse) HasSender() bool {
	if o != nil && !IsNil(o.Sender) {
		return true
	}

	return false
}

// SetSender gets a reference to the given GetMandateSender and assigns it to the Sender field.
func (o *PaymentResponse) SetSender(v GetMandateSender) {
	o.Sender = &v
}

// GetSenderAccount returns the SenderAccount field value if set, zero value otherwise.
func (o *PaymentResponse) GetSenderAccount() MandateSenderAccount {
	if o == nil || IsNil(o.SenderAccount) {
		var ret MandateSenderAccount
		return ret
	}
	return *o.SenderAccount
}

// GetSenderAccountOk returns a tuple with the SenderAccount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentResponse) GetSenderAccountOk() (*MandateSenderAccount, bool) {
	if o == nil || IsNil(o.SenderAccount) {
		return nil, false
	}
	return o.SenderAccount, true
}

// HasSenderAccount returns a boolean if a field has been set.
func (o *PaymentResponse) HasSenderAccount() bool {
	if o != nil && !IsNil(o.SenderAccount) {
		return true
	}

	return false
}

// SetSenderAccount gets a reference to the given MandateSenderAccount and assigns it to the SenderAccount field.
func (o *PaymentResponse) SetSenderAccount(v MandateSenderAccount) {
	o.SenderAccount = &v
}

// GetFees returns the Fees field value if set, zero value otherwise.
func (o *PaymentResponse) GetFees() []Fee {
	if o == nil || IsNil(o.Fees) {
		var ret []Fee
		return ret
	}
	return o.Fees
}

// GetFeesOk returns a tuple with the Fees field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentResponse) GetFeesOk() ([]Fee, bool) {
	if o == nil || IsNil(o.Fees) {
		return nil, false
	}
	return o.Fees, true
}

// HasFees returns a boolean if a field has been set.
func (o *PaymentResponse) HasFees() bool {
	if o != nil && !IsNil(o.Fees) {
		return true
	}

	return false
}

// SetFees gets a reference to the given []Fee and assigns it to the Fees field.
func (o *PaymentResponse) SetFees(v []Fee) {
	o.Fees = v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *PaymentResponse) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentResponse) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *PaymentResponse) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *PaymentResponse) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *PaymentResponse) GetMetadata() map[string]string {
	if o == nil || IsNil(o.Metadata) {
		var ret map[string]string
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentResponse) GetMetadataOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *PaymentResponse) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]string and assigns it to the Metadata field.
func (o *PaymentResponse) SetMetadata(v map[string]string) {
	o.Metadata = &v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *PaymentResponse) GetError() FvEmbeddedErrorModel {
	if o == nil || IsNil(o.Error) {
		var ret FvEmbeddedErrorModel
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentResponse) GetErrorOk() (*FvEmbeddedErrorModel, bool) {
	if o == nil || IsNil(o.Error) {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *PaymentResponse) HasError() bool {
	if o != nil && !IsNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given FvEmbeddedErrorModel and assigns it to the Error field.
func (o *PaymentResponse) SetError(v FvEmbeddedErrorModel) {
	o.Error = &v
}

// GetPaymentMethod returns the PaymentMethod field value if set, zero value otherwise.
func (o *PaymentResponse) GetPaymentMethod() PaymentSnapshotPaymentMethod {
	if o == nil || IsNil(o.PaymentMethod) {
		var ret PaymentSnapshotPaymentMethod
		return ret
	}
	return *o.PaymentMethod
}

// GetPaymentMethodOk returns a tuple with the PaymentMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentResponse) GetPaymentMethodOk() (*PaymentSnapshotPaymentMethod, bool) {
	if o == nil || IsNil(o.PaymentMethod) {
		return nil, false
	}
	return o.PaymentMethod, true
}

// HasPaymentMethod returns a boolean if a field has been set.
func (o *PaymentResponse) HasPaymentMethod() bool {
	if o != nil && !IsNil(o.PaymentMethod) {
		return true
	}

	return false
}

// SetPaymentMethod gets a reference to the given PaymentSnapshotPaymentMethod and assigns it to the PaymentMethod field.
func (o *PaymentResponse) SetPaymentMethod(v PaymentSnapshotPaymentMethod) {
	o.PaymentMethod = &v
}

func (o PaymentResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PaymentResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PaymentId) {
		toSerialize["payment_id"] = o.PaymentId
	}
	toSerialize["amount"] = o.Amount
	toSerialize["surcharge_amount"] = o.SurchargeAmount
	toSerialize["amount_total_with_surcharge"] = o.AmountTotalWithSurcharge
	if !IsNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.PaymentMethodId) {
		toSerialize["payment_method_id"] = o.PaymentMethodId
	}
	if !IsNil(o.PaymentDetails) {
		toSerialize["payment_details"] = o.PaymentDetails
	}
	if !IsNil(o.Recipient) {
		toSerialize["recipient"] = o.Recipient
	}
	if !IsNil(o.RecipientAccount) {
		toSerialize["recipient_account"] = o.RecipientAccount
	}
	if !IsNil(o.Sender) {
		toSerialize["sender"] = o.Sender
	}
	if !IsNil(o.SenderAccount) {
		toSerialize["sender_account"] = o.SenderAccount
	}
	if !IsNil(o.Fees) {
		toSerialize["fees"] = o.Fees
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	if !IsNil(o.Error) {
		toSerialize["error"] = o.Error
	}
	if !IsNil(o.PaymentMethod) {
		toSerialize["payment_method"] = o.PaymentMethod
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PaymentResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"amount",
		"surcharge_amount",
		"amount_total_with_surcharge",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPaymentResponse := _PaymentResponse{}

	err = json.Unmarshal(data, &varPaymentResponse)

	if err != nil {
		return err
	}

	*o = PaymentResponse(varPaymentResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "payment_id")
		delete(additionalProperties, "amount")
		delete(additionalProperties, "surcharge_amount")
		delete(additionalProperties, "amount_total_with_surcharge")
		delete(additionalProperties, "currency")
		delete(additionalProperties, "type")
		delete(additionalProperties, "updated_at")
		delete(additionalProperties, "status")
		delete(additionalProperties, "payment_method_id")
		delete(additionalProperties, "payment_details")
		delete(additionalProperties, "recipient")
		delete(additionalProperties, "recipient_account")
		delete(additionalProperties, "sender")
		delete(additionalProperties, "sender_account")
		delete(additionalProperties, "fees")
		delete(additionalProperties, "created_at")
		delete(additionalProperties, "metadata")
		delete(additionalProperties, "error")
		delete(additionalProperties, "payment_method")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePaymentResponse struct {
	value *PaymentResponse
	isSet bool
}

func (v NullablePaymentResponse) Get() *PaymentResponse {
	return v.value
}

func (v *NullablePaymentResponse) Set(val *PaymentResponse) {
	v.value = val
	v.isSet = true
}

func (v NullablePaymentResponse) IsSet() bool {
	return v.isSet
}

func (v *NullablePaymentResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaymentResponse(val *PaymentResponse) *NullablePaymentResponse {
	return &NullablePaymentResponse{value: val, isSet: true}
}

func (v NullablePaymentResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaymentResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
