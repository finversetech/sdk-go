/*
Finverse Public

Documentation of the early finverse services

API version: 0.0.1
Contact: info@finverse.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package finverse

import (
	"encoding/json"
	"fmt"
)

// checks if the PayoutDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PayoutDetails{}

// PayoutDetails struct for PayoutDetails
type PayoutDetails struct {
	// The mandate used to execute payments for this payout instruction. Currency for the mandate must be supported by the recipient account
	MandateId string `json:"mandate_id"`
	// A description for the payment (that will appear as the transaction description on bank statements)
	Description *string `json:"description,omitempty"`
	// YYYY-MM-DD, date (in UTC) to execute the payment, must be 1 day later than current date
	ScheduledDate        string `json:"scheduled_date"`
	AdditionalProperties map[string]interface{}
}

type _PayoutDetails PayoutDetails

// NewPayoutDetails instantiates a new PayoutDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPayoutDetails(mandateId string, scheduledDate string) *PayoutDetails {
	this := PayoutDetails{}
	this.MandateId = mandateId
	this.ScheduledDate = scheduledDate
	return &this
}

// NewPayoutDetailsWithDefaults instantiates a new PayoutDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPayoutDetailsWithDefaults() *PayoutDetails {
	this := PayoutDetails{}
	return &this
}

// GetMandateId returns the MandateId field value
func (o *PayoutDetails) GetMandateId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MandateId
}

// GetMandateIdOk returns a tuple with the MandateId field value
// and a boolean to check if the value has been set.
func (o *PayoutDetails) GetMandateIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MandateId, true
}

// SetMandateId sets field value
func (o *PayoutDetails) SetMandateId(v string) {
	o.MandateId = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *PayoutDetails) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PayoutDetails) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *PayoutDetails) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *PayoutDetails) SetDescription(v string) {
	o.Description = &v
}

// GetScheduledDate returns the ScheduledDate field value
func (o *PayoutDetails) GetScheduledDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ScheduledDate
}

// GetScheduledDateOk returns a tuple with the ScheduledDate field value
// and a boolean to check if the value has been set.
func (o *PayoutDetails) GetScheduledDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ScheduledDate, true
}

// SetScheduledDate sets field value
func (o *PayoutDetails) SetScheduledDate(v string) {
	o.ScheduledDate = v
}

func (o PayoutDetails) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PayoutDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["mandate_id"] = o.MandateId
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["scheduled_date"] = o.ScheduledDate

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PayoutDetails) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"mandate_id",
		"scheduled_date",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPayoutDetails := _PayoutDetails{}

	err = json.Unmarshal(data, &varPayoutDetails)

	if err != nil {
		return err
	}

	*o = PayoutDetails(varPayoutDetails)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "mandate_id")
		delete(additionalProperties, "description")
		delete(additionalProperties, "scheduled_date")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePayoutDetails struct {
	value *PayoutDetails
	isSet bool
}

func (v NullablePayoutDetails) Get() *PayoutDetails {
	return v.value
}

func (v *NullablePayoutDetails) Set(val *PayoutDetails) {
	v.value = val
	v.isSet = true
}

func (v NullablePayoutDetails) IsSet() bool {
	return v.isSet
}

func (v *NullablePayoutDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePayoutDetails(val *PayoutDetails) *NullablePayoutDetails {
	return &NullablePayoutDetails{value: val, isSet: true}
}

func (v NullablePayoutDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePayoutDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
