/*
Finverse Public

Documentation of the early finverse services

API version: 0.0.1
Contact: devs@finverse.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package finverse

import (
	"encoding/json"
)

// SingleSourceIncome struct for SingleSourceIncome
type SingleSourceIncome struct {
	IncomeStreams []IncomeStream `json:"income_streams,omitempty"`
	IncomeTotal   *IncomeTotal   `json:"income_total,omitempty"`
	// Where the income estimate was sourced from
	Source *string `json:"source,omitempty"`
	// Unknown
	SourceId *string `json:"source_id,omitempty"`
}

// NewSingleSourceIncome instantiates a new SingleSourceIncome object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSingleSourceIncome() *SingleSourceIncome {
	this := SingleSourceIncome{}
	return &this
}

// NewSingleSourceIncomeWithDefaults instantiates a new SingleSourceIncome object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSingleSourceIncomeWithDefaults() *SingleSourceIncome {
	this := SingleSourceIncome{}
	return &this
}

// GetIncomeStreams returns the IncomeStreams field value if set, zero value otherwise.
func (o *SingleSourceIncome) GetIncomeStreams() []IncomeStream {
	if o == nil || o.IncomeStreams == nil {
		var ret []IncomeStream
		return ret
	}
	return o.IncomeStreams
}

// GetIncomeStreamsOk returns a tuple with the IncomeStreams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SingleSourceIncome) GetIncomeStreamsOk() ([]IncomeStream, bool) {
	if o == nil || o.IncomeStreams == nil {
		return nil, false
	}
	return o.IncomeStreams, true
}

// HasIncomeStreams returns a boolean if a field has been set.
func (o *SingleSourceIncome) HasIncomeStreams() bool {
	if o != nil && o.IncomeStreams != nil {
		return true
	}

	return false
}

// SetIncomeStreams gets a reference to the given []IncomeStream and assigns it to the IncomeStreams field.
func (o *SingleSourceIncome) SetIncomeStreams(v []IncomeStream) {
	o.IncomeStreams = v
}

// GetIncomeTotal returns the IncomeTotal field value if set, zero value otherwise.
func (o *SingleSourceIncome) GetIncomeTotal() IncomeTotal {
	if o == nil || o.IncomeTotal == nil {
		var ret IncomeTotal
		return ret
	}
	return *o.IncomeTotal
}

// GetIncomeTotalOk returns a tuple with the IncomeTotal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SingleSourceIncome) GetIncomeTotalOk() (*IncomeTotal, bool) {
	if o == nil || o.IncomeTotal == nil {
		return nil, false
	}
	return o.IncomeTotal, true
}

// HasIncomeTotal returns a boolean if a field has been set.
func (o *SingleSourceIncome) HasIncomeTotal() bool {
	if o != nil && o.IncomeTotal != nil {
		return true
	}

	return false
}

// SetIncomeTotal gets a reference to the given IncomeTotal and assigns it to the IncomeTotal field.
func (o *SingleSourceIncome) SetIncomeTotal(v IncomeTotal) {
	o.IncomeTotal = &v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *SingleSourceIncome) GetSource() string {
	if o == nil || o.Source == nil {
		var ret string
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SingleSourceIncome) GetSourceOk() (*string, bool) {
	if o == nil || o.Source == nil {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *SingleSourceIncome) HasSource() bool {
	if o != nil && o.Source != nil {
		return true
	}

	return false
}

// SetSource gets a reference to the given string and assigns it to the Source field.
func (o *SingleSourceIncome) SetSource(v string) {
	o.Source = &v
}

// GetSourceId returns the SourceId field value if set, zero value otherwise.
func (o *SingleSourceIncome) GetSourceId() string {
	if o == nil || o.SourceId == nil {
		var ret string
		return ret
	}
	return *o.SourceId
}

// GetSourceIdOk returns a tuple with the SourceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SingleSourceIncome) GetSourceIdOk() (*string, bool) {
	if o == nil || o.SourceId == nil {
		return nil, false
	}
	return o.SourceId, true
}

// HasSourceId returns a boolean if a field has been set.
func (o *SingleSourceIncome) HasSourceId() bool {
	if o != nil && o.SourceId != nil {
		return true
	}

	return false
}

// SetSourceId gets a reference to the given string and assigns it to the SourceId field.
func (o *SingleSourceIncome) SetSourceId(v string) {
	o.SourceId = &v
}

func (o SingleSourceIncome) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.IncomeStreams != nil {
		toSerialize["income_streams"] = o.IncomeStreams
	}
	if o.IncomeTotal != nil {
		toSerialize["income_total"] = o.IncomeTotal
	}
	if o.Source != nil {
		toSerialize["source"] = o.Source
	}
	if o.SourceId != nil {
		toSerialize["source_id"] = o.SourceId
	}
	return json.Marshal(toSerialize)
}

type NullableSingleSourceIncome struct {
	value *SingleSourceIncome
	isSet bool
}

func (v NullableSingleSourceIncome) Get() *SingleSourceIncome {
	return v.value
}

func (v *NullableSingleSourceIncome) Set(val *SingleSourceIncome) {
	v.value = val
	v.isSet = true
}

func (v NullableSingleSourceIncome) IsSet() bool {
	return v.isSet
}

func (v *NullableSingleSourceIncome) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSingleSourceIncome(val *SingleSourceIncome) *NullableSingleSourceIncome {
	return &NullableSingleSourceIncome{value: val, isSet: true}
}

func (v NullableSingleSourceIncome) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSingleSourceIncome) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
