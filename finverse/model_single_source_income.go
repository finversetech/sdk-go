/*
Finverse Public

Documentation of the early finverse services

API version: 0.0.1
Contact: info@finverse.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package finverse

import (
	"encoding/json"
	"fmt"
)

// checks if the SingleSourceIncome type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SingleSourceIncome{}

// SingleSourceIncome struct for SingleSourceIncome
type SingleSourceIncome struct {
	IncomeStreams []IncomeStream `json:"income_streams"`
	IncomeTotal   IncomeTotal    `json:"income_total"`
	// Where the income estimate was sourced from
	Source string `json:"source"`
	// Unknown
	SourceId             string `json:"source_id"`
	AdditionalProperties map[string]interface{}
}

type _SingleSourceIncome SingleSourceIncome

// NewSingleSourceIncome instantiates a new SingleSourceIncome object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSingleSourceIncome(incomeStreams []IncomeStream, incomeTotal IncomeTotal, source string, sourceId string) *SingleSourceIncome {
	this := SingleSourceIncome{}
	this.IncomeStreams = incomeStreams
	this.IncomeTotal = incomeTotal
	this.Source = source
	this.SourceId = sourceId
	return &this
}

// NewSingleSourceIncomeWithDefaults instantiates a new SingleSourceIncome object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSingleSourceIncomeWithDefaults() *SingleSourceIncome {
	this := SingleSourceIncome{}
	return &this
}

// GetIncomeStreams returns the IncomeStreams field value
func (o *SingleSourceIncome) GetIncomeStreams() []IncomeStream {
	if o == nil {
		var ret []IncomeStream
		return ret
	}

	return o.IncomeStreams
}

// GetIncomeStreamsOk returns a tuple with the IncomeStreams field value
// and a boolean to check if the value has been set.
func (o *SingleSourceIncome) GetIncomeStreamsOk() ([]IncomeStream, bool) {
	if o == nil {
		return nil, false
	}
	return o.IncomeStreams, true
}

// SetIncomeStreams sets field value
func (o *SingleSourceIncome) SetIncomeStreams(v []IncomeStream) {
	o.IncomeStreams = v
}

// GetIncomeTotal returns the IncomeTotal field value
func (o *SingleSourceIncome) GetIncomeTotal() IncomeTotal {
	if o == nil {
		var ret IncomeTotal
		return ret
	}

	return o.IncomeTotal
}

// GetIncomeTotalOk returns a tuple with the IncomeTotal field value
// and a boolean to check if the value has been set.
func (o *SingleSourceIncome) GetIncomeTotalOk() (*IncomeTotal, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IncomeTotal, true
}

// SetIncomeTotal sets field value
func (o *SingleSourceIncome) SetIncomeTotal(v IncomeTotal) {
	o.IncomeTotal = v
}

// GetSource returns the Source field value
func (o *SingleSourceIncome) GetSource() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Source
}

// GetSourceOk returns a tuple with the Source field value
// and a boolean to check if the value has been set.
func (o *SingleSourceIncome) GetSourceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Source, true
}

// SetSource sets field value
func (o *SingleSourceIncome) SetSource(v string) {
	o.Source = v
}

// GetSourceId returns the SourceId field value
func (o *SingleSourceIncome) GetSourceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SourceId
}

// GetSourceIdOk returns a tuple with the SourceId field value
// and a boolean to check if the value has been set.
func (o *SingleSourceIncome) GetSourceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SourceId, true
}

// SetSourceId sets field value
func (o *SingleSourceIncome) SetSourceId(v string) {
	o.SourceId = v
}

func (o SingleSourceIncome) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SingleSourceIncome) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["income_streams"] = o.IncomeStreams
	toSerialize["income_total"] = o.IncomeTotal
	toSerialize["source"] = o.Source
	toSerialize["source_id"] = o.SourceId

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SingleSourceIncome) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"income_streams",
		"income_total",
		"source",
		"source_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSingleSourceIncome := _SingleSourceIncome{}

	err = json.Unmarshal(data, &varSingleSourceIncome)

	if err != nil {
		return err
	}

	*o = SingleSourceIncome(varSingleSourceIncome)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "income_streams")
		delete(additionalProperties, "income_total")
		delete(additionalProperties, "source")
		delete(additionalProperties, "source_id")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSingleSourceIncome struct {
	value *SingleSourceIncome
	isSet bool
}

func (v NullableSingleSourceIncome) Get() *SingleSourceIncome {
	return v.value
}

func (v *NullableSingleSourceIncome) Set(val *SingleSourceIncome) {
	v.value = val
	v.isSet = true
}

func (v NullableSingleSourceIncome) IsSet() bool {
	return v.isSet
}

func (v *NullableSingleSourceIncome) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSingleSourceIncome(val *SingleSourceIncome) *NullableSingleSourceIncome {
	return &NullableSingleSourceIncome{value: val, isSet: true}
}

func (v NullableSingleSourceIncome) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSingleSourceIncome) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
