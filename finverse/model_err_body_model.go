/*
Finverse Public

Documentation of the early finverse services

API version: 0.0.1
Contact: info@finverse.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package finverse

import (
	"encoding/json"
)

// checks if the ErrBodyModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ErrBodyModel{}

// ErrBodyModel struct for ErrBodyModel
type ErrBodyModel struct {
	Error                *FvErrorModel `json:"error,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ErrBodyModel ErrBodyModel

// NewErrBodyModel instantiates a new ErrBodyModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewErrBodyModel() *ErrBodyModel {
	this := ErrBodyModel{}
	return &this
}

// NewErrBodyModelWithDefaults instantiates a new ErrBodyModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewErrBodyModelWithDefaults() *ErrBodyModel {
	this := ErrBodyModel{}
	return &this
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *ErrBodyModel) GetError() FvErrorModel {
	if o == nil || IsNil(o.Error) {
		var ret FvErrorModel
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrBodyModel) GetErrorOk() (*FvErrorModel, bool) {
	if o == nil || IsNil(o.Error) {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *ErrBodyModel) HasError() bool {
	if o != nil && !IsNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given FvErrorModel and assigns it to the Error field.
func (o *ErrBodyModel) SetError(v FvErrorModel) {
	o.Error = &v
}

func (o ErrBodyModel) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ErrBodyModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Error) {
		toSerialize["error"] = o.Error
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ErrBodyModel) UnmarshalJSON(data []byte) (err error) {
	varErrBodyModel := _ErrBodyModel{}

	err = json.Unmarshal(data, &varErrBodyModel)

	if err != nil {
		return err
	}

	*o = ErrBodyModel(varErrBodyModel)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "error")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableErrBodyModel struct {
	value *ErrBodyModel
	isSet bool
}

func (v NullableErrBodyModel) Get() *ErrBodyModel {
	return v.value
}

func (v *NullableErrBodyModel) Set(val *ErrBodyModel) {
	v.value = val
	v.isSet = true
}

func (v NullableErrBodyModel) IsSet() bool {
	return v.isSet
}

func (v *NullableErrBodyModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableErrBodyModel(val *ErrBodyModel) *NullableErrBodyModel {
	return &NullableErrBodyModel{value: val, isSet: true}
}

func (v NullableErrBodyModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableErrBodyModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
