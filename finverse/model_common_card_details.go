/*
Finverse Public

Documentation of the early finverse services

API version: 0.0.1
Contact: info@finverse.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package finverse

import (
	"encoding/json"
	"time"
)

// CommonCardDetails struct for CommonCardDetails
type CommonCardDetails struct {
	CurrentBalance       *CurrencyAmount       `json:"current_balance,omitempty"`
	PaymentDueAmount     *CurrencyAmount       `json:"payment_due_amount,omitempty"`
	StatementDueAmount   *CurrencyAmount       `json:"statement_due_amount,omitempty"`
	TotalCreditLimit     *CurrencyAmount       `json:"total_credit_limit,omitempty"`
	AvailableCreditLimit *CurrencyAmount       `json:"available_credit_limit,omitempty"`
	MinimumPaymentDue    *CurrencyAmount       `json:"minimum_payment_due,omitempty"`
	RewardsPointsBalance *RewardsPointsBalance `json:"rewards_points_balance,omitempty"`
	LastUpdate           *time.Time            `json:"last_update,omitempty"`
}

// NewCommonCardDetails instantiates a new CommonCardDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommonCardDetails() *CommonCardDetails {
	this := CommonCardDetails{}
	return &this
}

// NewCommonCardDetailsWithDefaults instantiates a new CommonCardDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommonCardDetailsWithDefaults() *CommonCardDetails {
	this := CommonCardDetails{}
	return &this
}

// GetCurrentBalance returns the CurrentBalance field value if set, zero value otherwise.
func (o *CommonCardDetails) GetCurrentBalance() CurrencyAmount {
	if o == nil || o.CurrentBalance == nil {
		var ret CurrencyAmount
		return ret
	}
	return *o.CurrentBalance
}

// GetCurrentBalanceOk returns a tuple with the CurrentBalance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonCardDetails) GetCurrentBalanceOk() (*CurrencyAmount, bool) {
	if o == nil || o.CurrentBalance == nil {
		return nil, false
	}
	return o.CurrentBalance, true
}

// HasCurrentBalance returns a boolean if a field has been set.
func (o *CommonCardDetails) HasCurrentBalance() bool {
	if o != nil && o.CurrentBalance != nil {
		return true
	}

	return false
}

// SetCurrentBalance gets a reference to the given CurrencyAmount and assigns it to the CurrentBalance field.
func (o *CommonCardDetails) SetCurrentBalance(v CurrencyAmount) {
	o.CurrentBalance = &v
}

// GetPaymentDueAmount returns the PaymentDueAmount field value if set, zero value otherwise.
func (o *CommonCardDetails) GetPaymentDueAmount() CurrencyAmount {
	if o == nil || o.PaymentDueAmount == nil {
		var ret CurrencyAmount
		return ret
	}
	return *o.PaymentDueAmount
}

// GetPaymentDueAmountOk returns a tuple with the PaymentDueAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonCardDetails) GetPaymentDueAmountOk() (*CurrencyAmount, bool) {
	if o == nil || o.PaymentDueAmount == nil {
		return nil, false
	}
	return o.PaymentDueAmount, true
}

// HasPaymentDueAmount returns a boolean if a field has been set.
func (o *CommonCardDetails) HasPaymentDueAmount() bool {
	if o != nil && o.PaymentDueAmount != nil {
		return true
	}

	return false
}

// SetPaymentDueAmount gets a reference to the given CurrencyAmount and assigns it to the PaymentDueAmount field.
func (o *CommonCardDetails) SetPaymentDueAmount(v CurrencyAmount) {
	o.PaymentDueAmount = &v
}

// GetStatementDueAmount returns the StatementDueAmount field value if set, zero value otherwise.
func (o *CommonCardDetails) GetStatementDueAmount() CurrencyAmount {
	if o == nil || o.StatementDueAmount == nil {
		var ret CurrencyAmount
		return ret
	}
	return *o.StatementDueAmount
}

// GetStatementDueAmountOk returns a tuple with the StatementDueAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonCardDetails) GetStatementDueAmountOk() (*CurrencyAmount, bool) {
	if o == nil || o.StatementDueAmount == nil {
		return nil, false
	}
	return o.StatementDueAmount, true
}

// HasStatementDueAmount returns a boolean if a field has been set.
func (o *CommonCardDetails) HasStatementDueAmount() bool {
	if o != nil && o.StatementDueAmount != nil {
		return true
	}

	return false
}

// SetStatementDueAmount gets a reference to the given CurrencyAmount and assigns it to the StatementDueAmount field.
func (o *CommonCardDetails) SetStatementDueAmount(v CurrencyAmount) {
	o.StatementDueAmount = &v
}

// GetTotalCreditLimit returns the TotalCreditLimit field value if set, zero value otherwise.
func (o *CommonCardDetails) GetTotalCreditLimit() CurrencyAmount {
	if o == nil || o.TotalCreditLimit == nil {
		var ret CurrencyAmount
		return ret
	}
	return *o.TotalCreditLimit
}

// GetTotalCreditLimitOk returns a tuple with the TotalCreditLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonCardDetails) GetTotalCreditLimitOk() (*CurrencyAmount, bool) {
	if o == nil || o.TotalCreditLimit == nil {
		return nil, false
	}
	return o.TotalCreditLimit, true
}

// HasTotalCreditLimit returns a boolean if a field has been set.
func (o *CommonCardDetails) HasTotalCreditLimit() bool {
	if o != nil && o.TotalCreditLimit != nil {
		return true
	}

	return false
}

// SetTotalCreditLimit gets a reference to the given CurrencyAmount and assigns it to the TotalCreditLimit field.
func (o *CommonCardDetails) SetTotalCreditLimit(v CurrencyAmount) {
	o.TotalCreditLimit = &v
}

// GetAvailableCreditLimit returns the AvailableCreditLimit field value if set, zero value otherwise.
func (o *CommonCardDetails) GetAvailableCreditLimit() CurrencyAmount {
	if o == nil || o.AvailableCreditLimit == nil {
		var ret CurrencyAmount
		return ret
	}
	return *o.AvailableCreditLimit
}

// GetAvailableCreditLimitOk returns a tuple with the AvailableCreditLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonCardDetails) GetAvailableCreditLimitOk() (*CurrencyAmount, bool) {
	if o == nil || o.AvailableCreditLimit == nil {
		return nil, false
	}
	return o.AvailableCreditLimit, true
}

// HasAvailableCreditLimit returns a boolean if a field has been set.
func (o *CommonCardDetails) HasAvailableCreditLimit() bool {
	if o != nil && o.AvailableCreditLimit != nil {
		return true
	}

	return false
}

// SetAvailableCreditLimit gets a reference to the given CurrencyAmount and assigns it to the AvailableCreditLimit field.
func (o *CommonCardDetails) SetAvailableCreditLimit(v CurrencyAmount) {
	o.AvailableCreditLimit = &v
}

// GetMinimumPaymentDue returns the MinimumPaymentDue field value if set, zero value otherwise.
func (o *CommonCardDetails) GetMinimumPaymentDue() CurrencyAmount {
	if o == nil || o.MinimumPaymentDue == nil {
		var ret CurrencyAmount
		return ret
	}
	return *o.MinimumPaymentDue
}

// GetMinimumPaymentDueOk returns a tuple with the MinimumPaymentDue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonCardDetails) GetMinimumPaymentDueOk() (*CurrencyAmount, bool) {
	if o == nil || o.MinimumPaymentDue == nil {
		return nil, false
	}
	return o.MinimumPaymentDue, true
}

// HasMinimumPaymentDue returns a boolean if a field has been set.
func (o *CommonCardDetails) HasMinimumPaymentDue() bool {
	if o != nil && o.MinimumPaymentDue != nil {
		return true
	}

	return false
}

// SetMinimumPaymentDue gets a reference to the given CurrencyAmount and assigns it to the MinimumPaymentDue field.
func (o *CommonCardDetails) SetMinimumPaymentDue(v CurrencyAmount) {
	o.MinimumPaymentDue = &v
}

// GetRewardsPointsBalance returns the RewardsPointsBalance field value if set, zero value otherwise.
func (o *CommonCardDetails) GetRewardsPointsBalance() RewardsPointsBalance {
	if o == nil || o.RewardsPointsBalance == nil {
		var ret RewardsPointsBalance
		return ret
	}
	return *o.RewardsPointsBalance
}

// GetRewardsPointsBalanceOk returns a tuple with the RewardsPointsBalance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonCardDetails) GetRewardsPointsBalanceOk() (*RewardsPointsBalance, bool) {
	if o == nil || o.RewardsPointsBalance == nil {
		return nil, false
	}
	return o.RewardsPointsBalance, true
}

// HasRewardsPointsBalance returns a boolean if a field has been set.
func (o *CommonCardDetails) HasRewardsPointsBalance() bool {
	if o != nil && o.RewardsPointsBalance != nil {
		return true
	}

	return false
}

// SetRewardsPointsBalance gets a reference to the given RewardsPointsBalance and assigns it to the RewardsPointsBalance field.
func (o *CommonCardDetails) SetRewardsPointsBalance(v RewardsPointsBalance) {
	o.RewardsPointsBalance = &v
}

// GetLastUpdate returns the LastUpdate field value if set, zero value otherwise.
func (o *CommonCardDetails) GetLastUpdate() time.Time {
	if o == nil || o.LastUpdate == nil {
		var ret time.Time
		return ret
	}
	return *o.LastUpdate
}

// GetLastUpdateOk returns a tuple with the LastUpdate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonCardDetails) GetLastUpdateOk() (*time.Time, bool) {
	if o == nil || o.LastUpdate == nil {
		return nil, false
	}
	return o.LastUpdate, true
}

// HasLastUpdate returns a boolean if a field has been set.
func (o *CommonCardDetails) HasLastUpdate() bool {
	if o != nil && o.LastUpdate != nil {
		return true
	}

	return false
}

// SetLastUpdate gets a reference to the given time.Time and assigns it to the LastUpdate field.
func (o *CommonCardDetails) SetLastUpdate(v time.Time) {
	o.LastUpdate = &v
}

func (o CommonCardDetails) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CurrentBalance != nil {
		toSerialize["current_balance"] = o.CurrentBalance
	}
	if o.PaymentDueAmount != nil {
		toSerialize["payment_due_amount"] = o.PaymentDueAmount
	}
	if o.StatementDueAmount != nil {
		toSerialize["statement_due_amount"] = o.StatementDueAmount
	}
	if o.TotalCreditLimit != nil {
		toSerialize["total_credit_limit"] = o.TotalCreditLimit
	}
	if o.AvailableCreditLimit != nil {
		toSerialize["available_credit_limit"] = o.AvailableCreditLimit
	}
	if o.MinimumPaymentDue != nil {
		toSerialize["minimum_payment_due"] = o.MinimumPaymentDue
	}
	if o.RewardsPointsBalance != nil {
		toSerialize["rewards_points_balance"] = o.RewardsPointsBalance
	}
	if o.LastUpdate != nil {
		toSerialize["last_update"] = o.LastUpdate
	}
	return json.Marshal(toSerialize)
}

type NullableCommonCardDetails struct {
	value *CommonCardDetails
	isSet bool
}

func (v NullableCommonCardDetails) Get() *CommonCardDetails {
	return v.value
}

func (v *NullableCommonCardDetails) Set(val *CommonCardDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableCommonCardDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableCommonCardDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommonCardDetails(val *CommonCardDetails) *NullableCommonCardDetails {
	return &NullableCommonCardDetails{value: val, isSet: true}
}

func (v NullableCommonCardDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommonCardDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
