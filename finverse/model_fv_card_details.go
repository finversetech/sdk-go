/*
Finverse Public

Documentation of the early finverse services

API version: 0.0.1
Contact: info@finverse.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package finverse

import (
	"encoding/json"
)

// checks if the FVCardDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FVCardDetails{}

// FVCardDetails struct for FVCardDetails
type FVCardDetails struct {
	// The credit card brand
	Brand *string `json:"brand,omitempty"`
	// Last 4 digits of the credit card number
	Last4 *string `json:"last4,omitempty"`
	// The credit card expiry month
	ExpiryMonth *int32 `json:"expiry_month,omitempty"`
	// The credit card expiry year
	ExpiryYear           *int32  `json:"expiry_year,omitempty"`
	ProcessorEntityName  *string `json:"processor_entity_name,omitempty"`
	CollectionEntityName *string `json:"collection_entity_name,omitempty"`
	Country              *string `json:"country,omitempty"`
	Fingerprint          *string `json:"fingerprint,omitempty"`
	Funding              *string `json:"funding,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _FVCardDetails FVCardDetails

// NewFVCardDetails instantiates a new FVCardDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFVCardDetails() *FVCardDetails {
	this := FVCardDetails{}
	return &this
}

// NewFVCardDetailsWithDefaults instantiates a new FVCardDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFVCardDetailsWithDefaults() *FVCardDetails {
	this := FVCardDetails{}
	return &this
}

// GetBrand returns the Brand field value if set, zero value otherwise.
func (o *FVCardDetails) GetBrand() string {
	if o == nil || IsNil(o.Brand) {
		var ret string
		return ret
	}
	return *o.Brand
}

// GetBrandOk returns a tuple with the Brand field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FVCardDetails) GetBrandOk() (*string, bool) {
	if o == nil || IsNil(o.Brand) {
		return nil, false
	}
	return o.Brand, true
}

// HasBrand returns a boolean if a field has been set.
func (o *FVCardDetails) HasBrand() bool {
	if o != nil && !IsNil(o.Brand) {
		return true
	}

	return false
}

// SetBrand gets a reference to the given string and assigns it to the Brand field.
func (o *FVCardDetails) SetBrand(v string) {
	o.Brand = &v
}

// GetLast4 returns the Last4 field value if set, zero value otherwise.
func (o *FVCardDetails) GetLast4() string {
	if o == nil || IsNil(o.Last4) {
		var ret string
		return ret
	}
	return *o.Last4
}

// GetLast4Ok returns a tuple with the Last4 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FVCardDetails) GetLast4Ok() (*string, bool) {
	if o == nil || IsNil(o.Last4) {
		return nil, false
	}
	return o.Last4, true
}

// HasLast4 returns a boolean if a field has been set.
func (o *FVCardDetails) HasLast4() bool {
	if o != nil && !IsNil(o.Last4) {
		return true
	}

	return false
}

// SetLast4 gets a reference to the given string and assigns it to the Last4 field.
func (o *FVCardDetails) SetLast4(v string) {
	o.Last4 = &v
}

// GetExpiryMonth returns the ExpiryMonth field value if set, zero value otherwise.
func (o *FVCardDetails) GetExpiryMonth() int32 {
	if o == nil || IsNil(o.ExpiryMonth) {
		var ret int32
		return ret
	}
	return *o.ExpiryMonth
}

// GetExpiryMonthOk returns a tuple with the ExpiryMonth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FVCardDetails) GetExpiryMonthOk() (*int32, bool) {
	if o == nil || IsNil(o.ExpiryMonth) {
		return nil, false
	}
	return o.ExpiryMonth, true
}

// HasExpiryMonth returns a boolean if a field has been set.
func (o *FVCardDetails) HasExpiryMonth() bool {
	if o != nil && !IsNil(o.ExpiryMonth) {
		return true
	}

	return false
}

// SetExpiryMonth gets a reference to the given int32 and assigns it to the ExpiryMonth field.
func (o *FVCardDetails) SetExpiryMonth(v int32) {
	o.ExpiryMonth = &v
}

// GetExpiryYear returns the ExpiryYear field value if set, zero value otherwise.
func (o *FVCardDetails) GetExpiryYear() int32 {
	if o == nil || IsNil(o.ExpiryYear) {
		var ret int32
		return ret
	}
	return *o.ExpiryYear
}

// GetExpiryYearOk returns a tuple with the ExpiryYear field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FVCardDetails) GetExpiryYearOk() (*int32, bool) {
	if o == nil || IsNil(o.ExpiryYear) {
		return nil, false
	}
	return o.ExpiryYear, true
}

// HasExpiryYear returns a boolean if a field has been set.
func (o *FVCardDetails) HasExpiryYear() bool {
	if o != nil && !IsNil(o.ExpiryYear) {
		return true
	}

	return false
}

// SetExpiryYear gets a reference to the given int32 and assigns it to the ExpiryYear field.
func (o *FVCardDetails) SetExpiryYear(v int32) {
	o.ExpiryYear = &v
}

// GetProcessorEntityName returns the ProcessorEntityName field value if set, zero value otherwise.
func (o *FVCardDetails) GetProcessorEntityName() string {
	if o == nil || IsNil(o.ProcessorEntityName) {
		var ret string
		return ret
	}
	return *o.ProcessorEntityName
}

// GetProcessorEntityNameOk returns a tuple with the ProcessorEntityName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FVCardDetails) GetProcessorEntityNameOk() (*string, bool) {
	if o == nil || IsNil(o.ProcessorEntityName) {
		return nil, false
	}
	return o.ProcessorEntityName, true
}

// HasProcessorEntityName returns a boolean if a field has been set.
func (o *FVCardDetails) HasProcessorEntityName() bool {
	if o != nil && !IsNil(o.ProcessorEntityName) {
		return true
	}

	return false
}

// SetProcessorEntityName gets a reference to the given string and assigns it to the ProcessorEntityName field.
func (o *FVCardDetails) SetProcessorEntityName(v string) {
	o.ProcessorEntityName = &v
}

// GetCollectionEntityName returns the CollectionEntityName field value if set, zero value otherwise.
func (o *FVCardDetails) GetCollectionEntityName() string {
	if o == nil || IsNil(o.CollectionEntityName) {
		var ret string
		return ret
	}
	return *o.CollectionEntityName
}

// GetCollectionEntityNameOk returns a tuple with the CollectionEntityName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FVCardDetails) GetCollectionEntityNameOk() (*string, bool) {
	if o == nil || IsNil(o.CollectionEntityName) {
		return nil, false
	}
	return o.CollectionEntityName, true
}

// HasCollectionEntityName returns a boolean if a field has been set.
func (o *FVCardDetails) HasCollectionEntityName() bool {
	if o != nil && !IsNil(o.CollectionEntityName) {
		return true
	}

	return false
}

// SetCollectionEntityName gets a reference to the given string and assigns it to the CollectionEntityName field.
func (o *FVCardDetails) SetCollectionEntityName(v string) {
	o.CollectionEntityName = &v
}

// GetCountry returns the Country field value if set, zero value otherwise.
func (o *FVCardDetails) GetCountry() string {
	if o == nil || IsNil(o.Country) {
		var ret string
		return ret
	}
	return *o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FVCardDetails) GetCountryOk() (*string, bool) {
	if o == nil || IsNil(o.Country) {
		return nil, false
	}
	return o.Country, true
}

// HasCountry returns a boolean if a field has been set.
func (o *FVCardDetails) HasCountry() bool {
	if o != nil && !IsNil(o.Country) {
		return true
	}

	return false
}

// SetCountry gets a reference to the given string and assigns it to the Country field.
func (o *FVCardDetails) SetCountry(v string) {
	o.Country = &v
}

// GetFingerprint returns the Fingerprint field value if set, zero value otherwise.
func (o *FVCardDetails) GetFingerprint() string {
	if o == nil || IsNil(o.Fingerprint) {
		var ret string
		return ret
	}
	return *o.Fingerprint
}

// GetFingerprintOk returns a tuple with the Fingerprint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FVCardDetails) GetFingerprintOk() (*string, bool) {
	if o == nil || IsNil(o.Fingerprint) {
		return nil, false
	}
	return o.Fingerprint, true
}

// HasFingerprint returns a boolean if a field has been set.
func (o *FVCardDetails) HasFingerprint() bool {
	if o != nil && !IsNil(o.Fingerprint) {
		return true
	}

	return false
}

// SetFingerprint gets a reference to the given string and assigns it to the Fingerprint field.
func (o *FVCardDetails) SetFingerprint(v string) {
	o.Fingerprint = &v
}

// GetFunding returns the Funding field value if set, zero value otherwise.
func (o *FVCardDetails) GetFunding() string {
	if o == nil || IsNil(o.Funding) {
		var ret string
		return ret
	}
	return *o.Funding
}

// GetFundingOk returns a tuple with the Funding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FVCardDetails) GetFundingOk() (*string, bool) {
	if o == nil || IsNil(o.Funding) {
		return nil, false
	}
	return o.Funding, true
}

// HasFunding returns a boolean if a field has been set.
func (o *FVCardDetails) HasFunding() bool {
	if o != nil && !IsNil(o.Funding) {
		return true
	}

	return false
}

// SetFunding gets a reference to the given string and assigns it to the Funding field.
func (o *FVCardDetails) SetFunding(v string) {
	o.Funding = &v
}

func (o FVCardDetails) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FVCardDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Brand) {
		toSerialize["brand"] = o.Brand
	}
	if !IsNil(o.Last4) {
		toSerialize["last4"] = o.Last4
	}
	if !IsNil(o.ExpiryMonth) {
		toSerialize["expiry_month"] = o.ExpiryMonth
	}
	if !IsNil(o.ExpiryYear) {
		toSerialize["expiry_year"] = o.ExpiryYear
	}
	if !IsNil(o.ProcessorEntityName) {
		toSerialize["processor_entity_name"] = o.ProcessorEntityName
	}
	if !IsNil(o.CollectionEntityName) {
		toSerialize["collection_entity_name"] = o.CollectionEntityName
	}
	if !IsNil(o.Country) {
		toSerialize["country"] = o.Country
	}
	if !IsNil(o.Fingerprint) {
		toSerialize["fingerprint"] = o.Fingerprint
	}
	if !IsNil(o.Funding) {
		toSerialize["funding"] = o.Funding
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *FVCardDetails) UnmarshalJSON(data []byte) (err error) {
	varFVCardDetails := _FVCardDetails{}

	err = json.Unmarshal(data, &varFVCardDetails)

	if err != nil {
		return err
	}

	*o = FVCardDetails(varFVCardDetails)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "brand")
		delete(additionalProperties, "last4")
		delete(additionalProperties, "expiry_month")
		delete(additionalProperties, "expiry_year")
		delete(additionalProperties, "processor_entity_name")
		delete(additionalProperties, "collection_entity_name")
		delete(additionalProperties, "country")
		delete(additionalProperties, "fingerprint")
		delete(additionalProperties, "funding")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableFVCardDetails struct {
	value *FVCardDetails
	isSet bool
}

func (v NullableFVCardDetails) Get() *FVCardDetails {
	return v.value
}

func (v *NullableFVCardDetails) Set(val *FVCardDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableFVCardDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableFVCardDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFVCardDetails(val *FVCardDetails) *NullableFVCardDetails {
	return &NullableFVCardDetails{value: val, isSet: true}
}

func (v NullableFVCardDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFVCardDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
