/*
Finverse Public

Documentation of the early finverse services

API version: 0.0.1
Contact: info@finverse.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package finverse

import (
	"encoding/json"
	"fmt"
)

// checks if the ListPayoutsResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListPayoutsResponse{}

// ListPayoutsResponse struct for ListPayoutsResponse
type ListPayoutsResponse struct {
	Payouts              []PayoutSnapshotResponse `json:"payouts"`
	TotalPayouts         int32                    `json:"total_payouts"`
	AdditionalProperties map[string]interface{}
}

type _ListPayoutsResponse ListPayoutsResponse

// NewListPayoutsResponse instantiates a new ListPayoutsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListPayoutsResponse(payouts []PayoutSnapshotResponse, totalPayouts int32) *ListPayoutsResponse {
	this := ListPayoutsResponse{}
	this.Payouts = payouts
	this.TotalPayouts = totalPayouts
	return &this
}

// NewListPayoutsResponseWithDefaults instantiates a new ListPayoutsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListPayoutsResponseWithDefaults() *ListPayoutsResponse {
	this := ListPayoutsResponse{}
	return &this
}

// GetPayouts returns the Payouts field value
func (o *ListPayoutsResponse) GetPayouts() []PayoutSnapshotResponse {
	if o == nil {
		var ret []PayoutSnapshotResponse
		return ret
	}

	return o.Payouts
}

// GetPayoutsOk returns a tuple with the Payouts field value
// and a boolean to check if the value has been set.
func (o *ListPayoutsResponse) GetPayoutsOk() ([]PayoutSnapshotResponse, bool) {
	if o == nil {
		return nil, false
	}
	return o.Payouts, true
}

// SetPayouts sets field value
func (o *ListPayoutsResponse) SetPayouts(v []PayoutSnapshotResponse) {
	o.Payouts = v
}

// GetTotalPayouts returns the TotalPayouts field value
func (o *ListPayoutsResponse) GetTotalPayouts() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TotalPayouts
}

// GetTotalPayoutsOk returns a tuple with the TotalPayouts field value
// and a boolean to check if the value has been set.
func (o *ListPayoutsResponse) GetTotalPayoutsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalPayouts, true
}

// SetTotalPayouts sets field value
func (o *ListPayoutsResponse) SetTotalPayouts(v int32) {
	o.TotalPayouts = v
}

func (o ListPayoutsResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListPayoutsResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["payouts"] = o.Payouts
	toSerialize["total_payouts"] = o.TotalPayouts

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ListPayoutsResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"payouts",
		"total_payouts",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varListPayoutsResponse := _ListPayoutsResponse{}

	err = json.Unmarshal(data, &varListPayoutsResponse)

	if err != nil {
		return err
	}

	*o = ListPayoutsResponse(varListPayoutsResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "payouts")
		delete(additionalProperties, "total_payouts")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableListPayoutsResponse struct {
	value *ListPayoutsResponse
	isSet bool
}

func (v NullableListPayoutsResponse) Get() *ListPayoutsResponse {
	return v.value
}

func (v *NullableListPayoutsResponse) Set(val *ListPayoutsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListPayoutsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListPayoutsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListPayoutsResponse(val *ListPayoutsResponse) *NullableListPayoutsResponse {
	return &NullableListPayoutsResponse{value: val, isSet: true}
}

func (v NullableListPayoutsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListPayoutsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
