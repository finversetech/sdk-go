/*
Finverse Public

Documentation of the early finverse services

API version: 0.0.1
Contact: info@finverse.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package finverse

import (
	"encoding/json"
	"time"
)

// checks if the PayoutSnapshotDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PayoutSnapshotDetails{}

// PayoutSnapshotDetails struct for PayoutSnapshotDetails
type PayoutSnapshotDetails struct {
	Description            *string                 `json:"description,omitempty"`
	TransactionReferenceId *string                 `json:"transaction_reference_id,omitempty"`
	MandateId              *string                 `json:"mandate_id,omitempty"`
	ScheduledDate          *time.Time              `json:"scheduled_date,omitempty"`
	EstimatedArrivalTime   NullableTime            `json:"estimated_arrival_time,omitempty"`
	ProcessorDetails       *PayoutProcessorDetails `json:"processor_details,omitempty"`
	References             *PayoutReferences       `json:"references,omitempty"`
	AdditionalProperties   map[string]interface{}
}

type _PayoutSnapshotDetails PayoutSnapshotDetails

// NewPayoutSnapshotDetails instantiates a new PayoutSnapshotDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPayoutSnapshotDetails() *PayoutSnapshotDetails {
	this := PayoutSnapshotDetails{}
	return &this
}

// NewPayoutSnapshotDetailsWithDefaults instantiates a new PayoutSnapshotDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPayoutSnapshotDetailsWithDefaults() *PayoutSnapshotDetails {
	this := PayoutSnapshotDetails{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *PayoutSnapshotDetails) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PayoutSnapshotDetails) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *PayoutSnapshotDetails) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *PayoutSnapshotDetails) SetDescription(v string) {
	o.Description = &v
}

// GetTransactionReferenceId returns the TransactionReferenceId field value if set, zero value otherwise.
func (o *PayoutSnapshotDetails) GetTransactionReferenceId() string {
	if o == nil || IsNil(o.TransactionReferenceId) {
		var ret string
		return ret
	}
	return *o.TransactionReferenceId
}

// GetTransactionReferenceIdOk returns a tuple with the TransactionReferenceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PayoutSnapshotDetails) GetTransactionReferenceIdOk() (*string, bool) {
	if o == nil || IsNil(o.TransactionReferenceId) {
		return nil, false
	}
	return o.TransactionReferenceId, true
}

// HasTransactionReferenceId returns a boolean if a field has been set.
func (o *PayoutSnapshotDetails) HasTransactionReferenceId() bool {
	if o != nil && !IsNil(o.TransactionReferenceId) {
		return true
	}

	return false
}

// SetTransactionReferenceId gets a reference to the given string and assigns it to the TransactionReferenceId field.
func (o *PayoutSnapshotDetails) SetTransactionReferenceId(v string) {
	o.TransactionReferenceId = &v
}

// GetMandateId returns the MandateId field value if set, zero value otherwise.
func (o *PayoutSnapshotDetails) GetMandateId() string {
	if o == nil || IsNil(o.MandateId) {
		var ret string
		return ret
	}
	return *o.MandateId
}

// GetMandateIdOk returns a tuple with the MandateId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PayoutSnapshotDetails) GetMandateIdOk() (*string, bool) {
	if o == nil || IsNil(o.MandateId) {
		return nil, false
	}
	return o.MandateId, true
}

// HasMandateId returns a boolean if a field has been set.
func (o *PayoutSnapshotDetails) HasMandateId() bool {
	if o != nil && !IsNil(o.MandateId) {
		return true
	}

	return false
}

// SetMandateId gets a reference to the given string and assigns it to the MandateId field.
func (o *PayoutSnapshotDetails) SetMandateId(v string) {
	o.MandateId = &v
}

// GetScheduledDate returns the ScheduledDate field value if set, zero value otherwise.
func (o *PayoutSnapshotDetails) GetScheduledDate() time.Time {
	if o == nil || IsNil(o.ScheduledDate) {
		var ret time.Time
		return ret
	}
	return *o.ScheduledDate
}

// GetScheduledDateOk returns a tuple with the ScheduledDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PayoutSnapshotDetails) GetScheduledDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ScheduledDate) {
		return nil, false
	}
	return o.ScheduledDate, true
}

// HasScheduledDate returns a boolean if a field has been set.
func (o *PayoutSnapshotDetails) HasScheduledDate() bool {
	if o != nil && !IsNil(o.ScheduledDate) {
		return true
	}

	return false
}

// SetScheduledDate gets a reference to the given time.Time and assigns it to the ScheduledDate field.
func (o *PayoutSnapshotDetails) SetScheduledDate(v time.Time) {
	o.ScheduledDate = &v
}

// GetEstimatedArrivalTime returns the EstimatedArrivalTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PayoutSnapshotDetails) GetEstimatedArrivalTime() time.Time {
	if o == nil || IsNil(o.EstimatedArrivalTime.Get()) {
		var ret time.Time
		return ret
	}
	return *o.EstimatedArrivalTime.Get()
}

// GetEstimatedArrivalTimeOk returns a tuple with the EstimatedArrivalTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PayoutSnapshotDetails) GetEstimatedArrivalTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.EstimatedArrivalTime.Get(), o.EstimatedArrivalTime.IsSet()
}

// HasEstimatedArrivalTime returns a boolean if a field has been set.
func (o *PayoutSnapshotDetails) HasEstimatedArrivalTime() bool {
	if o != nil && o.EstimatedArrivalTime.IsSet() {
		return true
	}

	return false
}

// SetEstimatedArrivalTime gets a reference to the given NullableTime and assigns it to the EstimatedArrivalTime field.
func (o *PayoutSnapshotDetails) SetEstimatedArrivalTime(v time.Time) {
	o.EstimatedArrivalTime.Set(&v)
}

// SetEstimatedArrivalTimeNil sets the value for EstimatedArrivalTime to be an explicit nil
func (o *PayoutSnapshotDetails) SetEstimatedArrivalTimeNil() {
	o.EstimatedArrivalTime.Set(nil)
}

// UnsetEstimatedArrivalTime ensures that no value is present for EstimatedArrivalTime, not even an explicit nil
func (o *PayoutSnapshotDetails) UnsetEstimatedArrivalTime() {
	o.EstimatedArrivalTime.Unset()
}

// GetProcessorDetails returns the ProcessorDetails field value if set, zero value otherwise.
func (o *PayoutSnapshotDetails) GetProcessorDetails() PayoutProcessorDetails {
	if o == nil || IsNil(o.ProcessorDetails) {
		var ret PayoutProcessorDetails
		return ret
	}
	return *o.ProcessorDetails
}

// GetProcessorDetailsOk returns a tuple with the ProcessorDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PayoutSnapshotDetails) GetProcessorDetailsOk() (*PayoutProcessorDetails, bool) {
	if o == nil || IsNil(o.ProcessorDetails) {
		return nil, false
	}
	return o.ProcessorDetails, true
}

// HasProcessorDetails returns a boolean if a field has been set.
func (o *PayoutSnapshotDetails) HasProcessorDetails() bool {
	if o != nil && !IsNil(o.ProcessorDetails) {
		return true
	}

	return false
}

// SetProcessorDetails gets a reference to the given PayoutProcessorDetails and assigns it to the ProcessorDetails field.
func (o *PayoutSnapshotDetails) SetProcessorDetails(v PayoutProcessorDetails) {
	o.ProcessorDetails = &v
}

// GetReferences returns the References field value if set, zero value otherwise.
func (o *PayoutSnapshotDetails) GetReferences() PayoutReferences {
	if o == nil || IsNil(o.References) {
		var ret PayoutReferences
		return ret
	}
	return *o.References
}

// GetReferencesOk returns a tuple with the References field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PayoutSnapshotDetails) GetReferencesOk() (*PayoutReferences, bool) {
	if o == nil || IsNil(o.References) {
		return nil, false
	}
	return o.References, true
}

// HasReferences returns a boolean if a field has been set.
func (o *PayoutSnapshotDetails) HasReferences() bool {
	if o != nil && !IsNil(o.References) {
		return true
	}

	return false
}

// SetReferences gets a reference to the given PayoutReferences and assigns it to the References field.
func (o *PayoutSnapshotDetails) SetReferences(v PayoutReferences) {
	o.References = &v
}

func (o PayoutSnapshotDetails) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PayoutSnapshotDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.TransactionReferenceId) {
		toSerialize["transaction_reference_id"] = o.TransactionReferenceId
	}
	if !IsNil(o.MandateId) {
		toSerialize["mandate_id"] = o.MandateId
	}
	if !IsNil(o.ScheduledDate) {
		toSerialize["scheduled_date"] = o.ScheduledDate
	}
	if o.EstimatedArrivalTime.IsSet() {
		toSerialize["estimated_arrival_time"] = o.EstimatedArrivalTime.Get()
	}
	if !IsNil(o.ProcessorDetails) {
		toSerialize["processor_details"] = o.ProcessorDetails
	}
	if !IsNil(o.References) {
		toSerialize["references"] = o.References
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PayoutSnapshotDetails) UnmarshalJSON(data []byte) (err error) {
	varPayoutSnapshotDetails := _PayoutSnapshotDetails{}

	err = json.Unmarshal(data, &varPayoutSnapshotDetails)

	if err != nil {
		return err
	}

	*o = PayoutSnapshotDetails(varPayoutSnapshotDetails)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "description")
		delete(additionalProperties, "transaction_reference_id")
		delete(additionalProperties, "mandate_id")
		delete(additionalProperties, "scheduled_date")
		delete(additionalProperties, "estimated_arrival_time")
		delete(additionalProperties, "processor_details")
		delete(additionalProperties, "references")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePayoutSnapshotDetails struct {
	value *PayoutSnapshotDetails
	isSet bool
}

func (v NullablePayoutSnapshotDetails) Get() *PayoutSnapshotDetails {
	return v.value
}

func (v *NullablePayoutSnapshotDetails) Set(val *PayoutSnapshotDetails) {
	v.value = val
	v.isSet = true
}

func (v NullablePayoutSnapshotDetails) IsSet() bool {
	return v.isSet
}

func (v *NullablePayoutSnapshotDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePayoutSnapshotDetails(val *PayoutSnapshotDetails) *NullablePayoutSnapshotDetails {
	return &NullablePayoutSnapshotDetails{value: val, isSet: true}
}

func (v NullablePayoutSnapshotDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePayoutSnapshotDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
