/*
Finverse Public

Documentation of the early finverse services

API version: 0.0.1
Contact: info@finverse.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package finverse

import (
	"encoding/json"
)

// CreateMandateSender struct for CreateMandateSender
type CreateMandateSender struct {
	Name *string `json:"name,omitempty"`
	// Customer App's user ID, representing the end-user making the payment.
	ExternalUserId *string `json:"external_user_id,omitempty"`
	// Type of account held by the Sender at the Institution. Possible values are INDIVIDUAL, BUSINESS
	UserType *string `json:"user_type,omitempty"`
	// Sender details which will be used for fraud checking.
	UserDetails []SenderDetail `json:"user_details,omitempty"`
}

// NewCreateMandateSender instantiates a new CreateMandateSender object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateMandateSender() *CreateMandateSender {
	this := CreateMandateSender{}
	return &this
}

// NewCreateMandateSenderWithDefaults instantiates a new CreateMandateSender object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateMandateSenderWithDefaults() *CreateMandateSender {
	this := CreateMandateSender{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *CreateMandateSender) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateMandateSender) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *CreateMandateSender) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *CreateMandateSender) SetName(v string) {
	o.Name = &v
}

// GetExternalUserId returns the ExternalUserId field value if set, zero value otherwise.
func (o *CreateMandateSender) GetExternalUserId() string {
	if o == nil || o.ExternalUserId == nil {
		var ret string
		return ret
	}
	return *o.ExternalUserId
}

// GetExternalUserIdOk returns a tuple with the ExternalUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateMandateSender) GetExternalUserIdOk() (*string, bool) {
	if o == nil || o.ExternalUserId == nil {
		return nil, false
	}
	return o.ExternalUserId, true
}

// HasExternalUserId returns a boolean if a field has been set.
func (o *CreateMandateSender) HasExternalUserId() bool {
	if o != nil && o.ExternalUserId != nil {
		return true
	}

	return false
}

// SetExternalUserId gets a reference to the given string and assigns it to the ExternalUserId field.
func (o *CreateMandateSender) SetExternalUserId(v string) {
	o.ExternalUserId = &v
}

// GetUserType returns the UserType field value if set, zero value otherwise.
func (o *CreateMandateSender) GetUserType() string {
	if o == nil || o.UserType == nil {
		var ret string
		return ret
	}
	return *o.UserType
}

// GetUserTypeOk returns a tuple with the UserType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateMandateSender) GetUserTypeOk() (*string, bool) {
	if o == nil || o.UserType == nil {
		return nil, false
	}
	return o.UserType, true
}

// HasUserType returns a boolean if a field has been set.
func (o *CreateMandateSender) HasUserType() bool {
	if o != nil && o.UserType != nil {
		return true
	}

	return false
}

// SetUserType gets a reference to the given string and assigns it to the UserType field.
func (o *CreateMandateSender) SetUserType(v string) {
	o.UserType = &v
}

// GetUserDetails returns the UserDetails field value if set, zero value otherwise.
func (o *CreateMandateSender) GetUserDetails() []SenderDetail {
	if o == nil || o.UserDetails == nil {
		var ret []SenderDetail
		return ret
	}
	return o.UserDetails
}

// GetUserDetailsOk returns a tuple with the UserDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateMandateSender) GetUserDetailsOk() ([]SenderDetail, bool) {
	if o == nil || o.UserDetails == nil {
		return nil, false
	}
	return o.UserDetails, true
}

// HasUserDetails returns a boolean if a field has been set.
func (o *CreateMandateSender) HasUserDetails() bool {
	if o != nil && o.UserDetails != nil {
		return true
	}

	return false
}

// SetUserDetails gets a reference to the given []SenderDetail and assigns it to the UserDetails field.
func (o *CreateMandateSender) SetUserDetails(v []SenderDetail) {
	o.UserDetails = v
}

func (o CreateMandateSender) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.ExternalUserId != nil {
		toSerialize["external_user_id"] = o.ExternalUserId
	}
	if o.UserType != nil {
		toSerialize["user_type"] = o.UserType
	}
	if o.UserDetails != nil {
		toSerialize["user_details"] = o.UserDetails
	}
	return json.Marshal(toSerialize)
}

type NullableCreateMandateSender struct {
	value *CreateMandateSender
	isSet bool
}

func (v NullableCreateMandateSender) Get() *CreateMandateSender {
	return v.value
}

func (v *NullableCreateMandateSender) Set(val *CreateMandateSender) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateMandateSender) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateMandateSender) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateMandateSender(val *CreateMandateSender) *NullableCreateMandateSender {
	return &NullableCreateMandateSender{value: val, isSet: true}
}

func (v NullableCreateMandateSender) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateMandateSender) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
