/*
Finverse Public

Documentation of the early finverse services

API version: 0.0.1
Contact: info@finverse.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package finverse

import (
	"encoding/json"
)

// CreateMandateSender struct for CreateMandateSender
type CreateMandateSender struct {
	Name *string `json:"name,omitempty"`
	// Customer App's user ID, representing the end-user making the payment.
	UserId *string `json:"user_id,omitempty"`
	// Type of account held by the Sender at the Institution. Possible values are INDIVIDUAL, BUSINESS
	SenderType *string `json:"sender_type,omitempty"`
	// Sender details which will be used for fraud checking.
	SenderDetails []SenderDetail `json:"sender_details,omitempty"`
}

// NewCreateMandateSender instantiates a new CreateMandateSender object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateMandateSender() *CreateMandateSender {
	this := CreateMandateSender{}
	return &this
}

// NewCreateMandateSenderWithDefaults instantiates a new CreateMandateSender object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateMandateSenderWithDefaults() *CreateMandateSender {
	this := CreateMandateSender{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *CreateMandateSender) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateMandateSender) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *CreateMandateSender) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *CreateMandateSender) SetName(v string) {
	o.Name = &v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *CreateMandateSender) GetUserId() string {
	if o == nil || o.UserId == nil {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateMandateSender) GetUserIdOk() (*string, bool) {
	if o == nil || o.UserId == nil {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *CreateMandateSender) HasUserId() bool {
	if o != nil && o.UserId != nil {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *CreateMandateSender) SetUserId(v string) {
	o.UserId = &v
}

// GetSenderType returns the SenderType field value if set, zero value otherwise.
func (o *CreateMandateSender) GetSenderType() string {
	if o == nil || o.SenderType == nil {
		var ret string
		return ret
	}
	return *o.SenderType
}

// GetSenderTypeOk returns a tuple with the SenderType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateMandateSender) GetSenderTypeOk() (*string, bool) {
	if o == nil || o.SenderType == nil {
		return nil, false
	}
	return o.SenderType, true
}

// HasSenderType returns a boolean if a field has been set.
func (o *CreateMandateSender) HasSenderType() bool {
	if o != nil && o.SenderType != nil {
		return true
	}

	return false
}

// SetSenderType gets a reference to the given string and assigns it to the SenderType field.
func (o *CreateMandateSender) SetSenderType(v string) {
	o.SenderType = &v
}

// GetSenderDetails returns the SenderDetails field value if set, zero value otherwise.
func (o *CreateMandateSender) GetSenderDetails() []SenderDetail {
	if o == nil || o.SenderDetails == nil {
		var ret []SenderDetail
		return ret
	}
	return o.SenderDetails
}

// GetSenderDetailsOk returns a tuple with the SenderDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateMandateSender) GetSenderDetailsOk() ([]SenderDetail, bool) {
	if o == nil || o.SenderDetails == nil {
		return nil, false
	}
	return o.SenderDetails, true
}

// HasSenderDetails returns a boolean if a field has been set.
func (o *CreateMandateSender) HasSenderDetails() bool {
	if o != nil && o.SenderDetails != nil {
		return true
	}

	return false
}

// SetSenderDetails gets a reference to the given []SenderDetail and assigns it to the SenderDetails field.
func (o *CreateMandateSender) SetSenderDetails(v []SenderDetail) {
	o.SenderDetails = v
}

func (o CreateMandateSender) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.UserId != nil {
		toSerialize["user_id"] = o.UserId
	}
	if o.SenderType != nil {
		toSerialize["sender_type"] = o.SenderType
	}
	if o.SenderDetails != nil {
		toSerialize["sender_details"] = o.SenderDetails
	}
	return json.Marshal(toSerialize)
}

type NullableCreateMandateSender struct {
	value *CreateMandateSender
	isSet bool
}

func (v NullableCreateMandateSender) Get() *CreateMandateSender {
	return v.value
}

func (v *NullableCreateMandateSender) Set(val *CreateMandateSender) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateMandateSender) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateMandateSender) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateMandateSender(val *CreateMandateSender) *NullableCreateMandateSender {
	return &NullableCreateMandateSender{value: val, isSet: true}
}

func (v NullableCreateMandateSender) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateMandateSender) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
