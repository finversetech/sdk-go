/*
Finverse Public

Documentation of the early finverse services

API version: 0.0.1
Contact: info@finverse.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package finverse

import (
	"encoding/json"
	"fmt"
	"time"
)

// checks if the AccessTokenResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AccessTokenResponse{}

// AccessTokenResponse struct for AccessTokenResponse
type AccessTokenResponse struct {
	AccessToken     string `json:"access_token"`
	LoginIdentityId string `json:"login_identity_id"`
	TokenType       string `json:"token_type"`
	// seconds
	ExpiresIn            float32   `json:"expires_in"`
	RefreshToken         string    `json:"refresh_token"`
	IssuedAt             time.Time `json:"issued_at"`
	AdditionalProperties map[string]interface{}
}

type _AccessTokenResponse AccessTokenResponse

// NewAccessTokenResponse instantiates a new AccessTokenResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccessTokenResponse(accessToken string, loginIdentityId string, tokenType string, expiresIn float32, refreshToken string, issuedAt time.Time) *AccessTokenResponse {
	this := AccessTokenResponse{}
	this.AccessToken = accessToken
	this.LoginIdentityId = loginIdentityId
	this.TokenType = tokenType
	this.ExpiresIn = expiresIn
	this.RefreshToken = refreshToken
	this.IssuedAt = issuedAt
	return &this
}

// NewAccessTokenResponseWithDefaults instantiates a new AccessTokenResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccessTokenResponseWithDefaults() *AccessTokenResponse {
	this := AccessTokenResponse{}
	return &this
}

// GetAccessToken returns the AccessToken field value
func (o *AccessTokenResponse) GetAccessToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccessToken
}

// GetAccessTokenOk returns a tuple with the AccessToken field value
// and a boolean to check if the value has been set.
func (o *AccessTokenResponse) GetAccessTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccessToken, true
}

// SetAccessToken sets field value
func (o *AccessTokenResponse) SetAccessToken(v string) {
	o.AccessToken = v
}

// GetLoginIdentityId returns the LoginIdentityId field value
func (o *AccessTokenResponse) GetLoginIdentityId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LoginIdentityId
}

// GetLoginIdentityIdOk returns a tuple with the LoginIdentityId field value
// and a boolean to check if the value has been set.
func (o *AccessTokenResponse) GetLoginIdentityIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LoginIdentityId, true
}

// SetLoginIdentityId sets field value
func (o *AccessTokenResponse) SetLoginIdentityId(v string) {
	o.LoginIdentityId = v
}

// GetTokenType returns the TokenType field value
func (o *AccessTokenResponse) GetTokenType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TokenType
}

// GetTokenTypeOk returns a tuple with the TokenType field value
// and a boolean to check if the value has been set.
func (o *AccessTokenResponse) GetTokenTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TokenType, true
}

// SetTokenType sets field value
func (o *AccessTokenResponse) SetTokenType(v string) {
	o.TokenType = v
}

// GetExpiresIn returns the ExpiresIn field value
func (o *AccessTokenResponse) GetExpiresIn() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.ExpiresIn
}

// GetExpiresInOk returns a tuple with the ExpiresIn field value
// and a boolean to check if the value has been set.
func (o *AccessTokenResponse) GetExpiresInOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExpiresIn, true
}

// SetExpiresIn sets field value
func (o *AccessTokenResponse) SetExpiresIn(v float32) {
	o.ExpiresIn = v
}

// GetRefreshToken returns the RefreshToken field value
func (o *AccessTokenResponse) GetRefreshToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RefreshToken
}

// GetRefreshTokenOk returns a tuple with the RefreshToken field value
// and a boolean to check if the value has been set.
func (o *AccessTokenResponse) GetRefreshTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RefreshToken, true
}

// SetRefreshToken sets field value
func (o *AccessTokenResponse) SetRefreshToken(v string) {
	o.RefreshToken = v
}

// GetIssuedAt returns the IssuedAt field value
func (o *AccessTokenResponse) GetIssuedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.IssuedAt
}

// GetIssuedAtOk returns a tuple with the IssuedAt field value
// and a boolean to check if the value has been set.
func (o *AccessTokenResponse) GetIssuedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IssuedAt, true
}

// SetIssuedAt sets field value
func (o *AccessTokenResponse) SetIssuedAt(v time.Time) {
	o.IssuedAt = v
}

func (o AccessTokenResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AccessTokenResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["access_token"] = o.AccessToken
	toSerialize["login_identity_id"] = o.LoginIdentityId
	toSerialize["token_type"] = o.TokenType
	toSerialize["expires_in"] = o.ExpiresIn
	toSerialize["refresh_token"] = o.RefreshToken
	toSerialize["issued_at"] = o.IssuedAt

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AccessTokenResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"access_token",
		"login_identity_id",
		"token_type",
		"expires_in",
		"refresh_token",
		"issued_at",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAccessTokenResponse := _AccessTokenResponse{}

	err = json.Unmarshal(data, &varAccessTokenResponse)

	if err != nil {
		return err
	}

	*o = AccessTokenResponse(varAccessTokenResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "access_token")
		delete(additionalProperties, "login_identity_id")
		delete(additionalProperties, "token_type")
		delete(additionalProperties, "expires_in")
		delete(additionalProperties, "refresh_token")
		delete(additionalProperties, "issued_at")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAccessTokenResponse struct {
	value *AccessTokenResponse
	isSet bool
}

func (v NullableAccessTokenResponse) Get() *AccessTokenResponse {
	return v.value
}

func (v *NullableAccessTokenResponse) Set(val *AccessTokenResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableAccessTokenResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableAccessTokenResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccessTokenResponse(val *AccessTokenResponse) *NullableAccessTokenResponse {
	return &NullableAccessTokenResponse{value: val, isSet: true}
}

func (v NullableAccessTokenResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccessTokenResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
