/*
Finverse Public

Documentation of the early finverse services

API version: 0.0.1
Contact: info@finverse.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package finverse

import (
	"encoding/json"
)

// EncryptedPayload struct for EncryptedPayload
type EncryptedPayload struct {
	// The credential payload encrypted with AES (base64)
	Ciphertext string `json:"ciphertext"`
	// The 16 byte IV used w/ AES (base64)
	InitializationVector string `json:"initializationVector"`
	// The MAC to verify AES decryption validity
	MessageAuthenticationCode string `json:"messageAuthenticationCode"`
	// The AES key encrypted with an RSA pubkey (base64)
	EnvelopeEncryptionKey string `json:"envelopeEncryptionKey"`
	// The identifier of the public key used to encrypt the AES key
	KeyId string `json:"keyId"`
}

// NewEncryptedPayload instantiates a new EncryptedPayload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEncryptedPayload(ciphertext string, initializationVector string, messageAuthenticationCode string, envelopeEncryptionKey string, keyId string) *EncryptedPayload {
	this := EncryptedPayload{}
	this.Ciphertext = ciphertext
	this.InitializationVector = initializationVector
	this.MessageAuthenticationCode = messageAuthenticationCode
	this.EnvelopeEncryptionKey = envelopeEncryptionKey
	this.KeyId = keyId
	return &this
}

// NewEncryptedPayloadWithDefaults instantiates a new EncryptedPayload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEncryptedPayloadWithDefaults() *EncryptedPayload {
	this := EncryptedPayload{}
	return &this
}

// GetCiphertext returns the Ciphertext field value
func (o *EncryptedPayload) GetCiphertext() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Ciphertext
}

// GetCiphertextOk returns a tuple with the Ciphertext field value
// and a boolean to check if the value has been set.
func (o *EncryptedPayload) GetCiphertextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ciphertext, true
}

// SetCiphertext sets field value
func (o *EncryptedPayload) SetCiphertext(v string) {
	o.Ciphertext = v
}

// GetInitializationVector returns the InitializationVector field value
func (o *EncryptedPayload) GetInitializationVector() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.InitializationVector
}

// GetInitializationVectorOk returns a tuple with the InitializationVector field value
// and a boolean to check if the value has been set.
func (o *EncryptedPayload) GetInitializationVectorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InitializationVector, true
}

// SetInitializationVector sets field value
func (o *EncryptedPayload) SetInitializationVector(v string) {
	o.InitializationVector = v
}

// GetMessageAuthenticationCode returns the MessageAuthenticationCode field value
func (o *EncryptedPayload) GetMessageAuthenticationCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MessageAuthenticationCode
}

// GetMessageAuthenticationCodeOk returns a tuple with the MessageAuthenticationCode field value
// and a boolean to check if the value has been set.
func (o *EncryptedPayload) GetMessageAuthenticationCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MessageAuthenticationCode, true
}

// SetMessageAuthenticationCode sets field value
func (o *EncryptedPayload) SetMessageAuthenticationCode(v string) {
	o.MessageAuthenticationCode = v
}

// GetEnvelopeEncryptionKey returns the EnvelopeEncryptionKey field value
func (o *EncryptedPayload) GetEnvelopeEncryptionKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EnvelopeEncryptionKey
}

// GetEnvelopeEncryptionKeyOk returns a tuple with the EnvelopeEncryptionKey field value
// and a boolean to check if the value has been set.
func (o *EncryptedPayload) GetEnvelopeEncryptionKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EnvelopeEncryptionKey, true
}

// SetEnvelopeEncryptionKey sets field value
func (o *EncryptedPayload) SetEnvelopeEncryptionKey(v string) {
	o.EnvelopeEncryptionKey = v
}

// GetKeyId returns the KeyId field value
func (o *EncryptedPayload) GetKeyId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.KeyId
}

// GetKeyIdOk returns a tuple with the KeyId field value
// and a boolean to check if the value has been set.
func (o *EncryptedPayload) GetKeyIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.KeyId, true
}

// SetKeyId sets field value
func (o *EncryptedPayload) SetKeyId(v string) {
	o.KeyId = v
}

func (o EncryptedPayload) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["ciphertext"] = o.Ciphertext
	}
	if true {
		toSerialize["initializationVector"] = o.InitializationVector
	}
	if true {
		toSerialize["messageAuthenticationCode"] = o.MessageAuthenticationCode
	}
	if true {
		toSerialize["envelopeEncryptionKey"] = o.EnvelopeEncryptionKey
	}
	if true {
		toSerialize["keyId"] = o.KeyId
	}
	return json.Marshal(toSerialize)
}

type NullableEncryptedPayload struct {
	value *EncryptedPayload
	isSet bool
}

func (v NullableEncryptedPayload) Get() *EncryptedPayload {
	return v.value
}

func (v *NullableEncryptedPayload) Set(val *EncryptedPayload) {
	v.value = val
	v.isSet = true
}

func (v NullableEncryptedPayload) IsSet() bool {
	return v.isSet
}

func (v *NullableEncryptedPayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEncryptedPayload(val *EncryptedPayload) *NullableEncryptedPayload {
	return &NullableEncryptedPayload{value: val, isSet: true}
}

func (v NullableEncryptedPayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEncryptedPayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
