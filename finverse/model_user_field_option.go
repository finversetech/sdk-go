/*
Finverse Public

Documentation of the early finverse services

API version: 0.0.1
Contact: info@finverse.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package finverse

import (
	"encoding/json"
)

// UserFieldOption struct for UserFieldOption
type UserFieldOption struct {
	// The value displayed in the select element.
	Label string `json:"label"`
	// The value that will be submitted if this option was selected.
	Value string `json:"value"`
}

// NewUserFieldOption instantiates a new UserFieldOption object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserFieldOption(label string, value string) *UserFieldOption {
	this := UserFieldOption{}
	this.Label = label
	this.Value = value
	return &this
}

// NewUserFieldOptionWithDefaults instantiates a new UserFieldOption object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserFieldOptionWithDefaults() *UserFieldOption {
	this := UserFieldOption{}
	return &this
}

// GetLabel returns the Label field value
func (o *UserFieldOption) GetLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Label
}

// GetLabelOk returns a tuple with the Label field value
// and a boolean to check if the value has been set.
func (o *UserFieldOption) GetLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Label, true
}

// SetLabel sets field value
func (o *UserFieldOption) SetLabel(v string) {
	o.Label = v
}

// GetValue returns the Value field value
func (o *UserFieldOption) GetValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *UserFieldOption) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *UserFieldOption) SetValue(v string) {
	o.Value = v
}

func (o UserFieldOption) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["label"] = o.Label
	}
	if true {
		toSerialize["value"] = o.Value
	}
	return json.Marshal(toSerialize)
}

type NullableUserFieldOption struct {
	value *UserFieldOption
	isSet bool
}

func (v NullableUserFieldOption) Get() *UserFieldOption {
	return v.value
}

func (v *NullableUserFieldOption) Set(val *UserFieldOption) {
	v.value = val
	v.isSet = true
}

func (v NullableUserFieldOption) IsSet() bool {
	return v.isSet
}

func (v *NullableUserFieldOption) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserFieldOption(val *UserFieldOption) *NullableUserFieldOption {
	return &NullableUserFieldOption{value: val, isSet: true}
}

func (v NullableUserFieldOption) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserFieldOption) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
