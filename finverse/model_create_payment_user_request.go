/*
Finverse Public

Documentation of the early finverse services

API version: 0.0.1
Contact: info@finverse.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package finverse

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the CreatePaymentUserRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreatePaymentUserRequest{}

// CreatePaymentUserRequest struct for CreatePaymentUserRequest
type CreatePaymentUserRequest struct {
	Name                string                      `json:"name"`
	ExternalUserId      string                      `json:"external_user_id"`
	UserType            *string                     `json:"user_type,omitempty"`
	Email               *string                     `json:"email,omitempty"`
	UserDetails         []SenderDetail              `json:"user_details,omitempty"`
	Metadata            *map[string]string          `json:"metadata,omitempty"`
	AutopayConsent      *bool                       `json:"autopay_consent,omitempty"`
	IntegrationMetadata *IntegrationMetadataRequest `json:"integration_metadata,omitempty"`
}

type _CreatePaymentUserRequest CreatePaymentUserRequest

// NewCreatePaymentUserRequest instantiates a new CreatePaymentUserRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreatePaymentUserRequest(name string, externalUserId string) *CreatePaymentUserRequest {
	this := CreatePaymentUserRequest{}
	this.Name = name
	this.ExternalUserId = externalUserId
	return &this
}

// NewCreatePaymentUserRequestWithDefaults instantiates a new CreatePaymentUserRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreatePaymentUserRequestWithDefaults() *CreatePaymentUserRequest {
	this := CreatePaymentUserRequest{}
	return &this
}

// GetName returns the Name field value
func (o *CreatePaymentUserRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CreatePaymentUserRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CreatePaymentUserRequest) SetName(v string) {
	o.Name = v
}

// GetExternalUserId returns the ExternalUserId field value
func (o *CreatePaymentUserRequest) GetExternalUserId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ExternalUserId
}

// GetExternalUserIdOk returns a tuple with the ExternalUserId field value
// and a boolean to check if the value has been set.
func (o *CreatePaymentUserRequest) GetExternalUserIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExternalUserId, true
}

// SetExternalUserId sets field value
func (o *CreatePaymentUserRequest) SetExternalUserId(v string) {
	o.ExternalUserId = v
}

// GetUserType returns the UserType field value if set, zero value otherwise.
func (o *CreatePaymentUserRequest) GetUserType() string {
	if o == nil || IsNil(o.UserType) {
		var ret string
		return ret
	}
	return *o.UserType
}

// GetUserTypeOk returns a tuple with the UserType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreatePaymentUserRequest) GetUserTypeOk() (*string, bool) {
	if o == nil || IsNil(o.UserType) {
		return nil, false
	}
	return o.UserType, true
}

// HasUserType returns a boolean if a field has been set.
func (o *CreatePaymentUserRequest) HasUserType() bool {
	if o != nil && !IsNil(o.UserType) {
		return true
	}

	return false
}

// SetUserType gets a reference to the given string and assigns it to the UserType field.
func (o *CreatePaymentUserRequest) SetUserType(v string) {
	o.UserType = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *CreatePaymentUserRequest) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreatePaymentUserRequest) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *CreatePaymentUserRequest) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *CreatePaymentUserRequest) SetEmail(v string) {
	o.Email = &v
}

// GetUserDetails returns the UserDetails field value if set, zero value otherwise.
func (o *CreatePaymentUserRequest) GetUserDetails() []SenderDetail {
	if o == nil || IsNil(o.UserDetails) {
		var ret []SenderDetail
		return ret
	}
	return o.UserDetails
}

// GetUserDetailsOk returns a tuple with the UserDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreatePaymentUserRequest) GetUserDetailsOk() ([]SenderDetail, bool) {
	if o == nil || IsNil(o.UserDetails) {
		return nil, false
	}
	return o.UserDetails, true
}

// HasUserDetails returns a boolean if a field has been set.
func (o *CreatePaymentUserRequest) HasUserDetails() bool {
	if o != nil && !IsNil(o.UserDetails) {
		return true
	}

	return false
}

// SetUserDetails gets a reference to the given []SenderDetail and assigns it to the UserDetails field.
func (o *CreatePaymentUserRequest) SetUserDetails(v []SenderDetail) {
	o.UserDetails = v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *CreatePaymentUserRequest) GetMetadata() map[string]string {
	if o == nil || IsNil(o.Metadata) {
		var ret map[string]string
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreatePaymentUserRequest) GetMetadataOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *CreatePaymentUserRequest) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]string and assigns it to the Metadata field.
func (o *CreatePaymentUserRequest) SetMetadata(v map[string]string) {
	o.Metadata = &v
}

// GetAutopayConsent returns the AutopayConsent field value if set, zero value otherwise.
func (o *CreatePaymentUserRequest) GetAutopayConsent() bool {
	if o == nil || IsNil(o.AutopayConsent) {
		var ret bool
		return ret
	}
	return *o.AutopayConsent
}

// GetAutopayConsentOk returns a tuple with the AutopayConsent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreatePaymentUserRequest) GetAutopayConsentOk() (*bool, bool) {
	if o == nil || IsNil(o.AutopayConsent) {
		return nil, false
	}
	return o.AutopayConsent, true
}

// HasAutopayConsent returns a boolean if a field has been set.
func (o *CreatePaymentUserRequest) HasAutopayConsent() bool {
	if o != nil && !IsNil(o.AutopayConsent) {
		return true
	}

	return false
}

// SetAutopayConsent gets a reference to the given bool and assigns it to the AutopayConsent field.
func (o *CreatePaymentUserRequest) SetAutopayConsent(v bool) {
	o.AutopayConsent = &v
}

// GetIntegrationMetadata returns the IntegrationMetadata field value if set, zero value otherwise.
func (o *CreatePaymentUserRequest) GetIntegrationMetadata() IntegrationMetadataRequest {
	if o == nil || IsNil(o.IntegrationMetadata) {
		var ret IntegrationMetadataRequest
		return ret
	}
	return *o.IntegrationMetadata
}

// GetIntegrationMetadataOk returns a tuple with the IntegrationMetadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreatePaymentUserRequest) GetIntegrationMetadataOk() (*IntegrationMetadataRequest, bool) {
	if o == nil || IsNil(o.IntegrationMetadata) {
		return nil, false
	}
	return o.IntegrationMetadata, true
}

// HasIntegrationMetadata returns a boolean if a field has been set.
func (o *CreatePaymentUserRequest) HasIntegrationMetadata() bool {
	if o != nil && !IsNil(o.IntegrationMetadata) {
		return true
	}

	return false
}

// SetIntegrationMetadata gets a reference to the given IntegrationMetadataRequest and assigns it to the IntegrationMetadata field.
func (o *CreatePaymentUserRequest) SetIntegrationMetadata(v IntegrationMetadataRequest) {
	o.IntegrationMetadata = &v
}

func (o CreatePaymentUserRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreatePaymentUserRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["external_user_id"] = o.ExternalUserId
	if !IsNil(o.UserType) {
		toSerialize["user_type"] = o.UserType
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.UserDetails) {
		toSerialize["user_details"] = o.UserDetails
	}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	if !IsNil(o.AutopayConsent) {
		toSerialize["autopay_consent"] = o.AutopayConsent
	}
	if !IsNil(o.IntegrationMetadata) {
		toSerialize["integration_metadata"] = o.IntegrationMetadata
	}
	return toSerialize, nil
}

func (o *CreatePaymentUserRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"external_user_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreatePaymentUserRequest := _CreatePaymentUserRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreatePaymentUserRequest)

	if err != nil {
		return err
	}

	*o = CreatePaymentUserRequest(varCreatePaymentUserRequest)

	return err
}

type NullableCreatePaymentUserRequest struct {
	value *CreatePaymentUserRequest
	isSet bool
}

func (v NullableCreatePaymentUserRequest) Get() *CreatePaymentUserRequest {
	return v.value
}

func (v *NullableCreatePaymentUserRequest) Set(val *CreatePaymentUserRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreatePaymentUserRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreatePaymentUserRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreatePaymentUserRequest(val *CreatePaymentUserRequest) *NullableCreatePaymentUserRequest {
	return &NullableCreatePaymentUserRequest{value: val, isSet: true}
}

func (v NullableCreatePaymentUserRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreatePaymentUserRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
