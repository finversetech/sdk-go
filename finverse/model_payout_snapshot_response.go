/*
Finverse Public

Documentation of the early finverse services

API version: 0.0.1
Contact: info@finverse.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package finverse

import (
	"encoding/json"
	"fmt"
	"time"
)

// checks if the PayoutSnapshotResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PayoutSnapshotResponse{}

// PayoutSnapshotResponse struct for PayoutSnapshotResponse
type PayoutSnapshotResponse struct {
	PayoutId         *string                  `json:"payout_id,omitempty"`
	Status           *string                  `json:"status,omitempty"`
	Type             *string                  `json:"type,omitempty"`
	CreatedAt        *time.Time               `json:"created_at,omitempty"`
	UpdatedAt        *time.Time               `json:"updated_at,omitempty"`
	TransactionDate  *string                  `json:"transaction_date,omitempty"`
	PaymentDetails   *PayoutSnapshotDetails   `json:"payment_details,omitempty"`
	Metadata         *map[string]string       `json:"metadata,omitempty"`
	Amount           *int32                   `json:"amount,omitempty"`
	Currency         *string                  `json:"currency,omitempty"`
	Sender           *MandateRecipient        `json:"sender,omitempty"`
	SenderAccount    *MandateRecipientAccount `json:"sender_account,omitempty"`
	Recipient        *GetMandateSender        `json:"recipient,omitempty"`
	RecipientAccount *MandateSenderAccount    `json:"recipient_account,omitempty"`
	Fees             []Fee                    `json:"fees,omitempty"`
	// Whether this payout is live or not
	Live                 bool                  `json:"live"`
	Error                *FvEmbeddedErrorModel `json:"error,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PayoutSnapshotResponse PayoutSnapshotResponse

// NewPayoutSnapshotResponse instantiates a new PayoutSnapshotResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPayoutSnapshotResponse(live bool) *PayoutSnapshotResponse {
	this := PayoutSnapshotResponse{}
	this.Live = live
	return &this
}

// NewPayoutSnapshotResponseWithDefaults instantiates a new PayoutSnapshotResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPayoutSnapshotResponseWithDefaults() *PayoutSnapshotResponse {
	this := PayoutSnapshotResponse{}
	return &this
}

// GetPayoutId returns the PayoutId field value if set, zero value otherwise.
func (o *PayoutSnapshotResponse) GetPayoutId() string {
	if o == nil || IsNil(o.PayoutId) {
		var ret string
		return ret
	}
	return *o.PayoutId
}

// GetPayoutIdOk returns a tuple with the PayoutId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PayoutSnapshotResponse) GetPayoutIdOk() (*string, bool) {
	if o == nil || IsNil(o.PayoutId) {
		return nil, false
	}
	return o.PayoutId, true
}

// HasPayoutId returns a boolean if a field has been set.
func (o *PayoutSnapshotResponse) HasPayoutId() bool {
	if o != nil && !IsNil(o.PayoutId) {
		return true
	}

	return false
}

// SetPayoutId gets a reference to the given string and assigns it to the PayoutId field.
func (o *PayoutSnapshotResponse) SetPayoutId(v string) {
	o.PayoutId = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *PayoutSnapshotResponse) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PayoutSnapshotResponse) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *PayoutSnapshotResponse) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *PayoutSnapshotResponse) SetStatus(v string) {
	o.Status = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *PayoutSnapshotResponse) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PayoutSnapshotResponse) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *PayoutSnapshotResponse) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *PayoutSnapshotResponse) SetType(v string) {
	o.Type = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *PayoutSnapshotResponse) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PayoutSnapshotResponse) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *PayoutSnapshotResponse) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *PayoutSnapshotResponse) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *PayoutSnapshotResponse) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PayoutSnapshotResponse) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *PayoutSnapshotResponse) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *PayoutSnapshotResponse) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetTransactionDate returns the TransactionDate field value if set, zero value otherwise.
func (o *PayoutSnapshotResponse) GetTransactionDate() string {
	if o == nil || IsNil(o.TransactionDate) {
		var ret string
		return ret
	}
	return *o.TransactionDate
}

// GetTransactionDateOk returns a tuple with the TransactionDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PayoutSnapshotResponse) GetTransactionDateOk() (*string, bool) {
	if o == nil || IsNil(o.TransactionDate) {
		return nil, false
	}
	return o.TransactionDate, true
}

// HasTransactionDate returns a boolean if a field has been set.
func (o *PayoutSnapshotResponse) HasTransactionDate() bool {
	if o != nil && !IsNil(o.TransactionDate) {
		return true
	}

	return false
}

// SetTransactionDate gets a reference to the given string and assigns it to the TransactionDate field.
func (o *PayoutSnapshotResponse) SetTransactionDate(v string) {
	o.TransactionDate = &v
}

// GetPaymentDetails returns the PaymentDetails field value if set, zero value otherwise.
func (o *PayoutSnapshotResponse) GetPaymentDetails() PayoutSnapshotDetails {
	if o == nil || IsNil(o.PaymentDetails) {
		var ret PayoutSnapshotDetails
		return ret
	}
	return *o.PaymentDetails
}

// GetPaymentDetailsOk returns a tuple with the PaymentDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PayoutSnapshotResponse) GetPaymentDetailsOk() (*PayoutSnapshotDetails, bool) {
	if o == nil || IsNil(o.PaymentDetails) {
		return nil, false
	}
	return o.PaymentDetails, true
}

// HasPaymentDetails returns a boolean if a field has been set.
func (o *PayoutSnapshotResponse) HasPaymentDetails() bool {
	if o != nil && !IsNil(o.PaymentDetails) {
		return true
	}

	return false
}

// SetPaymentDetails gets a reference to the given PayoutSnapshotDetails and assigns it to the PaymentDetails field.
func (o *PayoutSnapshotResponse) SetPaymentDetails(v PayoutSnapshotDetails) {
	o.PaymentDetails = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *PayoutSnapshotResponse) GetMetadata() map[string]string {
	if o == nil || IsNil(o.Metadata) {
		var ret map[string]string
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PayoutSnapshotResponse) GetMetadataOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *PayoutSnapshotResponse) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]string and assigns it to the Metadata field.
func (o *PayoutSnapshotResponse) SetMetadata(v map[string]string) {
	o.Metadata = &v
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *PayoutSnapshotResponse) GetAmount() int32 {
	if o == nil || IsNil(o.Amount) {
		var ret int32
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PayoutSnapshotResponse) GetAmountOk() (*int32, bool) {
	if o == nil || IsNil(o.Amount) {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *PayoutSnapshotResponse) HasAmount() bool {
	if o != nil && !IsNil(o.Amount) {
		return true
	}

	return false
}

// SetAmount gets a reference to the given int32 and assigns it to the Amount field.
func (o *PayoutSnapshotResponse) SetAmount(v int32) {
	o.Amount = &v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *PayoutSnapshotResponse) GetCurrency() string {
	if o == nil || IsNil(o.Currency) {
		var ret string
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PayoutSnapshotResponse) GetCurrencyOk() (*string, bool) {
	if o == nil || IsNil(o.Currency) {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *PayoutSnapshotResponse) HasCurrency() bool {
	if o != nil && !IsNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given string and assigns it to the Currency field.
func (o *PayoutSnapshotResponse) SetCurrency(v string) {
	o.Currency = &v
}

// GetSender returns the Sender field value if set, zero value otherwise.
func (o *PayoutSnapshotResponse) GetSender() MandateRecipient {
	if o == nil || IsNil(o.Sender) {
		var ret MandateRecipient
		return ret
	}
	return *o.Sender
}

// GetSenderOk returns a tuple with the Sender field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PayoutSnapshotResponse) GetSenderOk() (*MandateRecipient, bool) {
	if o == nil || IsNil(o.Sender) {
		return nil, false
	}
	return o.Sender, true
}

// HasSender returns a boolean if a field has been set.
func (o *PayoutSnapshotResponse) HasSender() bool {
	if o != nil && !IsNil(o.Sender) {
		return true
	}

	return false
}

// SetSender gets a reference to the given MandateRecipient and assigns it to the Sender field.
func (o *PayoutSnapshotResponse) SetSender(v MandateRecipient) {
	o.Sender = &v
}

// GetSenderAccount returns the SenderAccount field value if set, zero value otherwise.
func (o *PayoutSnapshotResponse) GetSenderAccount() MandateRecipientAccount {
	if o == nil || IsNil(o.SenderAccount) {
		var ret MandateRecipientAccount
		return ret
	}
	return *o.SenderAccount
}

// GetSenderAccountOk returns a tuple with the SenderAccount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PayoutSnapshotResponse) GetSenderAccountOk() (*MandateRecipientAccount, bool) {
	if o == nil || IsNil(o.SenderAccount) {
		return nil, false
	}
	return o.SenderAccount, true
}

// HasSenderAccount returns a boolean if a field has been set.
func (o *PayoutSnapshotResponse) HasSenderAccount() bool {
	if o != nil && !IsNil(o.SenderAccount) {
		return true
	}

	return false
}

// SetSenderAccount gets a reference to the given MandateRecipientAccount and assigns it to the SenderAccount field.
func (o *PayoutSnapshotResponse) SetSenderAccount(v MandateRecipientAccount) {
	o.SenderAccount = &v
}

// GetRecipient returns the Recipient field value if set, zero value otherwise.
func (o *PayoutSnapshotResponse) GetRecipient() GetMandateSender {
	if o == nil || IsNil(o.Recipient) {
		var ret GetMandateSender
		return ret
	}
	return *o.Recipient
}

// GetRecipientOk returns a tuple with the Recipient field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PayoutSnapshotResponse) GetRecipientOk() (*GetMandateSender, bool) {
	if o == nil || IsNil(o.Recipient) {
		return nil, false
	}
	return o.Recipient, true
}

// HasRecipient returns a boolean if a field has been set.
func (o *PayoutSnapshotResponse) HasRecipient() bool {
	if o != nil && !IsNil(o.Recipient) {
		return true
	}

	return false
}

// SetRecipient gets a reference to the given GetMandateSender and assigns it to the Recipient field.
func (o *PayoutSnapshotResponse) SetRecipient(v GetMandateSender) {
	o.Recipient = &v
}

// GetRecipientAccount returns the RecipientAccount field value if set, zero value otherwise.
func (o *PayoutSnapshotResponse) GetRecipientAccount() MandateSenderAccount {
	if o == nil || IsNil(o.RecipientAccount) {
		var ret MandateSenderAccount
		return ret
	}
	return *o.RecipientAccount
}

// GetRecipientAccountOk returns a tuple with the RecipientAccount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PayoutSnapshotResponse) GetRecipientAccountOk() (*MandateSenderAccount, bool) {
	if o == nil || IsNil(o.RecipientAccount) {
		return nil, false
	}
	return o.RecipientAccount, true
}

// HasRecipientAccount returns a boolean if a field has been set.
func (o *PayoutSnapshotResponse) HasRecipientAccount() bool {
	if o != nil && !IsNil(o.RecipientAccount) {
		return true
	}

	return false
}

// SetRecipientAccount gets a reference to the given MandateSenderAccount and assigns it to the RecipientAccount field.
func (o *PayoutSnapshotResponse) SetRecipientAccount(v MandateSenderAccount) {
	o.RecipientAccount = &v
}

// GetFees returns the Fees field value if set, zero value otherwise.
func (o *PayoutSnapshotResponse) GetFees() []Fee {
	if o == nil || IsNil(o.Fees) {
		var ret []Fee
		return ret
	}
	return o.Fees
}

// GetFeesOk returns a tuple with the Fees field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PayoutSnapshotResponse) GetFeesOk() ([]Fee, bool) {
	if o == nil || IsNil(o.Fees) {
		return nil, false
	}
	return o.Fees, true
}

// HasFees returns a boolean if a field has been set.
func (o *PayoutSnapshotResponse) HasFees() bool {
	if o != nil && !IsNil(o.Fees) {
		return true
	}

	return false
}

// SetFees gets a reference to the given []Fee and assigns it to the Fees field.
func (o *PayoutSnapshotResponse) SetFees(v []Fee) {
	o.Fees = v
}

// GetLive returns the Live field value
func (o *PayoutSnapshotResponse) GetLive() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Live
}

// GetLiveOk returns a tuple with the Live field value
// and a boolean to check if the value has been set.
func (o *PayoutSnapshotResponse) GetLiveOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Live, true
}

// SetLive sets field value
func (o *PayoutSnapshotResponse) SetLive(v bool) {
	o.Live = v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *PayoutSnapshotResponse) GetError() FvEmbeddedErrorModel {
	if o == nil || IsNil(o.Error) {
		var ret FvEmbeddedErrorModel
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PayoutSnapshotResponse) GetErrorOk() (*FvEmbeddedErrorModel, bool) {
	if o == nil || IsNil(o.Error) {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *PayoutSnapshotResponse) HasError() bool {
	if o != nil && !IsNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given FvEmbeddedErrorModel and assigns it to the Error field.
func (o *PayoutSnapshotResponse) SetError(v FvEmbeddedErrorModel) {
	o.Error = &v
}

func (o PayoutSnapshotResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PayoutSnapshotResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PayoutId) {
		toSerialize["payout_id"] = o.PayoutId
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if !IsNil(o.TransactionDate) {
		toSerialize["transaction_date"] = o.TransactionDate
	}
	if !IsNil(o.PaymentDetails) {
		toSerialize["payment_details"] = o.PaymentDetails
	}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	if !IsNil(o.Amount) {
		toSerialize["amount"] = o.Amount
	}
	if !IsNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	if !IsNil(o.Sender) {
		toSerialize["sender"] = o.Sender
	}
	if !IsNil(o.SenderAccount) {
		toSerialize["sender_account"] = o.SenderAccount
	}
	if !IsNil(o.Recipient) {
		toSerialize["recipient"] = o.Recipient
	}
	if !IsNil(o.RecipientAccount) {
		toSerialize["recipient_account"] = o.RecipientAccount
	}
	if !IsNil(o.Fees) {
		toSerialize["fees"] = o.Fees
	}
	toSerialize["live"] = o.Live
	if !IsNil(o.Error) {
		toSerialize["error"] = o.Error
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PayoutSnapshotResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"live",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPayoutSnapshotResponse := _PayoutSnapshotResponse{}

	err = json.Unmarshal(data, &varPayoutSnapshotResponse)

	if err != nil {
		return err
	}

	*o = PayoutSnapshotResponse(varPayoutSnapshotResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "payout_id")
		delete(additionalProperties, "status")
		delete(additionalProperties, "type")
		delete(additionalProperties, "created_at")
		delete(additionalProperties, "updated_at")
		delete(additionalProperties, "transaction_date")
		delete(additionalProperties, "payment_details")
		delete(additionalProperties, "metadata")
		delete(additionalProperties, "amount")
		delete(additionalProperties, "currency")
		delete(additionalProperties, "sender")
		delete(additionalProperties, "sender_account")
		delete(additionalProperties, "recipient")
		delete(additionalProperties, "recipient_account")
		delete(additionalProperties, "fees")
		delete(additionalProperties, "live")
		delete(additionalProperties, "error")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePayoutSnapshotResponse struct {
	value *PayoutSnapshotResponse
	isSet bool
}

func (v NullablePayoutSnapshotResponse) Get() *PayoutSnapshotResponse {
	return v.value
}

func (v *NullablePayoutSnapshotResponse) Set(val *PayoutSnapshotResponse) {
	v.value = val
	v.isSet = true
}

func (v NullablePayoutSnapshotResponse) IsSet() bool {
	return v.isSet
}

func (v *NullablePayoutSnapshotResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePayoutSnapshotResponse(val *PayoutSnapshotResponse) *NullablePayoutSnapshotResponse {
	return &NullablePayoutSnapshotResponse{value: val, isSet: true}
}

func (v NullablePayoutSnapshotResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePayoutSnapshotResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
