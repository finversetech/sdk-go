/*
Finverse Public

Documentation of the early finverse services

API version: 0.0.1
Contact: info@finverse.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package finverse

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
)

// Linger please
var (
	_ context.Context
)

type DefaultApi interface {

	/*
		ConfirmPayment Method for ConfirmPayment

		Confirm a payment against a payment Link

		 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		 @return DefaultApiApiConfirmPaymentRequest
	*/
	ConfirmPayment(ctx context.Context) DefaultApiApiConfirmPaymentRequest

	// ConfirmPaymentExecute executes the request
	//  @return ConfirmPaymentResponse
	ConfirmPaymentExecute(r DefaultApiApiConfirmPaymentRequest) (*ConfirmPaymentResponse, *http.Response, error)

	/*
		CreatePaymentLinkMandate Method for CreatePaymentLinkMandate

		CREATE Mandate for payment link

		 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		 @return DefaultApiApiCreatePaymentLinkMandateRequest
	*/
	CreatePaymentLinkMandate(ctx context.Context) DefaultApiApiCreatePaymentLinkMandateRequest

	// CreatePaymentLinkMandateExecute executes the request
	//  @return CreatePaymentLinkMandateResponse
	CreatePaymentLinkMandateExecute(r DefaultApiApiCreatePaymentLinkMandateRequest) (*CreatePaymentLinkMandateResponse, *http.Response, error)

	/*
		ListMandates Method for ListMandates

		List mandates

		 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		 @return DefaultApiApiListMandatesRequest
	*/
	ListMandates(ctx context.Context) DefaultApiApiListMandatesRequest

	// ListMandatesExecute executes the request
	//  @return ListMandatesResponse
	ListMandatesExecute(r DefaultApiApiListMandatesRequest) (*ListMandatesResponse, *http.Response, error)

	/*
		ListPayments Method for ListPayments

		List Payments

		 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		 @return DefaultApiApiListPaymentsRequest
	*/
	ListPayments(ctx context.Context) DefaultApiApiListPaymentsRequest

	// ListPaymentsExecute executes the request
	//  @return ListPaymentsResponse
	ListPaymentsExecute(r DefaultApiApiListPaymentsRequest) (*ListPaymentsResponse, *http.Response, error)
}

// DefaultApiService DefaultApi service
type DefaultApiService service

type DefaultApiApiConfirmPaymentRequest struct {
	ctx        context.Context
	ApiService DefaultApi
}

func (r DefaultApiApiConfirmPaymentRequest) Execute() (*ConfirmPaymentResponse, *http.Response, error) {
	return r.ApiService.ConfirmPaymentExecute(r)
}

/*
ConfirmPayment Method for ConfirmPayment

Confirm a payment against a payment Link

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return DefaultApiApiConfirmPaymentRequest
*/
func (a *DefaultApiService) ConfirmPayment(ctx context.Context) DefaultApiApiConfirmPaymentRequest {
	return DefaultApiApiConfirmPaymentRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//  @return ConfirmPaymentResponse
func (a *DefaultApiService) ConfirmPaymentExecute(r DefaultApiApiConfirmPaymentRequest) (*ConfirmPaymentResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ConfirmPaymentResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.ConfirmPayment")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/payment-link/confirm"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrBodyModelV2
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ErrBodyModelV2
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DefaultApiApiCreatePaymentLinkMandateRequest struct {
	ctx                             context.Context
	ApiService                      DefaultApi
	createPaymentLinkMandateRequest *CreatePaymentLinkMandateRequest
}

// request body for creating mandate for payment-link
func (r DefaultApiApiCreatePaymentLinkMandateRequest) CreatePaymentLinkMandateRequest(createPaymentLinkMandateRequest CreatePaymentLinkMandateRequest) DefaultApiApiCreatePaymentLinkMandateRequest {
	r.createPaymentLinkMandateRequest = &createPaymentLinkMandateRequest
	return r
}

func (r DefaultApiApiCreatePaymentLinkMandateRequest) Execute() (*CreatePaymentLinkMandateResponse, *http.Response, error) {
	return r.ApiService.CreatePaymentLinkMandateExecute(r)
}

/*
CreatePaymentLinkMandate Method for CreatePaymentLinkMandate

CREATE Mandate for payment link

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return DefaultApiApiCreatePaymentLinkMandateRequest
*/
func (a *DefaultApiService) CreatePaymentLinkMandate(ctx context.Context) DefaultApiApiCreatePaymentLinkMandateRequest {
	return DefaultApiApiCreatePaymentLinkMandateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//  @return CreatePaymentLinkMandateResponse
func (a *DefaultApiService) CreatePaymentLinkMandateExecute(r DefaultApiApiCreatePaymentLinkMandateRequest) (*CreatePaymentLinkMandateResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CreatePaymentLinkMandateResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.CreatePaymentLinkMandate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/payment-link/mandates"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.createPaymentLinkMandateRequest == nil {
		return localVarReturnValue, nil, reportError("createPaymentLinkMandateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createPaymentLinkMandateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrBodyModelV2
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrBodyModelV2
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ErrBodyModelV2
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DefaultApiApiListMandatesRequest struct {
	ctx           context.Context
	ApiService    DefaultApi
	dateFrom      *string
	dateTo        *string
	statuses      *[]string
	senderType    *string
	userId        *string
	institutionId *string
	offset        *int32
	limit         *int32
}

// ISO format (YYYY-MM-DD)
func (r DefaultApiApiListMandatesRequest) DateFrom(dateFrom string) DefaultApiApiListMandatesRequest {
	r.dateFrom = &dateFrom
	return r
}

// ISO format (YYYY-MM-DD)
func (r DefaultApiApiListMandatesRequest) DateTo(dateTo string) DefaultApiApiListMandatesRequest {
	r.dateTo = &dateTo
	return r
}

// The mandate statuses to filter for, comma separated
func (r DefaultApiApiListMandatesRequest) Statuses(statuses []string) DefaultApiApiListMandatesRequest {
	r.statuses = &statuses
	return r
}

// The sender type of the mandate
func (r DefaultApiApiListMandatesRequest) SenderType(senderType string) DefaultApiApiListMandatesRequest {
	r.senderType = &senderType
	return r
}

// The user_id the mandate was setup for
func (r DefaultApiApiListMandatesRequest) UserId(userId string) DefaultApiApiListMandatesRequest {
	r.userId = &userId
	return r
}

// The institution the mandate was executed against
func (r DefaultApiApiListMandatesRequest) InstitutionId(institutionId string) DefaultApiApiListMandatesRequest {
	r.institutionId = &institutionId
	return r
}

// default is 0
func (r DefaultApiApiListMandatesRequest) Offset(offset int32) DefaultApiApiListMandatesRequest {
	r.offset = &offset
	return r
}

// default is 500, max is 1000
func (r DefaultApiApiListMandatesRequest) Limit(limit int32) DefaultApiApiListMandatesRequest {
	r.limit = &limit
	return r
}

func (r DefaultApiApiListMandatesRequest) Execute() (*ListMandatesResponse, *http.Response, error) {
	return r.ApiService.ListMandatesExecute(r)
}

/*
ListMandates Method for ListMandates

List mandates

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return DefaultApiApiListMandatesRequest
*/
func (a *DefaultApiService) ListMandates(ctx context.Context) DefaultApiApiListMandatesRequest {
	return DefaultApiApiListMandatesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//  @return ListMandatesResponse
func (a *DefaultApiService) ListMandatesExecute(r DefaultApiApiListMandatesRequest) (*ListMandatesResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ListMandatesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.ListMandates")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/mandates"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.dateFrom != nil {
		localVarQueryParams.Add("date_from", parameterToString(*r.dateFrom, ""))
	}
	if r.dateTo != nil {
		localVarQueryParams.Add("date_to", parameterToString(*r.dateTo, ""))
	}
	if r.statuses != nil {
		localVarQueryParams.Add("statuses", parameterToString(*r.statuses, "csv"))
	}
	if r.senderType != nil {
		localVarQueryParams.Add("sender_type", parameterToString(*r.senderType, ""))
	}
	if r.userId != nil {
		localVarQueryParams.Add("user_id", parameterToString(*r.userId, ""))
	}
	if r.institutionId != nil {
		localVarQueryParams.Add("institution_id", parameterToString(*r.institutionId, ""))
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrBodyModelV2
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrBodyModelV2
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ErrBodyModelV2
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DefaultApiApiListPaymentsRequest struct {
	ctx           context.Context
	ApiService    DefaultApi
	dateFrom      *string
	dateTo        *string
	statuses      *[]string
	senderType    *string
	userId        *string
	institutionId *string
	paymentType   *string
	mandateId     *string
	currency      *string
	offset        *int32
	limit         *int32
}

// ISO format (YYYY-MM-DD)
func (r DefaultApiApiListPaymentsRequest) DateFrom(dateFrom string) DefaultApiApiListPaymentsRequest {
	r.dateFrom = &dateFrom
	return r
}

// ISO format (YYYY-MM-DD)
func (r DefaultApiApiListPaymentsRequest) DateTo(dateTo string) DefaultApiApiListPaymentsRequest {
	r.dateTo = &dateTo
	return r
}

// The payment statuses to filter for, comma separated
func (r DefaultApiApiListPaymentsRequest) Statuses(statuses []string) DefaultApiApiListPaymentsRequest {
	r.statuses = &statuses
	return r
}

// The sender type of the mandate
func (r DefaultApiApiListPaymentsRequest) SenderType(senderType string) DefaultApiApiListPaymentsRequest {
	r.senderType = &senderType
	return r
}

// The user_id the mandate was setup for
func (r DefaultApiApiListPaymentsRequest) UserId(userId string) DefaultApiApiListPaymentsRequest {
	r.userId = &userId
	return r
}

// The institution the mandate was executed against
func (r DefaultApiApiListPaymentsRequest) InstitutionId(institutionId string) DefaultApiApiListPaymentsRequest {
	r.institutionId = &institutionId
	return r
}

// The type of payment
func (r DefaultApiApiListPaymentsRequest) PaymentType(paymentType string) DefaultApiApiListPaymentsRequest {
	r.paymentType = &paymentType
	return r
}

// The mandate the payment belongs to
func (r DefaultApiApiListPaymentsRequest) MandateId(mandateId string) DefaultApiApiListPaymentsRequest {
	r.mandateId = &mandateId
	return r
}

// The currency the payment is made in
func (r DefaultApiApiListPaymentsRequest) Currency(currency string) DefaultApiApiListPaymentsRequest {
	r.currency = &currency
	return r
}

// default is 0
func (r DefaultApiApiListPaymentsRequest) Offset(offset int32) DefaultApiApiListPaymentsRequest {
	r.offset = &offset
	return r
}

// default is 500, max is 1000
func (r DefaultApiApiListPaymentsRequest) Limit(limit int32) DefaultApiApiListPaymentsRequest {
	r.limit = &limit
	return r
}

func (r DefaultApiApiListPaymentsRequest) Execute() (*ListPaymentsResponse, *http.Response, error) {
	return r.ApiService.ListPaymentsExecute(r)
}

/*
ListPayments Method for ListPayments

List Payments

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return DefaultApiApiListPaymentsRequest
*/
func (a *DefaultApiService) ListPayments(ctx context.Context) DefaultApiApiListPaymentsRequest {
	return DefaultApiApiListPaymentsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//  @return ListPaymentsResponse
func (a *DefaultApiService) ListPaymentsExecute(r DefaultApiApiListPaymentsRequest) (*ListPaymentsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ListPaymentsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.ListPayments")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/payments"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.dateFrom != nil {
		localVarQueryParams.Add("date_from", parameterToString(*r.dateFrom, ""))
	}
	if r.dateTo != nil {
		localVarQueryParams.Add("date_to", parameterToString(*r.dateTo, ""))
	}
	if r.statuses != nil {
		localVarQueryParams.Add("statuses", parameterToString(*r.statuses, "csv"))
	}
	if r.senderType != nil {
		localVarQueryParams.Add("sender_type", parameterToString(*r.senderType, ""))
	}
	if r.userId != nil {
		localVarQueryParams.Add("user_id", parameterToString(*r.userId, ""))
	}
	if r.institutionId != nil {
		localVarQueryParams.Add("institution_id", parameterToString(*r.institutionId, ""))
	}
	if r.paymentType != nil {
		localVarQueryParams.Add("payment_type", parameterToString(*r.paymentType, ""))
	}
	if r.mandateId != nil {
		localVarQueryParams.Add("mandate_id", parameterToString(*r.mandateId, ""))
	}
	if r.currency != nil {
		localVarQueryParams.Add("currency", parameterToString(*r.currency, ""))
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrBodyModelV2
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrBodyModelV2
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ErrBodyModelV2
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
