/*
Finverse Public

Documentation of the early finverse services

API version: 0.0.1
Contact: info@finverse.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package finverse

import (
	"encoding/json"
)

// GetMandateSender struct for GetMandateSender
type GetMandateSender struct {
	// A unique identifier generated after creating sender
	UserId string  `json:"user_id"`
	Name   *string `json:"name,omitempty"`
	// Customer App's user ID, representing the end-user making the payment.
	ExternalUserId string `json:"external_user_id"`
	// Type of account held by the Sender at the Institution. Possible values are INDIVIDUAL, BUSINESS
	UserType string `json:"user_type"`
	// Sender details which will be used for fraud checking.
	UserDetails []SenderDetail `json:"user_details,omitempty"`
}

// NewGetMandateSender instantiates a new GetMandateSender object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetMandateSender(userId string, externalUserId string, userType string) *GetMandateSender {
	this := GetMandateSender{}
	this.UserId = userId
	this.ExternalUserId = externalUserId
	this.UserType = userType
	return &this
}

// NewGetMandateSenderWithDefaults instantiates a new GetMandateSender object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetMandateSenderWithDefaults() *GetMandateSender {
	this := GetMandateSender{}
	return &this
}

// GetUserId returns the UserId field value
func (o *GetMandateSender) GetUserId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value
// and a boolean to check if the value has been set.
func (o *GetMandateSender) GetUserIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserId, true
}

// SetUserId sets field value
func (o *GetMandateSender) SetUserId(v string) {
	o.UserId = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *GetMandateSender) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetMandateSender) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *GetMandateSender) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *GetMandateSender) SetName(v string) {
	o.Name = &v
}

// GetExternalUserId returns the ExternalUserId field value
func (o *GetMandateSender) GetExternalUserId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ExternalUserId
}

// GetExternalUserIdOk returns a tuple with the ExternalUserId field value
// and a boolean to check if the value has been set.
func (o *GetMandateSender) GetExternalUserIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExternalUserId, true
}

// SetExternalUserId sets field value
func (o *GetMandateSender) SetExternalUserId(v string) {
	o.ExternalUserId = v
}

// GetUserType returns the UserType field value
func (o *GetMandateSender) GetUserType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserType
}

// GetUserTypeOk returns a tuple with the UserType field value
// and a boolean to check if the value has been set.
func (o *GetMandateSender) GetUserTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserType, true
}

// SetUserType sets field value
func (o *GetMandateSender) SetUserType(v string) {
	o.UserType = v
}

// GetUserDetails returns the UserDetails field value if set, zero value otherwise.
func (o *GetMandateSender) GetUserDetails() []SenderDetail {
	if o == nil || o.UserDetails == nil {
		var ret []SenderDetail
		return ret
	}
	return o.UserDetails
}

// GetUserDetailsOk returns a tuple with the UserDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetMandateSender) GetUserDetailsOk() ([]SenderDetail, bool) {
	if o == nil || o.UserDetails == nil {
		return nil, false
	}
	return o.UserDetails, true
}

// HasUserDetails returns a boolean if a field has been set.
func (o *GetMandateSender) HasUserDetails() bool {
	if o != nil && o.UserDetails != nil {
		return true
	}

	return false
}

// SetUserDetails gets a reference to the given []SenderDetail and assigns it to the UserDetails field.
func (o *GetMandateSender) SetUserDetails(v []SenderDetail) {
	o.UserDetails = v
}

func (o GetMandateSender) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["user_id"] = o.UserId
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["external_user_id"] = o.ExternalUserId
	}
	if true {
		toSerialize["user_type"] = o.UserType
	}
	if o.UserDetails != nil {
		toSerialize["user_details"] = o.UserDetails
	}
	return json.Marshal(toSerialize)
}

type NullableGetMandateSender struct {
	value *GetMandateSender
	isSet bool
}

func (v NullableGetMandateSender) Get() *GetMandateSender {
	return v.value
}

func (v *NullableGetMandateSender) Set(val *GetMandateSender) {
	v.value = val
	v.isSet = true
}

func (v NullableGetMandateSender) IsSet() bool {
	return v.isSet
}

func (v *NullableGetMandateSender) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetMandateSender(val *GetMandateSender) *NullableGetMandateSender {
	return &NullableGetMandateSender{value: val, isSet: true}
}

func (v NullableGetMandateSender) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetMandateSender) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
