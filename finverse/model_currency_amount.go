/*
Finverse Public

Documentation of the early finverse services

API version: 0.0.1
Contact: devs@finverse.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package finverse

import (
	"encoding/json"
)

// CurrencyAmount struct for CurrencyAmount
type CurrencyAmount struct {
	Currency *string `json:"currency,omitempty"`
	Value    float32 `json:"value"`
	Raw      *string `json:"raw,omitempty"`
}

// NewCurrencyAmount instantiates a new CurrencyAmount object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCurrencyAmount(value float32) *CurrencyAmount {
	this := CurrencyAmount{}
	this.Value = value
	return &this
}

// NewCurrencyAmountWithDefaults instantiates a new CurrencyAmount object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCurrencyAmountWithDefaults() *CurrencyAmount {
	this := CurrencyAmount{}
	return &this
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *CurrencyAmount) GetCurrency() string {
	if o == nil || o.Currency == nil {
		var ret string
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CurrencyAmount) GetCurrencyOk() (*string, bool) {
	if o == nil || o.Currency == nil {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *CurrencyAmount) HasCurrency() bool {
	if o != nil && o.Currency != nil {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given string and assigns it to the Currency field.
func (o *CurrencyAmount) SetCurrency(v string) {
	o.Currency = &v
}

// GetValue returns the Value field value
func (o *CurrencyAmount) GetValue() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *CurrencyAmount) GetValueOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *CurrencyAmount) SetValue(v float32) {
	o.Value = v
}

// GetRaw returns the Raw field value if set, zero value otherwise.
func (o *CurrencyAmount) GetRaw() string {
	if o == nil || o.Raw == nil {
		var ret string
		return ret
	}
	return *o.Raw
}

// GetRawOk returns a tuple with the Raw field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CurrencyAmount) GetRawOk() (*string, bool) {
	if o == nil || o.Raw == nil {
		return nil, false
	}
	return o.Raw, true
}

// HasRaw returns a boolean if a field has been set.
func (o *CurrencyAmount) HasRaw() bool {
	if o != nil && o.Raw != nil {
		return true
	}

	return false
}

// SetRaw gets a reference to the given string and assigns it to the Raw field.
func (o *CurrencyAmount) SetRaw(v string) {
	o.Raw = &v
}

func (o CurrencyAmount) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Currency != nil {
		toSerialize["currency"] = o.Currency
	}
	if true {
		toSerialize["value"] = o.Value
	}
	if o.Raw != nil {
		toSerialize["raw"] = o.Raw
	}
	return json.Marshal(toSerialize)
}

type NullableCurrencyAmount struct {
	value *CurrencyAmount
	isSet bool
}

func (v NullableCurrencyAmount) Get() *CurrencyAmount {
	return v.value
}

func (v *NullableCurrencyAmount) Set(val *CurrencyAmount) {
	v.value = val
	v.isSet = true
}

func (v NullableCurrencyAmount) IsSet() bool {
	return v.isSet
}

func (v *NullableCurrencyAmount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCurrencyAmount(val *CurrencyAmount) *NullableCurrencyAmount {
	return &NullableCurrencyAmount{value: val, isSet: true}
}

func (v NullableCurrencyAmount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCurrencyAmount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
