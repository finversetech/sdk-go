/*
Finverse Public

Documentation of the early finverse services

API version: 0.0.1
Contact: info@finverse.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package finverse

import (
	"encoding/json"
	"time"
)

// CardTotal struct for CardTotal
type CardTotal struct {
	CurrentBalance       *CurrencyAmount `json:"current_balance,omitempty"`
	PaymentDueAmount     *CurrencyAmount `json:"payment_due_amount,omitempty"`
	StatementDueAmount   *CurrencyAmount `json:"statement_due_amount,omitempty"`
	TotalCreditLimit     *CurrencyAmount `json:"total_credit_limit,omitempty"`
	AvailableCreditLimit *CurrencyAmount `json:"available_credit_limit,omitempty"`
	MinimumPaymentDue    *CurrencyAmount `json:"minimum_payment_due,omitempty"`
	RewardsBalances      []GenericAmount `json:"rewards_balances,omitempty"`
	UpdatedAt            *time.Time      `json:"updated_at,omitempty"`
}

// NewCardTotal instantiates a new CardTotal object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCardTotal() *CardTotal {
	this := CardTotal{}
	return &this
}

// NewCardTotalWithDefaults instantiates a new CardTotal object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCardTotalWithDefaults() *CardTotal {
	this := CardTotal{}
	return &this
}

// GetCurrentBalance returns the CurrentBalance field value if set, zero value otherwise.
func (o *CardTotal) GetCurrentBalance() CurrencyAmount {
	if o == nil || o.CurrentBalance == nil {
		var ret CurrencyAmount
		return ret
	}
	return *o.CurrentBalance
}

// GetCurrentBalanceOk returns a tuple with the CurrentBalance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CardTotal) GetCurrentBalanceOk() (*CurrencyAmount, bool) {
	if o == nil || o.CurrentBalance == nil {
		return nil, false
	}
	return o.CurrentBalance, true
}

// HasCurrentBalance returns a boolean if a field has been set.
func (o *CardTotal) HasCurrentBalance() bool {
	if o != nil && o.CurrentBalance != nil {
		return true
	}

	return false
}

// SetCurrentBalance gets a reference to the given CurrencyAmount and assigns it to the CurrentBalance field.
func (o *CardTotal) SetCurrentBalance(v CurrencyAmount) {
	o.CurrentBalance = &v
}

// GetPaymentDueAmount returns the PaymentDueAmount field value if set, zero value otherwise.
func (o *CardTotal) GetPaymentDueAmount() CurrencyAmount {
	if o == nil || o.PaymentDueAmount == nil {
		var ret CurrencyAmount
		return ret
	}
	return *o.PaymentDueAmount
}

// GetPaymentDueAmountOk returns a tuple with the PaymentDueAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CardTotal) GetPaymentDueAmountOk() (*CurrencyAmount, bool) {
	if o == nil || o.PaymentDueAmount == nil {
		return nil, false
	}
	return o.PaymentDueAmount, true
}

// HasPaymentDueAmount returns a boolean if a field has been set.
func (o *CardTotal) HasPaymentDueAmount() bool {
	if o != nil && o.PaymentDueAmount != nil {
		return true
	}

	return false
}

// SetPaymentDueAmount gets a reference to the given CurrencyAmount and assigns it to the PaymentDueAmount field.
func (o *CardTotal) SetPaymentDueAmount(v CurrencyAmount) {
	o.PaymentDueAmount = &v
}

// GetStatementDueAmount returns the StatementDueAmount field value if set, zero value otherwise.
func (o *CardTotal) GetStatementDueAmount() CurrencyAmount {
	if o == nil || o.StatementDueAmount == nil {
		var ret CurrencyAmount
		return ret
	}
	return *o.StatementDueAmount
}

// GetStatementDueAmountOk returns a tuple with the StatementDueAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CardTotal) GetStatementDueAmountOk() (*CurrencyAmount, bool) {
	if o == nil || o.StatementDueAmount == nil {
		return nil, false
	}
	return o.StatementDueAmount, true
}

// HasStatementDueAmount returns a boolean if a field has been set.
func (o *CardTotal) HasStatementDueAmount() bool {
	if o != nil && o.StatementDueAmount != nil {
		return true
	}

	return false
}

// SetStatementDueAmount gets a reference to the given CurrencyAmount and assigns it to the StatementDueAmount field.
func (o *CardTotal) SetStatementDueAmount(v CurrencyAmount) {
	o.StatementDueAmount = &v
}

// GetTotalCreditLimit returns the TotalCreditLimit field value if set, zero value otherwise.
func (o *CardTotal) GetTotalCreditLimit() CurrencyAmount {
	if o == nil || o.TotalCreditLimit == nil {
		var ret CurrencyAmount
		return ret
	}
	return *o.TotalCreditLimit
}

// GetTotalCreditLimitOk returns a tuple with the TotalCreditLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CardTotal) GetTotalCreditLimitOk() (*CurrencyAmount, bool) {
	if o == nil || o.TotalCreditLimit == nil {
		return nil, false
	}
	return o.TotalCreditLimit, true
}

// HasTotalCreditLimit returns a boolean if a field has been set.
func (o *CardTotal) HasTotalCreditLimit() bool {
	if o != nil && o.TotalCreditLimit != nil {
		return true
	}

	return false
}

// SetTotalCreditLimit gets a reference to the given CurrencyAmount and assigns it to the TotalCreditLimit field.
func (o *CardTotal) SetTotalCreditLimit(v CurrencyAmount) {
	o.TotalCreditLimit = &v
}

// GetAvailableCreditLimit returns the AvailableCreditLimit field value if set, zero value otherwise.
func (o *CardTotal) GetAvailableCreditLimit() CurrencyAmount {
	if o == nil || o.AvailableCreditLimit == nil {
		var ret CurrencyAmount
		return ret
	}
	return *o.AvailableCreditLimit
}

// GetAvailableCreditLimitOk returns a tuple with the AvailableCreditLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CardTotal) GetAvailableCreditLimitOk() (*CurrencyAmount, bool) {
	if o == nil || o.AvailableCreditLimit == nil {
		return nil, false
	}
	return o.AvailableCreditLimit, true
}

// HasAvailableCreditLimit returns a boolean if a field has been set.
func (o *CardTotal) HasAvailableCreditLimit() bool {
	if o != nil && o.AvailableCreditLimit != nil {
		return true
	}

	return false
}

// SetAvailableCreditLimit gets a reference to the given CurrencyAmount and assigns it to the AvailableCreditLimit field.
func (o *CardTotal) SetAvailableCreditLimit(v CurrencyAmount) {
	o.AvailableCreditLimit = &v
}

// GetMinimumPaymentDue returns the MinimumPaymentDue field value if set, zero value otherwise.
func (o *CardTotal) GetMinimumPaymentDue() CurrencyAmount {
	if o == nil || o.MinimumPaymentDue == nil {
		var ret CurrencyAmount
		return ret
	}
	return *o.MinimumPaymentDue
}

// GetMinimumPaymentDueOk returns a tuple with the MinimumPaymentDue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CardTotal) GetMinimumPaymentDueOk() (*CurrencyAmount, bool) {
	if o == nil || o.MinimumPaymentDue == nil {
		return nil, false
	}
	return o.MinimumPaymentDue, true
}

// HasMinimumPaymentDue returns a boolean if a field has been set.
func (o *CardTotal) HasMinimumPaymentDue() bool {
	if o != nil && o.MinimumPaymentDue != nil {
		return true
	}

	return false
}

// SetMinimumPaymentDue gets a reference to the given CurrencyAmount and assigns it to the MinimumPaymentDue field.
func (o *CardTotal) SetMinimumPaymentDue(v CurrencyAmount) {
	o.MinimumPaymentDue = &v
}

// GetRewardsBalances returns the RewardsBalances field value if set, zero value otherwise.
func (o *CardTotal) GetRewardsBalances() []GenericAmount {
	if o == nil || o.RewardsBalances == nil {
		var ret []GenericAmount
		return ret
	}
	return o.RewardsBalances
}

// GetRewardsBalancesOk returns a tuple with the RewardsBalances field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CardTotal) GetRewardsBalancesOk() ([]GenericAmount, bool) {
	if o == nil || o.RewardsBalances == nil {
		return nil, false
	}
	return o.RewardsBalances, true
}

// HasRewardsBalances returns a boolean if a field has been set.
func (o *CardTotal) HasRewardsBalances() bool {
	if o != nil && o.RewardsBalances != nil {
		return true
	}

	return false
}

// SetRewardsBalances gets a reference to the given []GenericAmount and assigns it to the RewardsBalances field.
func (o *CardTotal) SetRewardsBalances(v []GenericAmount) {
	o.RewardsBalances = v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *CardTotal) GetUpdatedAt() time.Time {
	if o == nil || o.UpdatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CardTotal) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || o.UpdatedAt == nil {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *CardTotal) HasUpdatedAt() bool {
	if o != nil && o.UpdatedAt != nil {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *CardTotal) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

func (o CardTotal) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CurrentBalance != nil {
		toSerialize["current_balance"] = o.CurrentBalance
	}
	if o.PaymentDueAmount != nil {
		toSerialize["payment_due_amount"] = o.PaymentDueAmount
	}
	if o.StatementDueAmount != nil {
		toSerialize["statement_due_amount"] = o.StatementDueAmount
	}
	if o.TotalCreditLimit != nil {
		toSerialize["total_credit_limit"] = o.TotalCreditLimit
	}
	if o.AvailableCreditLimit != nil {
		toSerialize["available_credit_limit"] = o.AvailableCreditLimit
	}
	if o.MinimumPaymentDue != nil {
		toSerialize["minimum_payment_due"] = o.MinimumPaymentDue
	}
	if o.RewardsBalances != nil {
		toSerialize["rewards_balances"] = o.RewardsBalances
	}
	if o.UpdatedAt != nil {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	return json.Marshal(toSerialize)
}

type NullableCardTotal struct {
	value *CardTotal
	isSet bool
}

func (v NullableCardTotal) Get() *CardTotal {
	return v.value
}

func (v *NullableCardTotal) Set(val *CardTotal) {
	v.value = val
	v.isSet = true
}

func (v NullableCardTotal) IsSet() bool {
	return v.isSet
}

func (v *NullableCardTotal) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCardTotal(val *CardTotal) *NullableCardTotal {
	return &NullableCardTotal{value: val, isSet: true}
}

func (v NullableCardTotal) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCardTotal) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
