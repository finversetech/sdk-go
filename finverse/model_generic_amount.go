/*
Finverse Public

Documentation of the early finverse services

API version: 0.0.1
Contact: info@finverse.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package finverse

import (
	"encoding/json"
)

// GenericAmount struct for GenericAmount
type GenericAmount struct {
	Unit  *string `json:"unit,omitempty"`
	Value float32 `json:"value"`
	Raw   *string `json:"raw,omitempty"`
}

// NewGenericAmount instantiates a new GenericAmount object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGenericAmount(value float32) *GenericAmount {
	this := GenericAmount{}
	this.Value = value
	return &this
}

// NewGenericAmountWithDefaults instantiates a new GenericAmount object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGenericAmountWithDefaults() *GenericAmount {
	this := GenericAmount{}
	return &this
}

// GetUnit returns the Unit field value if set, zero value otherwise.
func (o *GenericAmount) GetUnit() string {
	if o == nil || o.Unit == nil {
		var ret string
		return ret
	}
	return *o.Unit
}

// GetUnitOk returns a tuple with the Unit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GenericAmount) GetUnitOk() (*string, bool) {
	if o == nil || o.Unit == nil {
		return nil, false
	}
	return o.Unit, true
}

// HasUnit returns a boolean if a field has been set.
func (o *GenericAmount) HasUnit() bool {
	if o != nil && o.Unit != nil {
		return true
	}

	return false
}

// SetUnit gets a reference to the given string and assigns it to the Unit field.
func (o *GenericAmount) SetUnit(v string) {
	o.Unit = &v
}

// GetValue returns the Value field value
func (o *GenericAmount) GetValue() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *GenericAmount) GetValueOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *GenericAmount) SetValue(v float32) {
	o.Value = v
}

// GetRaw returns the Raw field value if set, zero value otherwise.
func (o *GenericAmount) GetRaw() string {
	if o == nil || o.Raw == nil {
		var ret string
		return ret
	}
	return *o.Raw
}

// GetRawOk returns a tuple with the Raw field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GenericAmount) GetRawOk() (*string, bool) {
	if o == nil || o.Raw == nil {
		return nil, false
	}
	return o.Raw, true
}

// HasRaw returns a boolean if a field has been set.
func (o *GenericAmount) HasRaw() bool {
	if o != nil && o.Raw != nil {
		return true
	}

	return false
}

// SetRaw gets a reference to the given string and assigns it to the Raw field.
func (o *GenericAmount) SetRaw(v string) {
	o.Raw = &v
}

func (o GenericAmount) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Unit != nil {
		toSerialize["unit"] = o.Unit
	}
	if true {
		toSerialize["value"] = o.Value
	}
	if o.Raw != nil {
		toSerialize["raw"] = o.Raw
	}
	return json.Marshal(toSerialize)
}

type NullableGenericAmount struct {
	value *GenericAmount
	isSet bool
}

func (v NullableGenericAmount) Get() *GenericAmount {
	return v.value
}

func (v *NullableGenericAmount) Set(val *GenericAmount) {
	v.value = val
	v.isSet = true
}

func (v NullableGenericAmount) IsSet() bool {
	return v.isSet
}

func (v *NullableGenericAmount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGenericAmount(val *GenericAmount) *NullableGenericAmount {
	return &NullableGenericAmount{value: val, isSet: true}
}

func (v NullableGenericAmount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGenericAmount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
