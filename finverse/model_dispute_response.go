/*
Finverse Public

Documentation of the early finverse services

API version: 0.0.1
Contact: info@finverse.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package finverse

import (
	"encoding/json"
	"time"
)

// checks if the DisputeResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DisputeResponse{}

// DisputeResponse struct for DisputeResponse
type DisputeResponse struct {
	// The dispute id
	DisputeId *string `json:"dispute_id,omitempty"`
	// Amount to be disputed, in currency's smallest unit or “minor unit”, as defined in ISO 4217. For example, HKD 100.01 is represented as amount = 10001 (minor unit = cents). For currencies without minor units (e.g. VND, JPY), the amount is represented as is, without modification. For example, VND 15101 is represented as amount = 15101.
	Amount *int32 `json:"amount,omitempty"`
	// The currency of the balance
	Currency *string `json:"currency,omitempty"`
	// The name of the last event for this dispute
	LastEventName *string `json:"last_event_name,omitempty"`
	// The payment id
	PaymentId *string `json:"payment_id,omitempty"`
	// The payment processor handling the dispute
	PaymentProcessor                  *string `json:"payment_processor,omitempty"`
	PaymentProcessorMerchantReference *string `json:"payment_processor_merchant_reference,omitempty"`
	// The payment reference for the disputed transaction
	PaymentReference *string `json:"payment_reference,omitempty"`
	// The payment processor's payment reference
	PaymentProcessorPaymentReference *string                     `json:"payment_processor_payment_reference,omitempty"`
	CardDetails                      *DisputeResponseCardDetails `json:"card_details,omitempty"`
	// The payment processor's dispute reference
	PaymentProcessorDisputeReference *string `json:"payment_processor_dispute_reference,omitempty"`
	// The reason for the dispute as provided by the payment processor
	PaymentProcessorDisputeReason *string `json:"payment_processor_dispute_reason,omitempty"`
	// Acquirer Reference Number
	Arn *string `json:"arn,omitempty"`
	// The dispute code from the payment processor
	PaymentProcessorDisputeCode *string `json:"payment_processor_dispute_code,omitempty"`
	// Whether the dispute is defendable
	IsDefendable *bool `json:"is_defendable,omitempty"`
	// The status of the dispute
	DisputeStatus *string `json:"dispute_status,omitempty"`
	// The status of the dispute at the payment processor
	PaymentProcessorDisputeStatus *string `json:"payment_processor_dispute_status,omitempty"`
	// Whether the dispute was automatically defended
	IsAutoDefended *bool `json:"is_auto_defended,omitempty"`
	// Timestamp in ISO format (YYYY-MM-DDTHH:MM:SS.SSSZ)
	DefensePeriodDeadline *time.Time         `json:"defense_period_deadline,omitempty"`
	IssuerComments        *map[string]string `json:"issuer_comments,omitempty"`
	// Timestamp in ISO format (YYYY-MM-DDTHH:MM:SS.SSSZ)
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// Timestamp in ISO format (YYYY-MM-DDTHH:MM:SS.SSSZ)
	UpdatedAt            *time.Time `json:"updated_at,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DisputeResponse DisputeResponse

// NewDisputeResponse instantiates a new DisputeResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDisputeResponse() *DisputeResponse {
	this := DisputeResponse{}
	return &this
}

// NewDisputeResponseWithDefaults instantiates a new DisputeResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDisputeResponseWithDefaults() *DisputeResponse {
	this := DisputeResponse{}
	return &this
}

// GetDisputeId returns the DisputeId field value if set, zero value otherwise.
func (o *DisputeResponse) GetDisputeId() string {
	if o == nil || IsNil(o.DisputeId) {
		var ret string
		return ret
	}
	return *o.DisputeId
}

// GetDisputeIdOk returns a tuple with the DisputeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DisputeResponse) GetDisputeIdOk() (*string, bool) {
	if o == nil || IsNil(o.DisputeId) {
		return nil, false
	}
	return o.DisputeId, true
}

// HasDisputeId returns a boolean if a field has been set.
func (o *DisputeResponse) HasDisputeId() bool {
	if o != nil && !IsNil(o.DisputeId) {
		return true
	}

	return false
}

// SetDisputeId gets a reference to the given string and assigns it to the DisputeId field.
func (o *DisputeResponse) SetDisputeId(v string) {
	o.DisputeId = &v
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *DisputeResponse) GetAmount() int32 {
	if o == nil || IsNil(o.Amount) {
		var ret int32
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DisputeResponse) GetAmountOk() (*int32, bool) {
	if o == nil || IsNil(o.Amount) {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *DisputeResponse) HasAmount() bool {
	if o != nil && !IsNil(o.Amount) {
		return true
	}

	return false
}

// SetAmount gets a reference to the given int32 and assigns it to the Amount field.
func (o *DisputeResponse) SetAmount(v int32) {
	o.Amount = &v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *DisputeResponse) GetCurrency() string {
	if o == nil || IsNil(o.Currency) {
		var ret string
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DisputeResponse) GetCurrencyOk() (*string, bool) {
	if o == nil || IsNil(o.Currency) {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *DisputeResponse) HasCurrency() bool {
	if o != nil && !IsNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given string and assigns it to the Currency field.
func (o *DisputeResponse) SetCurrency(v string) {
	o.Currency = &v
}

// GetLastEventName returns the LastEventName field value if set, zero value otherwise.
func (o *DisputeResponse) GetLastEventName() string {
	if o == nil || IsNil(o.LastEventName) {
		var ret string
		return ret
	}
	return *o.LastEventName
}

// GetLastEventNameOk returns a tuple with the LastEventName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DisputeResponse) GetLastEventNameOk() (*string, bool) {
	if o == nil || IsNil(o.LastEventName) {
		return nil, false
	}
	return o.LastEventName, true
}

// HasLastEventName returns a boolean if a field has been set.
func (o *DisputeResponse) HasLastEventName() bool {
	if o != nil && !IsNil(o.LastEventName) {
		return true
	}

	return false
}

// SetLastEventName gets a reference to the given string and assigns it to the LastEventName field.
func (o *DisputeResponse) SetLastEventName(v string) {
	o.LastEventName = &v
}

// GetPaymentId returns the PaymentId field value if set, zero value otherwise.
func (o *DisputeResponse) GetPaymentId() string {
	if o == nil || IsNil(o.PaymentId) {
		var ret string
		return ret
	}
	return *o.PaymentId
}

// GetPaymentIdOk returns a tuple with the PaymentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DisputeResponse) GetPaymentIdOk() (*string, bool) {
	if o == nil || IsNil(o.PaymentId) {
		return nil, false
	}
	return o.PaymentId, true
}

// HasPaymentId returns a boolean if a field has been set.
func (o *DisputeResponse) HasPaymentId() bool {
	if o != nil && !IsNil(o.PaymentId) {
		return true
	}

	return false
}

// SetPaymentId gets a reference to the given string and assigns it to the PaymentId field.
func (o *DisputeResponse) SetPaymentId(v string) {
	o.PaymentId = &v
}

// GetPaymentProcessor returns the PaymentProcessor field value if set, zero value otherwise.
func (o *DisputeResponse) GetPaymentProcessor() string {
	if o == nil || IsNil(o.PaymentProcessor) {
		var ret string
		return ret
	}
	return *o.PaymentProcessor
}

// GetPaymentProcessorOk returns a tuple with the PaymentProcessor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DisputeResponse) GetPaymentProcessorOk() (*string, bool) {
	if o == nil || IsNil(o.PaymentProcessor) {
		return nil, false
	}
	return o.PaymentProcessor, true
}

// HasPaymentProcessor returns a boolean if a field has been set.
func (o *DisputeResponse) HasPaymentProcessor() bool {
	if o != nil && !IsNil(o.PaymentProcessor) {
		return true
	}

	return false
}

// SetPaymentProcessor gets a reference to the given string and assigns it to the PaymentProcessor field.
func (o *DisputeResponse) SetPaymentProcessor(v string) {
	o.PaymentProcessor = &v
}

// GetPaymentProcessorMerchantReference returns the PaymentProcessorMerchantReference field value if set, zero value otherwise.
func (o *DisputeResponse) GetPaymentProcessorMerchantReference() string {
	if o == nil || IsNil(o.PaymentProcessorMerchantReference) {
		var ret string
		return ret
	}
	return *o.PaymentProcessorMerchantReference
}

// GetPaymentProcessorMerchantReferenceOk returns a tuple with the PaymentProcessorMerchantReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DisputeResponse) GetPaymentProcessorMerchantReferenceOk() (*string, bool) {
	if o == nil || IsNil(o.PaymentProcessorMerchantReference) {
		return nil, false
	}
	return o.PaymentProcessorMerchantReference, true
}

// HasPaymentProcessorMerchantReference returns a boolean if a field has been set.
func (o *DisputeResponse) HasPaymentProcessorMerchantReference() bool {
	if o != nil && !IsNil(o.PaymentProcessorMerchantReference) {
		return true
	}

	return false
}

// SetPaymentProcessorMerchantReference gets a reference to the given string and assigns it to the PaymentProcessorMerchantReference field.
func (o *DisputeResponse) SetPaymentProcessorMerchantReference(v string) {
	o.PaymentProcessorMerchantReference = &v
}

// GetPaymentReference returns the PaymentReference field value if set, zero value otherwise.
func (o *DisputeResponse) GetPaymentReference() string {
	if o == nil || IsNil(o.PaymentReference) {
		var ret string
		return ret
	}
	return *o.PaymentReference
}

// GetPaymentReferenceOk returns a tuple with the PaymentReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DisputeResponse) GetPaymentReferenceOk() (*string, bool) {
	if o == nil || IsNil(o.PaymentReference) {
		return nil, false
	}
	return o.PaymentReference, true
}

// HasPaymentReference returns a boolean if a field has been set.
func (o *DisputeResponse) HasPaymentReference() bool {
	if o != nil && !IsNil(o.PaymentReference) {
		return true
	}

	return false
}

// SetPaymentReference gets a reference to the given string and assigns it to the PaymentReference field.
func (o *DisputeResponse) SetPaymentReference(v string) {
	o.PaymentReference = &v
}

// GetPaymentProcessorPaymentReference returns the PaymentProcessorPaymentReference field value if set, zero value otherwise.
func (o *DisputeResponse) GetPaymentProcessorPaymentReference() string {
	if o == nil || IsNil(o.PaymentProcessorPaymentReference) {
		var ret string
		return ret
	}
	return *o.PaymentProcessorPaymentReference
}

// GetPaymentProcessorPaymentReferenceOk returns a tuple with the PaymentProcessorPaymentReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DisputeResponse) GetPaymentProcessorPaymentReferenceOk() (*string, bool) {
	if o == nil || IsNil(o.PaymentProcessorPaymentReference) {
		return nil, false
	}
	return o.PaymentProcessorPaymentReference, true
}

// HasPaymentProcessorPaymentReference returns a boolean if a field has been set.
func (o *DisputeResponse) HasPaymentProcessorPaymentReference() bool {
	if o != nil && !IsNil(o.PaymentProcessorPaymentReference) {
		return true
	}

	return false
}

// SetPaymentProcessorPaymentReference gets a reference to the given string and assigns it to the PaymentProcessorPaymentReference field.
func (o *DisputeResponse) SetPaymentProcessorPaymentReference(v string) {
	o.PaymentProcessorPaymentReference = &v
}

// GetCardDetails returns the CardDetails field value if set, zero value otherwise.
func (o *DisputeResponse) GetCardDetails() DisputeResponseCardDetails {
	if o == nil || IsNil(o.CardDetails) {
		var ret DisputeResponseCardDetails
		return ret
	}
	return *o.CardDetails
}

// GetCardDetailsOk returns a tuple with the CardDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DisputeResponse) GetCardDetailsOk() (*DisputeResponseCardDetails, bool) {
	if o == nil || IsNil(o.CardDetails) {
		return nil, false
	}
	return o.CardDetails, true
}

// HasCardDetails returns a boolean if a field has been set.
func (o *DisputeResponse) HasCardDetails() bool {
	if o != nil && !IsNil(o.CardDetails) {
		return true
	}

	return false
}

// SetCardDetails gets a reference to the given DisputeResponseCardDetails and assigns it to the CardDetails field.
func (o *DisputeResponse) SetCardDetails(v DisputeResponseCardDetails) {
	o.CardDetails = &v
}

// GetPaymentProcessorDisputeReference returns the PaymentProcessorDisputeReference field value if set, zero value otherwise.
func (o *DisputeResponse) GetPaymentProcessorDisputeReference() string {
	if o == nil || IsNil(o.PaymentProcessorDisputeReference) {
		var ret string
		return ret
	}
	return *o.PaymentProcessorDisputeReference
}

// GetPaymentProcessorDisputeReferenceOk returns a tuple with the PaymentProcessorDisputeReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DisputeResponse) GetPaymentProcessorDisputeReferenceOk() (*string, bool) {
	if o == nil || IsNil(o.PaymentProcessorDisputeReference) {
		return nil, false
	}
	return o.PaymentProcessorDisputeReference, true
}

// HasPaymentProcessorDisputeReference returns a boolean if a field has been set.
func (o *DisputeResponse) HasPaymentProcessorDisputeReference() bool {
	if o != nil && !IsNil(o.PaymentProcessorDisputeReference) {
		return true
	}

	return false
}

// SetPaymentProcessorDisputeReference gets a reference to the given string and assigns it to the PaymentProcessorDisputeReference field.
func (o *DisputeResponse) SetPaymentProcessorDisputeReference(v string) {
	o.PaymentProcessorDisputeReference = &v
}

// GetPaymentProcessorDisputeReason returns the PaymentProcessorDisputeReason field value if set, zero value otherwise.
func (o *DisputeResponse) GetPaymentProcessorDisputeReason() string {
	if o == nil || IsNil(o.PaymentProcessorDisputeReason) {
		var ret string
		return ret
	}
	return *o.PaymentProcessorDisputeReason
}

// GetPaymentProcessorDisputeReasonOk returns a tuple with the PaymentProcessorDisputeReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DisputeResponse) GetPaymentProcessorDisputeReasonOk() (*string, bool) {
	if o == nil || IsNil(o.PaymentProcessorDisputeReason) {
		return nil, false
	}
	return o.PaymentProcessorDisputeReason, true
}

// HasPaymentProcessorDisputeReason returns a boolean if a field has been set.
func (o *DisputeResponse) HasPaymentProcessorDisputeReason() bool {
	if o != nil && !IsNil(o.PaymentProcessorDisputeReason) {
		return true
	}

	return false
}

// SetPaymentProcessorDisputeReason gets a reference to the given string and assigns it to the PaymentProcessorDisputeReason field.
func (o *DisputeResponse) SetPaymentProcessorDisputeReason(v string) {
	o.PaymentProcessorDisputeReason = &v
}

// GetArn returns the Arn field value if set, zero value otherwise.
func (o *DisputeResponse) GetArn() string {
	if o == nil || IsNil(o.Arn) {
		var ret string
		return ret
	}
	return *o.Arn
}

// GetArnOk returns a tuple with the Arn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DisputeResponse) GetArnOk() (*string, bool) {
	if o == nil || IsNil(o.Arn) {
		return nil, false
	}
	return o.Arn, true
}

// HasArn returns a boolean if a field has been set.
func (o *DisputeResponse) HasArn() bool {
	if o != nil && !IsNil(o.Arn) {
		return true
	}

	return false
}

// SetArn gets a reference to the given string and assigns it to the Arn field.
func (o *DisputeResponse) SetArn(v string) {
	o.Arn = &v
}

// GetPaymentProcessorDisputeCode returns the PaymentProcessorDisputeCode field value if set, zero value otherwise.
func (o *DisputeResponse) GetPaymentProcessorDisputeCode() string {
	if o == nil || IsNil(o.PaymentProcessorDisputeCode) {
		var ret string
		return ret
	}
	return *o.PaymentProcessorDisputeCode
}

// GetPaymentProcessorDisputeCodeOk returns a tuple with the PaymentProcessorDisputeCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DisputeResponse) GetPaymentProcessorDisputeCodeOk() (*string, bool) {
	if o == nil || IsNil(o.PaymentProcessorDisputeCode) {
		return nil, false
	}
	return o.PaymentProcessorDisputeCode, true
}

// HasPaymentProcessorDisputeCode returns a boolean if a field has been set.
func (o *DisputeResponse) HasPaymentProcessorDisputeCode() bool {
	if o != nil && !IsNil(o.PaymentProcessorDisputeCode) {
		return true
	}

	return false
}

// SetPaymentProcessorDisputeCode gets a reference to the given string and assigns it to the PaymentProcessorDisputeCode field.
func (o *DisputeResponse) SetPaymentProcessorDisputeCode(v string) {
	o.PaymentProcessorDisputeCode = &v
}

// GetIsDefendable returns the IsDefendable field value if set, zero value otherwise.
func (o *DisputeResponse) GetIsDefendable() bool {
	if o == nil || IsNil(o.IsDefendable) {
		var ret bool
		return ret
	}
	return *o.IsDefendable
}

// GetIsDefendableOk returns a tuple with the IsDefendable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DisputeResponse) GetIsDefendableOk() (*bool, bool) {
	if o == nil || IsNil(o.IsDefendable) {
		return nil, false
	}
	return o.IsDefendable, true
}

// HasIsDefendable returns a boolean if a field has been set.
func (o *DisputeResponse) HasIsDefendable() bool {
	if o != nil && !IsNil(o.IsDefendable) {
		return true
	}

	return false
}

// SetIsDefendable gets a reference to the given bool and assigns it to the IsDefendable field.
func (o *DisputeResponse) SetIsDefendable(v bool) {
	o.IsDefendable = &v
}

// GetDisputeStatus returns the DisputeStatus field value if set, zero value otherwise.
func (o *DisputeResponse) GetDisputeStatus() string {
	if o == nil || IsNil(o.DisputeStatus) {
		var ret string
		return ret
	}
	return *o.DisputeStatus
}

// GetDisputeStatusOk returns a tuple with the DisputeStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DisputeResponse) GetDisputeStatusOk() (*string, bool) {
	if o == nil || IsNil(o.DisputeStatus) {
		return nil, false
	}
	return o.DisputeStatus, true
}

// HasDisputeStatus returns a boolean if a field has been set.
func (o *DisputeResponse) HasDisputeStatus() bool {
	if o != nil && !IsNil(o.DisputeStatus) {
		return true
	}

	return false
}

// SetDisputeStatus gets a reference to the given string and assigns it to the DisputeStatus field.
func (o *DisputeResponse) SetDisputeStatus(v string) {
	o.DisputeStatus = &v
}

// GetPaymentProcessorDisputeStatus returns the PaymentProcessorDisputeStatus field value if set, zero value otherwise.
func (o *DisputeResponse) GetPaymentProcessorDisputeStatus() string {
	if o == nil || IsNil(o.PaymentProcessorDisputeStatus) {
		var ret string
		return ret
	}
	return *o.PaymentProcessorDisputeStatus
}

// GetPaymentProcessorDisputeStatusOk returns a tuple with the PaymentProcessorDisputeStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DisputeResponse) GetPaymentProcessorDisputeStatusOk() (*string, bool) {
	if o == nil || IsNil(o.PaymentProcessorDisputeStatus) {
		return nil, false
	}
	return o.PaymentProcessorDisputeStatus, true
}

// HasPaymentProcessorDisputeStatus returns a boolean if a field has been set.
func (o *DisputeResponse) HasPaymentProcessorDisputeStatus() bool {
	if o != nil && !IsNil(o.PaymentProcessorDisputeStatus) {
		return true
	}

	return false
}

// SetPaymentProcessorDisputeStatus gets a reference to the given string and assigns it to the PaymentProcessorDisputeStatus field.
func (o *DisputeResponse) SetPaymentProcessorDisputeStatus(v string) {
	o.PaymentProcessorDisputeStatus = &v
}

// GetIsAutoDefended returns the IsAutoDefended field value if set, zero value otherwise.
func (o *DisputeResponse) GetIsAutoDefended() bool {
	if o == nil || IsNil(o.IsAutoDefended) {
		var ret bool
		return ret
	}
	return *o.IsAutoDefended
}

// GetIsAutoDefendedOk returns a tuple with the IsAutoDefended field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DisputeResponse) GetIsAutoDefendedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsAutoDefended) {
		return nil, false
	}
	return o.IsAutoDefended, true
}

// HasIsAutoDefended returns a boolean if a field has been set.
func (o *DisputeResponse) HasIsAutoDefended() bool {
	if o != nil && !IsNil(o.IsAutoDefended) {
		return true
	}

	return false
}

// SetIsAutoDefended gets a reference to the given bool and assigns it to the IsAutoDefended field.
func (o *DisputeResponse) SetIsAutoDefended(v bool) {
	o.IsAutoDefended = &v
}

// GetDefensePeriodDeadline returns the DefensePeriodDeadline field value if set, zero value otherwise.
func (o *DisputeResponse) GetDefensePeriodDeadline() time.Time {
	if o == nil || IsNil(o.DefensePeriodDeadline) {
		var ret time.Time
		return ret
	}
	return *o.DefensePeriodDeadline
}

// GetDefensePeriodDeadlineOk returns a tuple with the DefensePeriodDeadline field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DisputeResponse) GetDefensePeriodDeadlineOk() (*time.Time, bool) {
	if o == nil || IsNil(o.DefensePeriodDeadline) {
		return nil, false
	}
	return o.DefensePeriodDeadline, true
}

// HasDefensePeriodDeadline returns a boolean if a field has been set.
func (o *DisputeResponse) HasDefensePeriodDeadline() bool {
	if o != nil && !IsNil(o.DefensePeriodDeadline) {
		return true
	}

	return false
}

// SetDefensePeriodDeadline gets a reference to the given time.Time and assigns it to the DefensePeriodDeadline field.
func (o *DisputeResponse) SetDefensePeriodDeadline(v time.Time) {
	o.DefensePeriodDeadline = &v
}

// GetIssuerComments returns the IssuerComments field value if set, zero value otherwise.
func (o *DisputeResponse) GetIssuerComments() map[string]string {
	if o == nil || IsNil(o.IssuerComments) {
		var ret map[string]string
		return ret
	}
	return *o.IssuerComments
}

// GetIssuerCommentsOk returns a tuple with the IssuerComments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DisputeResponse) GetIssuerCommentsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.IssuerComments) {
		return nil, false
	}
	return o.IssuerComments, true
}

// HasIssuerComments returns a boolean if a field has been set.
func (o *DisputeResponse) HasIssuerComments() bool {
	if o != nil && !IsNil(o.IssuerComments) {
		return true
	}

	return false
}

// SetIssuerComments gets a reference to the given map[string]string and assigns it to the IssuerComments field.
func (o *DisputeResponse) SetIssuerComments(v map[string]string) {
	o.IssuerComments = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *DisputeResponse) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DisputeResponse) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *DisputeResponse) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *DisputeResponse) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *DisputeResponse) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DisputeResponse) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *DisputeResponse) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *DisputeResponse) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

func (o DisputeResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DisputeResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DisputeId) {
		toSerialize["dispute_id"] = o.DisputeId
	}
	if !IsNil(o.Amount) {
		toSerialize["amount"] = o.Amount
	}
	if !IsNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	if !IsNil(o.LastEventName) {
		toSerialize["last_event_name"] = o.LastEventName
	}
	if !IsNil(o.PaymentId) {
		toSerialize["payment_id"] = o.PaymentId
	}
	if !IsNil(o.PaymentProcessor) {
		toSerialize["payment_processor"] = o.PaymentProcessor
	}
	if !IsNil(o.PaymentProcessorMerchantReference) {
		toSerialize["payment_processor_merchant_reference"] = o.PaymentProcessorMerchantReference
	}
	if !IsNil(o.PaymentReference) {
		toSerialize["payment_reference"] = o.PaymentReference
	}
	if !IsNil(o.PaymentProcessorPaymentReference) {
		toSerialize["payment_processor_payment_reference"] = o.PaymentProcessorPaymentReference
	}
	if !IsNil(o.CardDetails) {
		toSerialize["card_details"] = o.CardDetails
	}
	if !IsNil(o.PaymentProcessorDisputeReference) {
		toSerialize["payment_processor_dispute_reference"] = o.PaymentProcessorDisputeReference
	}
	if !IsNil(o.PaymentProcessorDisputeReason) {
		toSerialize["payment_processor_dispute_reason"] = o.PaymentProcessorDisputeReason
	}
	if !IsNil(o.Arn) {
		toSerialize["arn"] = o.Arn
	}
	if !IsNil(o.PaymentProcessorDisputeCode) {
		toSerialize["payment_processor_dispute_code"] = o.PaymentProcessorDisputeCode
	}
	if !IsNil(o.IsDefendable) {
		toSerialize["is_defendable"] = o.IsDefendable
	}
	if !IsNil(o.DisputeStatus) {
		toSerialize["dispute_status"] = o.DisputeStatus
	}
	if !IsNil(o.PaymentProcessorDisputeStatus) {
		toSerialize["payment_processor_dispute_status"] = o.PaymentProcessorDisputeStatus
	}
	if !IsNil(o.IsAutoDefended) {
		toSerialize["is_auto_defended"] = o.IsAutoDefended
	}
	if !IsNil(o.DefensePeriodDeadline) {
		toSerialize["defense_period_deadline"] = o.DefensePeriodDeadline
	}
	if !IsNil(o.IssuerComments) {
		toSerialize["issuer_comments"] = o.IssuerComments
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DisputeResponse) UnmarshalJSON(data []byte) (err error) {
	varDisputeResponse := _DisputeResponse{}

	err = json.Unmarshal(data, &varDisputeResponse)

	if err != nil {
		return err
	}

	*o = DisputeResponse(varDisputeResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "dispute_id")
		delete(additionalProperties, "amount")
		delete(additionalProperties, "currency")
		delete(additionalProperties, "last_event_name")
		delete(additionalProperties, "payment_id")
		delete(additionalProperties, "payment_processor")
		delete(additionalProperties, "payment_processor_merchant_reference")
		delete(additionalProperties, "payment_reference")
		delete(additionalProperties, "payment_processor_payment_reference")
		delete(additionalProperties, "card_details")
		delete(additionalProperties, "payment_processor_dispute_reference")
		delete(additionalProperties, "payment_processor_dispute_reason")
		delete(additionalProperties, "arn")
		delete(additionalProperties, "payment_processor_dispute_code")
		delete(additionalProperties, "is_defendable")
		delete(additionalProperties, "dispute_status")
		delete(additionalProperties, "payment_processor_dispute_status")
		delete(additionalProperties, "is_auto_defended")
		delete(additionalProperties, "defense_period_deadline")
		delete(additionalProperties, "issuer_comments")
		delete(additionalProperties, "created_at")
		delete(additionalProperties, "updated_at")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDisputeResponse struct {
	value *DisputeResponse
	isSet bool
}

func (v NullableDisputeResponse) Get() *DisputeResponse {
	return v.value
}

func (v *NullableDisputeResponse) Set(val *DisputeResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableDisputeResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableDisputeResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDisputeResponse(val *DisputeResponse) *NullableDisputeResponse {
	return &NullableDisputeResponse{value: val, isSet: true}
}

func (v NullableDisputeResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDisputeResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
