/*
Finverse Public

Documentation of the early finverse services

API version: 0.0.1
Contact: info@finverse.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package finverse

import (
	"encoding/json"
	"time"
)

// Transaction struct for Transaction
type Transaction struct {
	TransactionId    *string `json:"transaction_id,omitempty"`
	AccountId        *string `json:"account_id,omitempty"`
	TransactionState *string `json:"transaction_state,omitempty"`
	TransactionType  *string `json:"transaction_type,omitempty"`
	// (Deprecated)
	Category *string `json:"category,omitempty"`
	// (Deprecated)
	CategoryId   *string `json:"category_id,omitempty"`
	MerchantName *string `json:"merchant_name,omitempty"`
	Description  *string `json:"description,omitempty"`
	Location     *string `json:"location,omitempty"`
	IsPending    bool    `json:"is_pending"`
	Status       *string `json:"status,omitempty"`
	// YYYY-MM-DD
	PostedDate *string         `json:"posted_date,omitempty"`
	Amount     *CurrencyAmount `json:"amount,omitempty"`
	// Transaction Details
	TransactionDetails map[string]interface{} `json:"transaction_details,omitempty"`
	CreatedAt          *time.Time             `json:"created_at,omitempty"`
	UpdatedAt          *time.Time             `json:"updated_at,omitempty"`
	// Array of category labels
	Categories []string `json:"categories,omitempty"`
	// Optional field indicating when the transaction happened
	TransactionTime NullableTime `json:"transaction_time,omitempty"`
	// Transaction reference provided by the bank
	BankReference       *string               `json:"bank_reference,omitempty"`
	CategoryPredictions []CategoryPredictions `json:"category_predictions,omitempty"`
}

// NewTransaction instantiates a new Transaction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransaction(isPending bool) *Transaction {
	this := Transaction{}
	this.IsPending = isPending
	return &this
}

// NewTransactionWithDefaults instantiates a new Transaction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionWithDefaults() *Transaction {
	this := Transaction{}
	return &this
}

// GetTransactionId returns the TransactionId field value if set, zero value otherwise.
func (o *Transaction) GetTransactionId() string {
	if o == nil || o.TransactionId == nil {
		var ret string
		return ret
	}
	return *o.TransactionId
}

// GetTransactionIdOk returns a tuple with the TransactionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetTransactionIdOk() (*string, bool) {
	if o == nil || o.TransactionId == nil {
		return nil, false
	}
	return o.TransactionId, true
}

// HasTransactionId returns a boolean if a field has been set.
func (o *Transaction) HasTransactionId() bool {
	if o != nil && o.TransactionId != nil {
		return true
	}

	return false
}

// SetTransactionId gets a reference to the given string and assigns it to the TransactionId field.
func (o *Transaction) SetTransactionId(v string) {
	o.TransactionId = &v
}

// GetAccountId returns the AccountId field value if set, zero value otherwise.
func (o *Transaction) GetAccountId() string {
	if o == nil || o.AccountId == nil {
		var ret string
		return ret
	}
	return *o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetAccountIdOk() (*string, bool) {
	if o == nil || o.AccountId == nil {
		return nil, false
	}
	return o.AccountId, true
}

// HasAccountId returns a boolean if a field has been set.
func (o *Transaction) HasAccountId() bool {
	if o != nil && o.AccountId != nil {
		return true
	}

	return false
}

// SetAccountId gets a reference to the given string and assigns it to the AccountId field.
func (o *Transaction) SetAccountId(v string) {
	o.AccountId = &v
}

// GetTransactionState returns the TransactionState field value if set, zero value otherwise.
func (o *Transaction) GetTransactionState() string {
	if o == nil || o.TransactionState == nil {
		var ret string
		return ret
	}
	return *o.TransactionState
}

// GetTransactionStateOk returns a tuple with the TransactionState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetTransactionStateOk() (*string, bool) {
	if o == nil || o.TransactionState == nil {
		return nil, false
	}
	return o.TransactionState, true
}

// HasTransactionState returns a boolean if a field has been set.
func (o *Transaction) HasTransactionState() bool {
	if o != nil && o.TransactionState != nil {
		return true
	}

	return false
}

// SetTransactionState gets a reference to the given string and assigns it to the TransactionState field.
func (o *Transaction) SetTransactionState(v string) {
	o.TransactionState = &v
}

// GetTransactionType returns the TransactionType field value if set, zero value otherwise.
func (o *Transaction) GetTransactionType() string {
	if o == nil || o.TransactionType == nil {
		var ret string
		return ret
	}
	return *o.TransactionType
}

// GetTransactionTypeOk returns a tuple with the TransactionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetTransactionTypeOk() (*string, bool) {
	if o == nil || o.TransactionType == nil {
		return nil, false
	}
	return o.TransactionType, true
}

// HasTransactionType returns a boolean if a field has been set.
func (o *Transaction) HasTransactionType() bool {
	if o != nil && o.TransactionType != nil {
		return true
	}

	return false
}

// SetTransactionType gets a reference to the given string and assigns it to the TransactionType field.
func (o *Transaction) SetTransactionType(v string) {
	o.TransactionType = &v
}

// GetCategory returns the Category field value if set, zero value otherwise.
func (o *Transaction) GetCategory() string {
	if o == nil || o.Category == nil {
		var ret string
		return ret
	}
	return *o.Category
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetCategoryOk() (*string, bool) {
	if o == nil || o.Category == nil {
		return nil, false
	}
	return o.Category, true
}

// HasCategory returns a boolean if a field has been set.
func (o *Transaction) HasCategory() bool {
	if o != nil && o.Category != nil {
		return true
	}

	return false
}

// SetCategory gets a reference to the given string and assigns it to the Category field.
func (o *Transaction) SetCategory(v string) {
	o.Category = &v
}

// GetCategoryId returns the CategoryId field value if set, zero value otherwise.
func (o *Transaction) GetCategoryId() string {
	if o == nil || o.CategoryId == nil {
		var ret string
		return ret
	}
	return *o.CategoryId
}

// GetCategoryIdOk returns a tuple with the CategoryId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetCategoryIdOk() (*string, bool) {
	if o == nil || o.CategoryId == nil {
		return nil, false
	}
	return o.CategoryId, true
}

// HasCategoryId returns a boolean if a field has been set.
func (o *Transaction) HasCategoryId() bool {
	if o != nil && o.CategoryId != nil {
		return true
	}

	return false
}

// SetCategoryId gets a reference to the given string and assigns it to the CategoryId field.
func (o *Transaction) SetCategoryId(v string) {
	o.CategoryId = &v
}

// GetMerchantName returns the MerchantName field value if set, zero value otherwise.
func (o *Transaction) GetMerchantName() string {
	if o == nil || o.MerchantName == nil {
		var ret string
		return ret
	}
	return *o.MerchantName
}

// GetMerchantNameOk returns a tuple with the MerchantName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetMerchantNameOk() (*string, bool) {
	if o == nil || o.MerchantName == nil {
		return nil, false
	}
	return o.MerchantName, true
}

// HasMerchantName returns a boolean if a field has been set.
func (o *Transaction) HasMerchantName() bool {
	if o != nil && o.MerchantName != nil {
		return true
	}

	return false
}

// SetMerchantName gets a reference to the given string and assigns it to the MerchantName field.
func (o *Transaction) SetMerchantName(v string) {
	o.MerchantName = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Transaction) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Transaction) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Transaction) SetDescription(v string) {
	o.Description = &v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *Transaction) GetLocation() string {
	if o == nil || o.Location == nil {
		var ret string
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetLocationOk() (*string, bool) {
	if o == nil || o.Location == nil {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *Transaction) HasLocation() bool {
	if o != nil && o.Location != nil {
		return true
	}

	return false
}

// SetLocation gets a reference to the given string and assigns it to the Location field.
func (o *Transaction) SetLocation(v string) {
	o.Location = &v
}

// GetIsPending returns the IsPending field value
func (o *Transaction) GetIsPending() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsPending
}

// GetIsPendingOk returns a tuple with the IsPending field value
// and a boolean to check if the value has been set.
func (o *Transaction) GetIsPendingOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsPending, true
}

// SetIsPending sets field value
func (o *Transaction) SetIsPending(v bool) {
	o.IsPending = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Transaction) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Transaction) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *Transaction) SetStatus(v string) {
	o.Status = &v
}

// GetPostedDate returns the PostedDate field value if set, zero value otherwise.
func (o *Transaction) GetPostedDate() string {
	if o == nil || o.PostedDate == nil {
		var ret string
		return ret
	}
	return *o.PostedDate
}

// GetPostedDateOk returns a tuple with the PostedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetPostedDateOk() (*string, bool) {
	if o == nil || o.PostedDate == nil {
		return nil, false
	}
	return o.PostedDate, true
}

// HasPostedDate returns a boolean if a field has been set.
func (o *Transaction) HasPostedDate() bool {
	if o != nil && o.PostedDate != nil {
		return true
	}

	return false
}

// SetPostedDate gets a reference to the given string and assigns it to the PostedDate field.
func (o *Transaction) SetPostedDate(v string) {
	o.PostedDate = &v
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *Transaction) GetAmount() CurrencyAmount {
	if o == nil || o.Amount == nil {
		var ret CurrencyAmount
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetAmountOk() (*CurrencyAmount, bool) {
	if o == nil || o.Amount == nil {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *Transaction) HasAmount() bool {
	if o != nil && o.Amount != nil {
		return true
	}

	return false
}

// SetAmount gets a reference to the given CurrencyAmount and assigns it to the Amount field.
func (o *Transaction) SetAmount(v CurrencyAmount) {
	o.Amount = &v
}

// GetTransactionDetails returns the TransactionDetails field value if set, zero value otherwise.
func (o *Transaction) GetTransactionDetails() map[string]interface{} {
	if o == nil || o.TransactionDetails == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.TransactionDetails
}

// GetTransactionDetailsOk returns a tuple with the TransactionDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetTransactionDetailsOk() (map[string]interface{}, bool) {
	if o == nil || o.TransactionDetails == nil {
		return nil, false
	}
	return o.TransactionDetails, true
}

// HasTransactionDetails returns a boolean if a field has been set.
func (o *Transaction) HasTransactionDetails() bool {
	if o != nil && o.TransactionDetails != nil {
		return true
	}

	return false
}

// SetTransactionDetails gets a reference to the given map[string]interface{} and assigns it to the TransactionDetails field.
func (o *Transaction) SetTransactionDetails(v map[string]interface{}) {
	o.TransactionDetails = v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *Transaction) GetCreatedAt() time.Time {
	if o == nil || o.CreatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || o.CreatedAt == nil {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *Transaction) HasCreatedAt() bool {
	if o != nil && o.CreatedAt != nil {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *Transaction) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *Transaction) GetUpdatedAt() time.Time {
	if o == nil || o.UpdatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || o.UpdatedAt == nil {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *Transaction) HasUpdatedAt() bool {
	if o != nil && o.UpdatedAt != nil {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *Transaction) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetCategories returns the Categories field value if set, zero value otherwise.
func (o *Transaction) GetCategories() []string {
	if o == nil || o.Categories == nil {
		var ret []string
		return ret
	}
	return o.Categories
}

// GetCategoriesOk returns a tuple with the Categories field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetCategoriesOk() ([]string, bool) {
	if o == nil || o.Categories == nil {
		return nil, false
	}
	return o.Categories, true
}

// HasCategories returns a boolean if a field has been set.
func (o *Transaction) HasCategories() bool {
	if o != nil && o.Categories != nil {
		return true
	}

	return false
}

// SetCategories gets a reference to the given []string and assigns it to the Categories field.
func (o *Transaction) SetCategories(v []string) {
	o.Categories = v
}

// GetTransactionTime returns the TransactionTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Transaction) GetTransactionTime() time.Time {
	if o == nil || o.TransactionTime.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.TransactionTime.Get()
}

// GetTransactionTimeOk returns a tuple with the TransactionTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Transaction) GetTransactionTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.TransactionTime.Get(), o.TransactionTime.IsSet()
}

// HasTransactionTime returns a boolean if a field has been set.
func (o *Transaction) HasTransactionTime() bool {
	if o != nil && o.TransactionTime.IsSet() {
		return true
	}

	return false
}

// SetTransactionTime gets a reference to the given NullableTime and assigns it to the TransactionTime field.
func (o *Transaction) SetTransactionTime(v time.Time) {
	o.TransactionTime.Set(&v)
}

// SetTransactionTimeNil sets the value for TransactionTime to be an explicit nil
func (o *Transaction) SetTransactionTimeNil() {
	o.TransactionTime.Set(nil)
}

// UnsetTransactionTime ensures that no value is present for TransactionTime, not even an explicit nil
func (o *Transaction) UnsetTransactionTime() {
	o.TransactionTime.Unset()
}

// GetBankReference returns the BankReference field value if set, zero value otherwise.
func (o *Transaction) GetBankReference() string {
	if o == nil || o.BankReference == nil {
		var ret string
		return ret
	}
	return *o.BankReference
}

// GetBankReferenceOk returns a tuple with the BankReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetBankReferenceOk() (*string, bool) {
	if o == nil || o.BankReference == nil {
		return nil, false
	}
	return o.BankReference, true
}

// HasBankReference returns a boolean if a field has been set.
func (o *Transaction) HasBankReference() bool {
	if o != nil && o.BankReference != nil {
		return true
	}

	return false
}

// SetBankReference gets a reference to the given string and assigns it to the BankReference field.
func (o *Transaction) SetBankReference(v string) {
	o.BankReference = &v
}

// GetCategoryPredictions returns the CategoryPredictions field value if set, zero value otherwise.
func (o *Transaction) GetCategoryPredictions() []CategoryPredictions {
	if o == nil || o.CategoryPredictions == nil {
		var ret []CategoryPredictions
		return ret
	}
	return o.CategoryPredictions
}

// GetCategoryPredictionsOk returns a tuple with the CategoryPredictions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetCategoryPredictionsOk() ([]CategoryPredictions, bool) {
	if o == nil || o.CategoryPredictions == nil {
		return nil, false
	}
	return o.CategoryPredictions, true
}

// HasCategoryPredictions returns a boolean if a field has been set.
func (o *Transaction) HasCategoryPredictions() bool {
	if o != nil && o.CategoryPredictions != nil {
		return true
	}

	return false
}

// SetCategoryPredictions gets a reference to the given []CategoryPredictions and assigns it to the CategoryPredictions field.
func (o *Transaction) SetCategoryPredictions(v []CategoryPredictions) {
	o.CategoryPredictions = v
}

func (o Transaction) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.TransactionId != nil {
		toSerialize["transaction_id"] = o.TransactionId
	}
	if o.AccountId != nil {
		toSerialize["account_id"] = o.AccountId
	}
	if o.TransactionState != nil {
		toSerialize["transaction_state"] = o.TransactionState
	}
	if o.TransactionType != nil {
		toSerialize["transaction_type"] = o.TransactionType
	}
	if o.Category != nil {
		toSerialize["category"] = o.Category
	}
	if o.CategoryId != nil {
		toSerialize["category_id"] = o.CategoryId
	}
	if o.MerchantName != nil {
		toSerialize["merchant_name"] = o.MerchantName
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.Location != nil {
		toSerialize["location"] = o.Location
	}
	if true {
		toSerialize["is_pending"] = o.IsPending
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.PostedDate != nil {
		toSerialize["posted_date"] = o.PostedDate
	}
	if o.Amount != nil {
		toSerialize["amount"] = o.Amount
	}
	if o.TransactionDetails != nil {
		toSerialize["transaction_details"] = o.TransactionDetails
	}
	if o.CreatedAt != nil {
		toSerialize["created_at"] = o.CreatedAt
	}
	if o.UpdatedAt != nil {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if o.Categories != nil {
		toSerialize["categories"] = o.Categories
	}
	if o.TransactionTime.IsSet() {
		toSerialize["transaction_time"] = o.TransactionTime.Get()
	}
	if o.BankReference != nil {
		toSerialize["bank_reference"] = o.BankReference
	}
	if o.CategoryPredictions != nil {
		toSerialize["category_predictions"] = o.CategoryPredictions
	}
	return json.Marshal(toSerialize)
}

type NullableTransaction struct {
	value *Transaction
	isSet bool
}

func (v NullableTransaction) Get() *Transaction {
	return v.value
}

func (v *NullableTransaction) Set(val *Transaction) {
	v.value = val
	v.isSet = true
}

func (v NullableTransaction) IsSet() bool {
	return v.isSet
}

func (v *NullableTransaction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransaction(val *Transaction) *NullableTransaction {
	return &NullableTransaction{value: val, isSet: true}
}

func (v NullableTransaction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransaction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
