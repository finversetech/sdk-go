/*
Finverse Public

Documentation of the early finverse services

API version: 0.0.1
Contact: info@finverse.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package finverse

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the LinkRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LinkRequest{}

// LinkRequest struct for LinkRequest
type LinkRequest struct {
	InstitutionId   string `json:"institution_id"`
	StoreCredential bool   `json:"store_credential"`
	// this is a mandatory field
	Consent NullableBool `json:"consent,omitempty"`
	// products that is requested
	ProductsRequested []string `json:"products_requested,omitempty"`
	// The identifier returned after creating payment instruction
	PaymentInstructionId *string `json:"payment_instruction_id,omitempty"`
}

type _LinkRequest LinkRequest

// NewLinkRequest instantiates a new LinkRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLinkRequest(institutionId string, storeCredential bool) *LinkRequest {
	this := LinkRequest{}
	this.InstitutionId = institutionId
	this.StoreCredential = storeCredential
	return &this
}

// NewLinkRequestWithDefaults instantiates a new LinkRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLinkRequestWithDefaults() *LinkRequest {
	this := LinkRequest{}
	return &this
}

// GetInstitutionId returns the InstitutionId field value
func (o *LinkRequest) GetInstitutionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.InstitutionId
}

// GetInstitutionIdOk returns a tuple with the InstitutionId field value
// and a boolean to check if the value has been set.
func (o *LinkRequest) GetInstitutionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InstitutionId, true
}

// SetInstitutionId sets field value
func (o *LinkRequest) SetInstitutionId(v string) {
	o.InstitutionId = v
}

// GetStoreCredential returns the StoreCredential field value
func (o *LinkRequest) GetStoreCredential() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.StoreCredential
}

// GetStoreCredentialOk returns a tuple with the StoreCredential field value
// and a boolean to check if the value has been set.
func (o *LinkRequest) GetStoreCredentialOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StoreCredential, true
}

// SetStoreCredential sets field value
func (o *LinkRequest) SetStoreCredential(v bool) {
	o.StoreCredential = v
}

// GetConsent returns the Consent field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LinkRequest) GetConsent() bool {
	if o == nil || IsNil(o.Consent.Get()) {
		var ret bool
		return ret
	}
	return *o.Consent.Get()
}

// GetConsentOk returns a tuple with the Consent field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LinkRequest) GetConsentOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Consent.Get(), o.Consent.IsSet()
}

// HasConsent returns a boolean if a field has been set.
func (o *LinkRequest) HasConsent() bool {
	if o != nil && o.Consent.IsSet() {
		return true
	}

	return false
}

// SetConsent gets a reference to the given NullableBool and assigns it to the Consent field.
func (o *LinkRequest) SetConsent(v bool) {
	o.Consent.Set(&v)
}

// SetConsentNil sets the value for Consent to be an explicit nil
func (o *LinkRequest) SetConsentNil() {
	o.Consent.Set(nil)
}

// UnsetConsent ensures that no value is present for Consent, not even an explicit nil
func (o *LinkRequest) UnsetConsent() {
	o.Consent.Unset()
}

// GetProductsRequested returns the ProductsRequested field value if set, zero value otherwise.
func (o *LinkRequest) GetProductsRequested() []string {
	if o == nil || IsNil(o.ProductsRequested) {
		var ret []string
		return ret
	}
	return o.ProductsRequested
}

// GetProductsRequestedOk returns a tuple with the ProductsRequested field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkRequest) GetProductsRequestedOk() ([]string, bool) {
	if o == nil || IsNil(o.ProductsRequested) {
		return nil, false
	}
	return o.ProductsRequested, true
}

// HasProductsRequested returns a boolean if a field has been set.
func (o *LinkRequest) HasProductsRequested() bool {
	if o != nil && !IsNil(o.ProductsRequested) {
		return true
	}

	return false
}

// SetProductsRequested gets a reference to the given []string and assigns it to the ProductsRequested field.
func (o *LinkRequest) SetProductsRequested(v []string) {
	o.ProductsRequested = v
}

// GetPaymentInstructionId returns the PaymentInstructionId field value if set, zero value otherwise.
func (o *LinkRequest) GetPaymentInstructionId() string {
	if o == nil || IsNil(o.PaymentInstructionId) {
		var ret string
		return ret
	}
	return *o.PaymentInstructionId
}

// GetPaymentInstructionIdOk returns a tuple with the PaymentInstructionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkRequest) GetPaymentInstructionIdOk() (*string, bool) {
	if o == nil || IsNil(o.PaymentInstructionId) {
		return nil, false
	}
	return o.PaymentInstructionId, true
}

// HasPaymentInstructionId returns a boolean if a field has been set.
func (o *LinkRequest) HasPaymentInstructionId() bool {
	if o != nil && !IsNil(o.PaymentInstructionId) {
		return true
	}

	return false
}

// SetPaymentInstructionId gets a reference to the given string and assigns it to the PaymentInstructionId field.
func (o *LinkRequest) SetPaymentInstructionId(v string) {
	o.PaymentInstructionId = &v
}

func (o LinkRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LinkRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["institution_id"] = o.InstitutionId
	toSerialize["store_credential"] = o.StoreCredential
	if o.Consent.IsSet() {
		toSerialize["consent"] = o.Consent.Get()
	}
	if !IsNil(o.ProductsRequested) {
		toSerialize["products_requested"] = o.ProductsRequested
	}
	if !IsNil(o.PaymentInstructionId) {
		toSerialize["payment_instruction_id"] = o.PaymentInstructionId
	}
	return toSerialize, nil
}

func (o *LinkRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"institution_id",
		"store_credential",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLinkRequest := _LinkRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varLinkRequest)

	if err != nil {
		return err
	}

	*o = LinkRequest(varLinkRequest)

	return err
}

type NullableLinkRequest struct {
	value *LinkRequest
	isSet bool
}

func (v NullableLinkRequest) Get() *LinkRequest {
	return v.value
}

func (v *NullableLinkRequest) Set(val *LinkRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableLinkRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableLinkRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLinkRequest(val *LinkRequest) *NullableLinkRequest {
	return &NullableLinkRequest{value: val, isSet: true}
}

func (v NullableLinkRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLinkRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
