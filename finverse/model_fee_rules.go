/*
Finverse Public

Documentation of the early finverse services

API version: 0.0.1
Contact: info@finverse.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package finverse

import (
	"encoding/json"
	"fmt"
)

// checks if the FeeRules type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FeeRules{}

// FeeRules Fee rule applicable to this payment account
type FeeRules struct {
	// Fee rule applicable to mandate
	MandateRules []FeeRule `json:"mandate_rules"`
	// Fee rule applicable to payment
	PaymentRules []FeeRule `json:"payment_rules"`
	// Fee rule applicable to payouts
	PayoutRules          []FeeRule `json:"payout_rules"`
	AdditionalProperties map[string]interface{}
}

type _FeeRules FeeRules

// NewFeeRules instantiates a new FeeRules object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFeeRules(mandateRules []FeeRule, paymentRules []FeeRule, payoutRules []FeeRule) *FeeRules {
	this := FeeRules{}
	this.MandateRules = mandateRules
	this.PaymentRules = paymentRules
	this.PayoutRules = payoutRules
	return &this
}

// NewFeeRulesWithDefaults instantiates a new FeeRules object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFeeRulesWithDefaults() *FeeRules {
	this := FeeRules{}
	return &this
}

// GetMandateRules returns the MandateRules field value
func (o *FeeRules) GetMandateRules() []FeeRule {
	if o == nil {
		var ret []FeeRule
		return ret
	}

	return o.MandateRules
}

// GetMandateRulesOk returns a tuple with the MandateRules field value
// and a boolean to check if the value has been set.
func (o *FeeRules) GetMandateRulesOk() ([]FeeRule, bool) {
	if o == nil {
		return nil, false
	}
	return o.MandateRules, true
}

// SetMandateRules sets field value
func (o *FeeRules) SetMandateRules(v []FeeRule) {
	o.MandateRules = v
}

// GetPaymentRules returns the PaymentRules field value
func (o *FeeRules) GetPaymentRules() []FeeRule {
	if o == nil {
		var ret []FeeRule
		return ret
	}

	return o.PaymentRules
}

// GetPaymentRulesOk returns a tuple with the PaymentRules field value
// and a boolean to check if the value has been set.
func (o *FeeRules) GetPaymentRulesOk() ([]FeeRule, bool) {
	if o == nil {
		return nil, false
	}
	return o.PaymentRules, true
}

// SetPaymentRules sets field value
func (o *FeeRules) SetPaymentRules(v []FeeRule) {
	o.PaymentRules = v
}

// GetPayoutRules returns the PayoutRules field value
func (o *FeeRules) GetPayoutRules() []FeeRule {
	if o == nil {
		var ret []FeeRule
		return ret
	}

	return o.PayoutRules
}

// GetPayoutRulesOk returns a tuple with the PayoutRules field value
// and a boolean to check if the value has been set.
func (o *FeeRules) GetPayoutRulesOk() ([]FeeRule, bool) {
	if o == nil {
		return nil, false
	}
	return o.PayoutRules, true
}

// SetPayoutRules sets field value
func (o *FeeRules) SetPayoutRules(v []FeeRule) {
	o.PayoutRules = v
}

func (o FeeRules) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FeeRules) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["mandate_rules"] = o.MandateRules
	toSerialize["payment_rules"] = o.PaymentRules
	toSerialize["payout_rules"] = o.PayoutRules

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *FeeRules) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"mandate_rules",
		"payment_rules",
		"payout_rules",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFeeRules := _FeeRules{}

	err = json.Unmarshal(data, &varFeeRules)

	if err != nil {
		return err
	}

	*o = FeeRules(varFeeRules)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "mandate_rules")
		delete(additionalProperties, "payment_rules")
		delete(additionalProperties, "payout_rules")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableFeeRules struct {
	value *FeeRules
	isSet bool
}

func (v NullableFeeRules) Get() *FeeRules {
	return v.value
}

func (v *NullableFeeRules) Set(val *FeeRules) {
	v.value = val
	v.isSet = true
}

func (v NullableFeeRules) IsSet() bool {
	return v.isSet
}

func (v *NullableFeeRules) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFeeRules(val *FeeRules) *NullableFeeRules {
	return &NullableFeeRules{value: val, isSet: true}
}

func (v NullableFeeRules) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFeeRules) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
