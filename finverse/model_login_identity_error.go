/*
Finverse Public

Documentation of the early finverse services

API version: 0.0.1
Contact: info@finverse.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package finverse

import (
	"encoding/json"
)

// checks if the LoginIdentityError type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LoginIdentityError{}

// LoginIdentityError struct for LoginIdentityError
type LoginIdentityError struct {
	Code                 *int32  `json:"code,omitempty"`
	Type                 *string `json:"type,omitempty"`
	Message              *string `json:"message,omitempty"`
	Details              *string `json:"details,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _LoginIdentityError LoginIdentityError

// NewLoginIdentityError instantiates a new LoginIdentityError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLoginIdentityError() *LoginIdentityError {
	this := LoginIdentityError{}
	return &this
}

// NewLoginIdentityErrorWithDefaults instantiates a new LoginIdentityError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLoginIdentityErrorWithDefaults() *LoginIdentityError {
	this := LoginIdentityError{}
	return &this
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *LoginIdentityError) GetCode() int32 {
	if o == nil || IsNil(o.Code) {
		var ret int32
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoginIdentityError) GetCodeOk() (*int32, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *LoginIdentityError) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given int32 and assigns it to the Code field.
func (o *LoginIdentityError) SetCode(v int32) {
	o.Code = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *LoginIdentityError) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoginIdentityError) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *LoginIdentityError) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *LoginIdentityError) SetType(v string) {
	o.Type = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *LoginIdentityError) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoginIdentityError) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *LoginIdentityError) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *LoginIdentityError) SetMessage(v string) {
	o.Message = &v
}

// GetDetails returns the Details field value if set, zero value otherwise.
func (o *LoginIdentityError) GetDetails() string {
	if o == nil || IsNil(o.Details) {
		var ret string
		return ret
	}
	return *o.Details
}

// GetDetailsOk returns a tuple with the Details field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoginIdentityError) GetDetailsOk() (*string, bool) {
	if o == nil || IsNil(o.Details) {
		return nil, false
	}
	return o.Details, true
}

// HasDetails returns a boolean if a field has been set.
func (o *LoginIdentityError) HasDetails() bool {
	if o != nil && !IsNil(o.Details) {
		return true
	}

	return false
}

// SetDetails gets a reference to the given string and assigns it to the Details field.
func (o *LoginIdentityError) SetDetails(v string) {
	o.Details = &v
}

func (o LoginIdentityError) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LoginIdentityError) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !IsNil(o.Details) {
		toSerialize["details"] = o.Details
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *LoginIdentityError) UnmarshalJSON(data []byte) (err error) {
	varLoginIdentityError := _LoginIdentityError{}

	err = json.Unmarshal(data, &varLoginIdentityError)

	if err != nil {
		return err
	}

	*o = LoginIdentityError(varLoginIdentityError)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "code")
		delete(additionalProperties, "type")
		delete(additionalProperties, "message")
		delete(additionalProperties, "details")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableLoginIdentityError struct {
	value *LoginIdentityError
	isSet bool
}

func (v NullableLoginIdentityError) Get() *LoginIdentityError {
	return v.value
}

func (v *NullableLoginIdentityError) Set(val *LoginIdentityError) {
	v.value = val
	v.isSet = true
}

func (v NullableLoginIdentityError) IsSet() bool {
	return v.isSet
}

func (v *NullableLoginIdentityError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLoginIdentityError(val *LoginIdentityError) *NullableLoginIdentityError {
	return &NullableLoginIdentityError{value: val, isSet: true}
}

func (v NullableLoginIdentityError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLoginIdentityError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
