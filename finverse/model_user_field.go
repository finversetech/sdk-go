/*
Finverse Public

Documentation of the early finverse services

API version: 0.0.1
Contact: info@finverse.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package finverse

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the UserField type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserField{}

// UserField struct for UserField
type UserField struct {
	// The name of the field. This will be used as the key when submitting response.
	Name string `json:"name"`
	// The label for this field.
	Label *string `json:"label,omitempty"`
	// The placeholder for this field.
	Placeholder *string `json:"placeholder,omitempty"`
	// The type of field. Currently it can only be SELECT, INPUT or PASSWORD
	Type string `json:"type"`
	// This is only applicable when the field type is SELECT
	Options []UserFieldOption `json:"options,omitempty"`
}

type _UserField UserField

// NewUserField instantiates a new UserField object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserField(name string, type_ string) *UserField {
	this := UserField{}
	this.Name = name
	this.Type = type_
	return &this
}

// NewUserFieldWithDefaults instantiates a new UserField object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserFieldWithDefaults() *UserField {
	this := UserField{}
	return &this
}

// GetName returns the Name field value
func (o *UserField) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *UserField) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *UserField) SetName(v string) {
	o.Name = v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *UserField) GetLabel() string {
	if o == nil || IsNil(o.Label) {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserField) GetLabelOk() (*string, bool) {
	if o == nil || IsNil(o.Label) {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *UserField) HasLabel() bool {
	if o != nil && !IsNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *UserField) SetLabel(v string) {
	o.Label = &v
}

// GetPlaceholder returns the Placeholder field value if set, zero value otherwise.
func (o *UserField) GetPlaceholder() string {
	if o == nil || IsNil(o.Placeholder) {
		var ret string
		return ret
	}
	return *o.Placeholder
}

// GetPlaceholderOk returns a tuple with the Placeholder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserField) GetPlaceholderOk() (*string, bool) {
	if o == nil || IsNil(o.Placeholder) {
		return nil, false
	}
	return o.Placeholder, true
}

// HasPlaceholder returns a boolean if a field has been set.
func (o *UserField) HasPlaceholder() bool {
	if o != nil && !IsNil(o.Placeholder) {
		return true
	}

	return false
}

// SetPlaceholder gets a reference to the given string and assigns it to the Placeholder field.
func (o *UserField) SetPlaceholder(v string) {
	o.Placeholder = &v
}

// GetType returns the Type field value
func (o *UserField) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *UserField) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *UserField) SetType(v string) {
	o.Type = v
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *UserField) GetOptions() []UserFieldOption {
	if o == nil || IsNil(o.Options) {
		var ret []UserFieldOption
		return ret
	}
	return o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserField) GetOptionsOk() ([]UserFieldOption, bool) {
	if o == nil || IsNil(o.Options) {
		return nil, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *UserField) HasOptions() bool {
	if o != nil && !IsNil(o.Options) {
		return true
	}

	return false
}

// SetOptions gets a reference to the given []UserFieldOption and assigns it to the Options field.
func (o *UserField) SetOptions(v []UserFieldOption) {
	o.Options = v
}

func (o UserField) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserField) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.Label) {
		toSerialize["label"] = o.Label
	}
	if !IsNil(o.Placeholder) {
		toSerialize["placeholder"] = o.Placeholder
	}
	toSerialize["type"] = o.Type
	if !IsNil(o.Options) {
		toSerialize["options"] = o.Options
	}
	return toSerialize, nil
}

func (o *UserField) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUserField := _UserField{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUserField)

	if err != nil {
		return err
	}

	*o = UserField(varUserField)

	return err
}

type NullableUserField struct {
	value *UserField
	isSet bool
}

func (v NullableUserField) Get() *UserField {
	return v.value
}

func (v *NullableUserField) Set(val *UserField) {
	v.value = val
	v.isSet = true
}

func (v NullableUserField) IsSet() bool {
	return v.isSet
}

func (v *NullableUserField) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserField(val *UserField) *NullableUserField {
	return &NullableUserField{value: val, isSet: true}
}

func (v NullableUserField) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserField) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
