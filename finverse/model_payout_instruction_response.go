/*
Finverse Public

Documentation of the early finverse services

API version: 0.0.1
Contact: info@finverse.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package finverse

import (
	"encoding/json"
)

// PayoutInstructionResponse struct for PayoutInstructionResponse
type PayoutInstructionResponse struct {
	// Finverse Payout Instruction ID
	PayoutInstructionId string `json:"payout_instruction_id"`
	// Possible values - CREATED, PROCESSING, EXECUTED, CANCELLED, FAILED.
	Status string `json:"status"`
	// The mandate used to execute payments for this payout instruction. Currency for the mandate must be supported by the recipient account
	MandateId *string `json:"mandate_id,omitempty"`
	// The recipient account to receive the payment
	RecipientAccountId *string `json:"recipient_account_id,omitempty"`
	// Amount to be paid, in currency's smallest unit or “minor unit”, as defined in ISO 4217. For example, HKD 100.01 is represented as amount = 10001 (minor unit = cents). For currencies without minor units (e.g. VND, JPY), the amount is represented as is, without modification. For example, VND 15101 is represented as amount = 15101.
	Amount *int32 `json:"amount,omitempty"`
	// YYYY-MM-DD, date (in UTC) to execute the payment, must be 1 day later than current date
	Date *string `json:"date,omitempty"`
	// A description for the payment (that will appear as the transaction description on bank statements)
	Description *string `json:"description,omitempty"`
	// The currency code as defined in ISO 4217.
	Currency *string       `json:"currency,omitempty"`
	Error    *FvErrorModel `json:"error,omitempty"`
}

// NewPayoutInstructionResponse instantiates a new PayoutInstructionResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPayoutInstructionResponse(payoutInstructionId string, status string) *PayoutInstructionResponse {
	this := PayoutInstructionResponse{}
	this.PayoutInstructionId = payoutInstructionId
	this.Status = status
	return &this
}

// NewPayoutInstructionResponseWithDefaults instantiates a new PayoutInstructionResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPayoutInstructionResponseWithDefaults() *PayoutInstructionResponse {
	this := PayoutInstructionResponse{}
	return &this
}

// GetPayoutInstructionId returns the PayoutInstructionId field value
func (o *PayoutInstructionResponse) GetPayoutInstructionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PayoutInstructionId
}

// GetPayoutInstructionIdOk returns a tuple with the PayoutInstructionId field value
// and a boolean to check if the value has been set.
func (o *PayoutInstructionResponse) GetPayoutInstructionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PayoutInstructionId, true
}

// SetPayoutInstructionId sets field value
func (o *PayoutInstructionResponse) SetPayoutInstructionId(v string) {
	o.PayoutInstructionId = v
}

// GetStatus returns the Status field value
func (o *PayoutInstructionResponse) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *PayoutInstructionResponse) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *PayoutInstructionResponse) SetStatus(v string) {
	o.Status = v
}

// GetMandateId returns the MandateId field value if set, zero value otherwise.
func (o *PayoutInstructionResponse) GetMandateId() string {
	if o == nil || o.MandateId == nil {
		var ret string
		return ret
	}
	return *o.MandateId
}

// GetMandateIdOk returns a tuple with the MandateId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PayoutInstructionResponse) GetMandateIdOk() (*string, bool) {
	if o == nil || o.MandateId == nil {
		return nil, false
	}
	return o.MandateId, true
}

// HasMandateId returns a boolean if a field has been set.
func (o *PayoutInstructionResponse) HasMandateId() bool {
	if o != nil && o.MandateId != nil {
		return true
	}

	return false
}

// SetMandateId gets a reference to the given string and assigns it to the MandateId field.
func (o *PayoutInstructionResponse) SetMandateId(v string) {
	o.MandateId = &v
}

// GetRecipientAccountId returns the RecipientAccountId field value if set, zero value otherwise.
func (o *PayoutInstructionResponse) GetRecipientAccountId() string {
	if o == nil || o.RecipientAccountId == nil {
		var ret string
		return ret
	}
	return *o.RecipientAccountId
}

// GetRecipientAccountIdOk returns a tuple with the RecipientAccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PayoutInstructionResponse) GetRecipientAccountIdOk() (*string, bool) {
	if o == nil || o.RecipientAccountId == nil {
		return nil, false
	}
	return o.RecipientAccountId, true
}

// HasRecipientAccountId returns a boolean if a field has been set.
func (o *PayoutInstructionResponse) HasRecipientAccountId() bool {
	if o != nil && o.RecipientAccountId != nil {
		return true
	}

	return false
}

// SetRecipientAccountId gets a reference to the given string and assigns it to the RecipientAccountId field.
func (o *PayoutInstructionResponse) SetRecipientAccountId(v string) {
	o.RecipientAccountId = &v
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *PayoutInstructionResponse) GetAmount() int32 {
	if o == nil || o.Amount == nil {
		var ret int32
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PayoutInstructionResponse) GetAmountOk() (*int32, bool) {
	if o == nil || o.Amount == nil {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *PayoutInstructionResponse) HasAmount() bool {
	if o != nil && o.Amount != nil {
		return true
	}

	return false
}

// SetAmount gets a reference to the given int32 and assigns it to the Amount field.
func (o *PayoutInstructionResponse) SetAmount(v int32) {
	o.Amount = &v
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *PayoutInstructionResponse) GetDate() string {
	if o == nil || o.Date == nil {
		var ret string
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PayoutInstructionResponse) GetDateOk() (*string, bool) {
	if o == nil || o.Date == nil {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *PayoutInstructionResponse) HasDate() bool {
	if o != nil && o.Date != nil {
		return true
	}

	return false
}

// SetDate gets a reference to the given string and assigns it to the Date field.
func (o *PayoutInstructionResponse) SetDate(v string) {
	o.Date = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *PayoutInstructionResponse) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PayoutInstructionResponse) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *PayoutInstructionResponse) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *PayoutInstructionResponse) SetDescription(v string) {
	o.Description = &v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *PayoutInstructionResponse) GetCurrency() string {
	if o == nil || o.Currency == nil {
		var ret string
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PayoutInstructionResponse) GetCurrencyOk() (*string, bool) {
	if o == nil || o.Currency == nil {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *PayoutInstructionResponse) HasCurrency() bool {
	if o != nil && o.Currency != nil {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given string and assigns it to the Currency field.
func (o *PayoutInstructionResponse) SetCurrency(v string) {
	o.Currency = &v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *PayoutInstructionResponse) GetError() FvErrorModel {
	if o == nil || o.Error == nil {
		var ret FvErrorModel
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PayoutInstructionResponse) GetErrorOk() (*FvErrorModel, bool) {
	if o == nil || o.Error == nil {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *PayoutInstructionResponse) HasError() bool {
	if o != nil && o.Error != nil {
		return true
	}

	return false
}

// SetError gets a reference to the given FvErrorModel and assigns it to the Error field.
func (o *PayoutInstructionResponse) SetError(v FvErrorModel) {
	o.Error = &v
}

func (o PayoutInstructionResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["payout_instruction_id"] = o.PayoutInstructionId
	}
	if true {
		toSerialize["status"] = o.Status
	}
	if o.MandateId != nil {
		toSerialize["mandate_id"] = o.MandateId
	}
	if o.RecipientAccountId != nil {
		toSerialize["recipient_account_id"] = o.RecipientAccountId
	}
	if o.Amount != nil {
		toSerialize["amount"] = o.Amount
	}
	if o.Date != nil {
		toSerialize["date"] = o.Date
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.Currency != nil {
		toSerialize["currency"] = o.Currency
	}
	if o.Error != nil {
		toSerialize["error"] = o.Error
	}
	return json.Marshal(toSerialize)
}

type NullablePayoutInstructionResponse struct {
	value *PayoutInstructionResponse
	isSet bool
}

func (v NullablePayoutInstructionResponse) Get() *PayoutInstructionResponse {
	return v.value
}

func (v *NullablePayoutInstructionResponse) Set(val *PayoutInstructionResponse) {
	v.value = val
	v.isSet = true
}

func (v NullablePayoutInstructionResponse) IsSet() bool {
	return v.isSet
}

func (v *NullablePayoutInstructionResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePayoutInstructionResponse(val *PayoutInstructionResponse) *NullablePayoutInstructionResponse {
	return &NullablePayoutInstructionResponse{value: val, isSet: true}
}

func (v NullablePayoutInstructionResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePayoutInstructionResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
