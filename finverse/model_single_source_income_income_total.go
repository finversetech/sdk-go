/*
Finverse Public

Documentation of the early finverse services

API version: 0.0.1
Contact: devs@finverse.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package finverse

import (
	"encoding/json"
)

// SingleSourceIncomeIncomeTotal struct for SingleSourceIncomeIncomeTotal
type SingleSourceIncomeIncomeTotal struct {
	EstmatedMonthlyIncome *IncomeEstimate `json:"estmated_monthly_income,omitempty"`
	// Number of transactions counted towards income
	TransactionCount *float32                `json:"transaction_count,omitempty"`
	MonthlyHistory   []MonthlyIncomeEstimate `json:"monthly_history,omitempty"`
}

// NewSingleSourceIncomeIncomeTotal instantiates a new SingleSourceIncomeIncomeTotal object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSingleSourceIncomeIncomeTotal() *SingleSourceIncomeIncomeTotal {
	this := SingleSourceIncomeIncomeTotal{}
	return &this
}

// NewSingleSourceIncomeIncomeTotalWithDefaults instantiates a new SingleSourceIncomeIncomeTotal object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSingleSourceIncomeIncomeTotalWithDefaults() *SingleSourceIncomeIncomeTotal {
	this := SingleSourceIncomeIncomeTotal{}
	return &this
}

// GetEstmatedMonthlyIncome returns the EstmatedMonthlyIncome field value if set, zero value otherwise.
func (o *SingleSourceIncomeIncomeTotal) GetEstmatedMonthlyIncome() IncomeEstimate {
	if o == nil || o.EstmatedMonthlyIncome == nil {
		var ret IncomeEstimate
		return ret
	}
	return *o.EstmatedMonthlyIncome
}

// GetEstmatedMonthlyIncomeOk returns a tuple with the EstmatedMonthlyIncome field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SingleSourceIncomeIncomeTotal) GetEstmatedMonthlyIncomeOk() (*IncomeEstimate, bool) {
	if o == nil || o.EstmatedMonthlyIncome == nil {
		return nil, false
	}
	return o.EstmatedMonthlyIncome, true
}

// HasEstmatedMonthlyIncome returns a boolean if a field has been set.
func (o *SingleSourceIncomeIncomeTotal) HasEstmatedMonthlyIncome() bool {
	if o != nil && o.EstmatedMonthlyIncome != nil {
		return true
	}

	return false
}

// SetEstmatedMonthlyIncome gets a reference to the given IncomeEstimate and assigns it to the EstmatedMonthlyIncome field.
func (o *SingleSourceIncomeIncomeTotal) SetEstmatedMonthlyIncome(v IncomeEstimate) {
	o.EstmatedMonthlyIncome = &v
}

// GetTransactionCount returns the TransactionCount field value if set, zero value otherwise.
func (o *SingleSourceIncomeIncomeTotal) GetTransactionCount() float32 {
	if o == nil || o.TransactionCount == nil {
		var ret float32
		return ret
	}
	return *o.TransactionCount
}

// GetTransactionCountOk returns a tuple with the TransactionCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SingleSourceIncomeIncomeTotal) GetTransactionCountOk() (*float32, bool) {
	if o == nil || o.TransactionCount == nil {
		return nil, false
	}
	return o.TransactionCount, true
}

// HasTransactionCount returns a boolean if a field has been set.
func (o *SingleSourceIncomeIncomeTotal) HasTransactionCount() bool {
	if o != nil && o.TransactionCount != nil {
		return true
	}

	return false
}

// SetTransactionCount gets a reference to the given float32 and assigns it to the TransactionCount field.
func (o *SingleSourceIncomeIncomeTotal) SetTransactionCount(v float32) {
	o.TransactionCount = &v
}

// GetMonthlyHistory returns the MonthlyHistory field value if set, zero value otherwise.
func (o *SingleSourceIncomeIncomeTotal) GetMonthlyHistory() []MonthlyIncomeEstimate {
	if o == nil || o.MonthlyHistory == nil {
		var ret []MonthlyIncomeEstimate
		return ret
	}
	return o.MonthlyHistory
}

// GetMonthlyHistoryOk returns a tuple with the MonthlyHistory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SingleSourceIncomeIncomeTotal) GetMonthlyHistoryOk() ([]MonthlyIncomeEstimate, bool) {
	if o == nil || o.MonthlyHistory == nil {
		return nil, false
	}
	return o.MonthlyHistory, true
}

// HasMonthlyHistory returns a boolean if a field has been set.
func (o *SingleSourceIncomeIncomeTotal) HasMonthlyHistory() bool {
	if o != nil && o.MonthlyHistory != nil {
		return true
	}

	return false
}

// SetMonthlyHistory gets a reference to the given []MonthlyIncomeEstimate and assigns it to the MonthlyHistory field.
func (o *SingleSourceIncomeIncomeTotal) SetMonthlyHistory(v []MonthlyIncomeEstimate) {
	o.MonthlyHistory = v
}

func (o SingleSourceIncomeIncomeTotal) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.EstmatedMonthlyIncome != nil {
		toSerialize["estmated_monthly_income"] = o.EstmatedMonthlyIncome
	}
	if o.TransactionCount != nil {
		toSerialize["transaction_count"] = o.TransactionCount
	}
	if o.MonthlyHistory != nil {
		toSerialize["monthly_history"] = o.MonthlyHistory
	}
	return json.Marshal(toSerialize)
}

type NullableSingleSourceIncomeIncomeTotal struct {
	value *SingleSourceIncomeIncomeTotal
	isSet bool
}

func (v NullableSingleSourceIncomeIncomeTotal) Get() *SingleSourceIncomeIncomeTotal {
	return v.value
}

func (v *NullableSingleSourceIncomeIncomeTotal) Set(val *SingleSourceIncomeIncomeTotal) {
	v.value = val
	v.isSet = true
}

func (v NullableSingleSourceIncomeIncomeTotal) IsSet() bool {
	return v.isSet
}

func (v *NullableSingleSourceIncomeIncomeTotal) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSingleSourceIncomeIncomeTotal(val *SingleSourceIncomeIncomeTotal) *NullableSingleSourceIncomeIncomeTotal {
	return &NullableSingleSourceIncomeIncomeTotal{value: val, isSet: true}
}

func (v NullableSingleSourceIncomeIncomeTotal) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSingleSourceIncomeIncomeTotal) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
