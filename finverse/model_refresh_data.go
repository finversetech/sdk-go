/*
Finverse Public

Documentation of the early finverse services

API version: 0.0.1
Contact: info@finverse.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package finverse

import (
	"encoding/json"
	"fmt"
)

// checks if the RefreshData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RefreshData{}

// RefreshData struct for RefreshData
type RefreshData struct {
	CredentialsStored    bool `json:"credentials_stored"`
	RefreshAllowed       bool `json:"refresh_allowed"`
	AdditionalProperties map[string]interface{}
}

type _RefreshData RefreshData

// NewRefreshData instantiates a new RefreshData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRefreshData(credentialsStored bool, refreshAllowed bool) *RefreshData {
	this := RefreshData{}
	this.CredentialsStored = credentialsStored
	this.RefreshAllowed = refreshAllowed
	return &this
}

// NewRefreshDataWithDefaults instantiates a new RefreshData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRefreshDataWithDefaults() *RefreshData {
	this := RefreshData{}
	return &this
}

// GetCredentialsStored returns the CredentialsStored field value
func (o *RefreshData) GetCredentialsStored() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.CredentialsStored
}

// GetCredentialsStoredOk returns a tuple with the CredentialsStored field value
// and a boolean to check if the value has been set.
func (o *RefreshData) GetCredentialsStoredOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CredentialsStored, true
}

// SetCredentialsStored sets field value
func (o *RefreshData) SetCredentialsStored(v bool) {
	o.CredentialsStored = v
}

// GetRefreshAllowed returns the RefreshAllowed field value
func (o *RefreshData) GetRefreshAllowed() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.RefreshAllowed
}

// GetRefreshAllowedOk returns a tuple with the RefreshAllowed field value
// and a boolean to check if the value has been set.
func (o *RefreshData) GetRefreshAllowedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RefreshAllowed, true
}

// SetRefreshAllowed sets field value
func (o *RefreshData) SetRefreshAllowed(v bool) {
	o.RefreshAllowed = v
}

func (o RefreshData) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RefreshData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["credentials_stored"] = o.CredentialsStored
	toSerialize["refresh_allowed"] = o.RefreshAllowed

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RefreshData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"credentials_stored",
		"refresh_allowed",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRefreshData := _RefreshData{}

	err = json.Unmarshal(data, &varRefreshData)

	if err != nil {
		return err
	}

	*o = RefreshData(varRefreshData)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "credentials_stored")
		delete(additionalProperties, "refresh_allowed")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRefreshData struct {
	value *RefreshData
	isSet bool
}

func (v NullableRefreshData) Get() *RefreshData {
	return v.value
}

func (v *NullableRefreshData) Set(val *RefreshData) {
	v.value = val
	v.isSet = true
}

func (v NullableRefreshData) IsSet() bool {
	return v.isSet
}

func (v *NullableRefreshData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRefreshData(val *RefreshData) *NullableRefreshData {
	return &NullableRefreshData{value: val, isSet: true}
}

func (v NullableRefreshData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRefreshData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
