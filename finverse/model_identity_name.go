/*
Finverse Public

Documentation of the early finverse services

API version: 0.0.1
Contact: info@finverse.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package finverse

import (
	"encoding/json"
)

// checks if the IdentityName type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IdentityName{}

// IdentityName struct for IdentityName
type IdentityName struct {
	Raw                  *string  `json:"raw,omitempty"`
	FullName             *string  `json:"full_name,omitempty"`
	FirstName            *string  `json:"first_name,omitempty"`
	LastName             *string  `json:"last_name,omitempty"`
	OtherName            *string  `json:"other_name,omitempty"`
	Source               *string  `json:"source,omitempty"`
	SourceIds            []string `json:"source_ids,omitempty"`
	AccountIds           []string `json:"account_ids,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _IdentityName IdentityName

// NewIdentityName instantiates a new IdentityName object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIdentityName() *IdentityName {
	this := IdentityName{}
	return &this
}

// NewIdentityNameWithDefaults instantiates a new IdentityName object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIdentityNameWithDefaults() *IdentityName {
	this := IdentityName{}
	return &this
}

// GetRaw returns the Raw field value if set, zero value otherwise.
func (o *IdentityName) GetRaw() string {
	if o == nil || IsNil(o.Raw) {
		var ret string
		return ret
	}
	return *o.Raw
}

// GetRawOk returns a tuple with the Raw field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityName) GetRawOk() (*string, bool) {
	if o == nil || IsNil(o.Raw) {
		return nil, false
	}
	return o.Raw, true
}

// HasRaw returns a boolean if a field has been set.
func (o *IdentityName) HasRaw() bool {
	if o != nil && !IsNil(o.Raw) {
		return true
	}

	return false
}

// SetRaw gets a reference to the given string and assigns it to the Raw field.
func (o *IdentityName) SetRaw(v string) {
	o.Raw = &v
}

// GetFullName returns the FullName field value if set, zero value otherwise.
func (o *IdentityName) GetFullName() string {
	if o == nil || IsNil(o.FullName) {
		var ret string
		return ret
	}
	return *o.FullName
}

// GetFullNameOk returns a tuple with the FullName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityName) GetFullNameOk() (*string, bool) {
	if o == nil || IsNil(o.FullName) {
		return nil, false
	}
	return o.FullName, true
}

// HasFullName returns a boolean if a field has been set.
func (o *IdentityName) HasFullName() bool {
	if o != nil && !IsNil(o.FullName) {
		return true
	}

	return false
}

// SetFullName gets a reference to the given string and assigns it to the FullName field.
func (o *IdentityName) SetFullName(v string) {
	o.FullName = &v
}

// GetFirstName returns the FirstName field value if set, zero value otherwise.
func (o *IdentityName) GetFirstName() string {
	if o == nil || IsNil(o.FirstName) {
		var ret string
		return ret
	}
	return *o.FirstName
}

// GetFirstNameOk returns a tuple with the FirstName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityName) GetFirstNameOk() (*string, bool) {
	if o == nil || IsNil(o.FirstName) {
		return nil, false
	}
	return o.FirstName, true
}

// HasFirstName returns a boolean if a field has been set.
func (o *IdentityName) HasFirstName() bool {
	if o != nil && !IsNil(o.FirstName) {
		return true
	}

	return false
}

// SetFirstName gets a reference to the given string and assigns it to the FirstName field.
func (o *IdentityName) SetFirstName(v string) {
	o.FirstName = &v
}

// GetLastName returns the LastName field value if set, zero value otherwise.
func (o *IdentityName) GetLastName() string {
	if o == nil || IsNil(o.LastName) {
		var ret string
		return ret
	}
	return *o.LastName
}

// GetLastNameOk returns a tuple with the LastName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityName) GetLastNameOk() (*string, bool) {
	if o == nil || IsNil(o.LastName) {
		return nil, false
	}
	return o.LastName, true
}

// HasLastName returns a boolean if a field has been set.
func (o *IdentityName) HasLastName() bool {
	if o != nil && !IsNil(o.LastName) {
		return true
	}

	return false
}

// SetLastName gets a reference to the given string and assigns it to the LastName field.
func (o *IdentityName) SetLastName(v string) {
	o.LastName = &v
}

// GetOtherName returns the OtherName field value if set, zero value otherwise.
func (o *IdentityName) GetOtherName() string {
	if o == nil || IsNil(o.OtherName) {
		var ret string
		return ret
	}
	return *o.OtherName
}

// GetOtherNameOk returns a tuple with the OtherName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityName) GetOtherNameOk() (*string, bool) {
	if o == nil || IsNil(o.OtherName) {
		return nil, false
	}
	return o.OtherName, true
}

// HasOtherName returns a boolean if a field has been set.
func (o *IdentityName) HasOtherName() bool {
	if o != nil && !IsNil(o.OtherName) {
		return true
	}

	return false
}

// SetOtherName gets a reference to the given string and assigns it to the OtherName field.
func (o *IdentityName) SetOtherName(v string) {
	o.OtherName = &v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *IdentityName) GetSource() string {
	if o == nil || IsNil(o.Source) {
		var ret string
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityName) GetSourceOk() (*string, bool) {
	if o == nil || IsNil(o.Source) {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *IdentityName) HasSource() bool {
	if o != nil && !IsNil(o.Source) {
		return true
	}

	return false
}

// SetSource gets a reference to the given string and assigns it to the Source field.
func (o *IdentityName) SetSource(v string) {
	o.Source = &v
}

// GetSourceIds returns the SourceIds field value if set, zero value otherwise.
func (o *IdentityName) GetSourceIds() []string {
	if o == nil || IsNil(o.SourceIds) {
		var ret []string
		return ret
	}
	return o.SourceIds
}

// GetSourceIdsOk returns a tuple with the SourceIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityName) GetSourceIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.SourceIds) {
		return nil, false
	}
	return o.SourceIds, true
}

// HasSourceIds returns a boolean if a field has been set.
func (o *IdentityName) HasSourceIds() bool {
	if o != nil && !IsNil(o.SourceIds) {
		return true
	}

	return false
}

// SetSourceIds gets a reference to the given []string and assigns it to the SourceIds field.
func (o *IdentityName) SetSourceIds(v []string) {
	o.SourceIds = v
}

// GetAccountIds returns the AccountIds field value if set, zero value otherwise.
func (o *IdentityName) GetAccountIds() []string {
	if o == nil || IsNil(o.AccountIds) {
		var ret []string
		return ret
	}
	return o.AccountIds
}

// GetAccountIdsOk returns a tuple with the AccountIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityName) GetAccountIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.AccountIds) {
		return nil, false
	}
	return o.AccountIds, true
}

// HasAccountIds returns a boolean if a field has been set.
func (o *IdentityName) HasAccountIds() bool {
	if o != nil && !IsNil(o.AccountIds) {
		return true
	}

	return false
}

// SetAccountIds gets a reference to the given []string and assigns it to the AccountIds field.
func (o *IdentityName) SetAccountIds(v []string) {
	o.AccountIds = v
}

func (o IdentityName) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IdentityName) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Raw) {
		toSerialize["raw"] = o.Raw
	}
	if !IsNil(o.FullName) {
		toSerialize["full_name"] = o.FullName
	}
	if !IsNil(o.FirstName) {
		toSerialize["first_name"] = o.FirstName
	}
	if !IsNil(o.LastName) {
		toSerialize["last_name"] = o.LastName
	}
	if !IsNil(o.OtherName) {
		toSerialize["other_name"] = o.OtherName
	}
	if !IsNil(o.Source) {
		toSerialize["source"] = o.Source
	}
	if !IsNil(o.SourceIds) {
		toSerialize["source_ids"] = o.SourceIds
	}
	if !IsNil(o.AccountIds) {
		toSerialize["account_ids"] = o.AccountIds
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *IdentityName) UnmarshalJSON(data []byte) (err error) {
	varIdentityName := _IdentityName{}

	err = json.Unmarshal(data, &varIdentityName)

	if err != nil {
		return err
	}

	*o = IdentityName(varIdentityName)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "raw")
		delete(additionalProperties, "full_name")
		delete(additionalProperties, "first_name")
		delete(additionalProperties, "last_name")
		delete(additionalProperties, "other_name")
		delete(additionalProperties, "source")
		delete(additionalProperties, "source_ids")
		delete(additionalProperties, "account_ids")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableIdentityName struct {
	value *IdentityName
	isSet bool
}

func (v NullableIdentityName) Get() *IdentityName {
	return v.value
}

func (v *NullableIdentityName) Set(val *IdentityName) {
	v.value = val
	v.isSet = true
}

func (v NullableIdentityName) IsSet() bool {
	return v.isSet
}

func (v *NullableIdentityName) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIdentityName(val *IdentityName) *NullableIdentityName {
	return &NullableIdentityName{value: val, isSet: true}
}

func (v NullableIdentityName) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIdentityName) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
