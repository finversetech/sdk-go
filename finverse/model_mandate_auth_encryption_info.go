/*
Finverse Public

Documentation of the early finverse services

API version: 0.0.1
Contact: info@finverse.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package finverse

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the MandateAuthEncryptionInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MandateAuthEncryptionInfo{}

// MandateAuthEncryptionInfo struct for MandateAuthEncryptionInfo
type MandateAuthEncryptionInfo struct {
	JwksUrl string `json:"jwks_url"`
	KeyId   string `json:"key_id"`
}

type _MandateAuthEncryptionInfo MandateAuthEncryptionInfo

// NewMandateAuthEncryptionInfo instantiates a new MandateAuthEncryptionInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMandateAuthEncryptionInfo(jwksUrl string, keyId string) *MandateAuthEncryptionInfo {
	this := MandateAuthEncryptionInfo{}
	this.JwksUrl = jwksUrl
	this.KeyId = keyId
	return &this
}

// NewMandateAuthEncryptionInfoWithDefaults instantiates a new MandateAuthEncryptionInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMandateAuthEncryptionInfoWithDefaults() *MandateAuthEncryptionInfo {
	this := MandateAuthEncryptionInfo{}
	return &this
}

// GetJwksUrl returns the JwksUrl field value
func (o *MandateAuthEncryptionInfo) GetJwksUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.JwksUrl
}

// GetJwksUrlOk returns a tuple with the JwksUrl field value
// and a boolean to check if the value has been set.
func (o *MandateAuthEncryptionInfo) GetJwksUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.JwksUrl, true
}

// SetJwksUrl sets field value
func (o *MandateAuthEncryptionInfo) SetJwksUrl(v string) {
	o.JwksUrl = v
}

// GetKeyId returns the KeyId field value
func (o *MandateAuthEncryptionInfo) GetKeyId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.KeyId
}

// GetKeyIdOk returns a tuple with the KeyId field value
// and a boolean to check if the value has been set.
func (o *MandateAuthEncryptionInfo) GetKeyIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.KeyId, true
}

// SetKeyId sets field value
func (o *MandateAuthEncryptionInfo) SetKeyId(v string) {
	o.KeyId = v
}

func (o MandateAuthEncryptionInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MandateAuthEncryptionInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["jwks_url"] = o.JwksUrl
	toSerialize["key_id"] = o.KeyId
	return toSerialize, nil
}

func (o *MandateAuthEncryptionInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"jwks_url",
		"key_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMandateAuthEncryptionInfo := _MandateAuthEncryptionInfo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMandateAuthEncryptionInfo)

	if err != nil {
		return err
	}

	*o = MandateAuthEncryptionInfo(varMandateAuthEncryptionInfo)

	return err
}

type NullableMandateAuthEncryptionInfo struct {
	value *MandateAuthEncryptionInfo
	isSet bool
}

func (v NullableMandateAuthEncryptionInfo) Get() *MandateAuthEncryptionInfo {
	return v.value
}

func (v *NullableMandateAuthEncryptionInfo) Set(val *MandateAuthEncryptionInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableMandateAuthEncryptionInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableMandateAuthEncryptionInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMandateAuthEncryptionInfo(val *MandateAuthEncryptionInfo) *NullableMandateAuthEncryptionInfo {
	return &NullableMandateAuthEncryptionInfo{value: val, isSet: true}
}

func (v NullableMandateAuthEncryptionInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMandateAuthEncryptionInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
