/*
Finverse Public

Documentation of the early finverse services

API version: 0.0.1
Contact: info@finverse.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package finverse

import (
	"encoding/json"
)

// checks if the UpdatePaymentRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdatePaymentRequest{}

// UpdatePaymentRequest struct for UpdatePaymentRequest
type UpdatePaymentRequest struct {
	Metadata             *map[string]string `json:"metadata,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UpdatePaymentRequest UpdatePaymentRequest

// NewUpdatePaymentRequest instantiates a new UpdatePaymentRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdatePaymentRequest() *UpdatePaymentRequest {
	this := UpdatePaymentRequest{}
	return &this
}

// NewUpdatePaymentRequestWithDefaults instantiates a new UpdatePaymentRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdatePaymentRequestWithDefaults() *UpdatePaymentRequest {
	this := UpdatePaymentRequest{}
	return &this
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *UpdatePaymentRequest) GetMetadata() map[string]string {
	if o == nil || IsNil(o.Metadata) {
		var ret map[string]string
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdatePaymentRequest) GetMetadataOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *UpdatePaymentRequest) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]string and assigns it to the Metadata field.
func (o *UpdatePaymentRequest) SetMetadata(v map[string]string) {
	o.Metadata = &v
}

func (o UpdatePaymentRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdatePaymentRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UpdatePaymentRequest) UnmarshalJSON(data []byte) (err error) {
	varUpdatePaymentRequest := _UpdatePaymentRequest{}

	err = json.Unmarshal(data, &varUpdatePaymentRequest)

	if err != nil {
		return err
	}

	*o = UpdatePaymentRequest(varUpdatePaymentRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "metadata")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUpdatePaymentRequest struct {
	value *UpdatePaymentRequest
	isSet bool
}

func (v NullableUpdatePaymentRequest) Get() *UpdatePaymentRequest {
	return v.value
}

func (v *NullableUpdatePaymentRequest) Set(val *UpdatePaymentRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdatePaymentRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdatePaymentRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdatePaymentRequest(val *UpdatePaymentRequest) *NullableUpdatePaymentRequest {
	return &NullableUpdatePaymentRequest{value: val, isSet: true}
}

func (v NullableUpdatePaymentRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdatePaymentRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
