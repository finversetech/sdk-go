/*
Finverse Public

Documentation of the early finverse services

API version: 0.0.1
Contact: info@finverse.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package finverse

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
)

// Linger please
var (
	_ context.Context
)

type PublicApi interface {

	/*
		AuthCallback Method for AuthCallback

		Callback url to get the oauth authorization token

		 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		 @return PublicApiApiAuthCallbackRequest
	*/
	AuthCallback(ctx context.Context) PublicApiApiAuthCallbackRequest

	// AuthCallbackExecute executes the request
	//  @return RedirectUriResponse
	AuthCallbackExecute(r PublicApiApiAuthCallbackRequest) (*RedirectUriResponse, *http.Response, error)

	/*
		GenerateCustomerAccessToken Method for GenerateCustomerAccessToken

		generate an access_token

		 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		 @return PublicApiApiGenerateCustomerAccessTokenRequest
	*/
	GenerateCustomerAccessToken(ctx context.Context) PublicApiApiGenerateCustomerAccessTokenRequest

	// GenerateCustomerAccessTokenExecute executes the request
	//  @return TokenResponse
	GenerateCustomerAccessTokenExecute(r PublicApiApiGenerateCustomerAccessTokenRequest) (*TokenResponse, *http.Response, error)
}

// PublicApiService PublicApi service
type PublicApiService service

type PublicApiApiAuthCallbackRequest struct {
	ctx              context.Context
	ApiService       PublicApi
	state            *string
	code             *string
	error_           *string
	errorDescription *string
	errorDetails     *string
}

// The state of the client when oauth was initialized
func (r PublicApiApiAuthCallbackRequest) State(state string) PublicApiApiAuthCallbackRequest {
	r.state = &state
	return r
}

// The authorization code generated by the Oauth provider
func (r PublicApiApiAuthCallbackRequest) Code(code string) PublicApiApiAuthCallbackRequest {
	r.code = &code
	return r
}

// error
func (r PublicApiApiAuthCallbackRequest) Error_(error_ string) PublicApiApiAuthCallbackRequest {
	r.error_ = &error_
	return r
}

// error description
func (r PublicApiApiAuthCallbackRequest) ErrorDescription(errorDescription string) PublicApiApiAuthCallbackRequest {
	r.errorDescription = &errorDescription
	return r
}

// error details
func (r PublicApiApiAuthCallbackRequest) ErrorDetails(errorDetails string) PublicApiApiAuthCallbackRequest {
	r.errorDetails = &errorDetails
	return r
}

func (r PublicApiApiAuthCallbackRequest) Execute() (*RedirectUriResponse, *http.Response, error) {
	return r.ApiService.AuthCallbackExecute(r)
}

/*
AuthCallback Method for AuthCallback

Callback url to get the oauth authorization token

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return PublicApiApiAuthCallbackRequest
*/
func (a *PublicApiService) AuthCallback(ctx context.Context) PublicApiApiAuthCallbackRequest {
	return PublicApiApiAuthCallbackRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//  @return RedirectUriResponse
func (a *PublicApiService) AuthCallbackExecute(r PublicApiApiAuthCallbackRequest) (*RedirectUriResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *RedirectUriResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PublicApiService.AuthCallback")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/auth/callback"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.state == nil {
		return localVarReturnValue, nil, reportError("state is required and must be specified")
	}

	localVarQueryParams.Add("state", parameterToString(*r.state, ""))
	if r.code != nil {
		localVarQueryParams.Add("code", parameterToString(*r.code, ""))
	}
	if r.error_ != nil {
		localVarQueryParams.Add("error", parameterToString(*r.error_, ""))
	}
	if r.errorDescription != nil {
		localVarQueryParams.Add("error_description", parameterToString(*r.errorDescription, ""))
	}
	if r.errorDetails != nil {
		localVarQueryParams.Add("error_details", parameterToString(*r.errorDetails, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type PublicApiApiGenerateCustomerAccessTokenRequest struct {
	ctx          context.Context
	ApiService   PublicApi
	tokenRequest *TokenRequest
}

// token request
func (r PublicApiApiGenerateCustomerAccessTokenRequest) TokenRequest(tokenRequest TokenRequest) PublicApiApiGenerateCustomerAccessTokenRequest {
	r.tokenRequest = &tokenRequest
	return r
}

func (r PublicApiApiGenerateCustomerAccessTokenRequest) Execute() (*TokenResponse, *http.Response, error) {
	return r.ApiService.GenerateCustomerAccessTokenExecute(r)
}

/*
GenerateCustomerAccessToken Method for GenerateCustomerAccessToken

generate an access_token

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return PublicApiApiGenerateCustomerAccessTokenRequest
*/
func (a *PublicApiService) GenerateCustomerAccessToken(ctx context.Context) PublicApiApiGenerateCustomerAccessTokenRequest {
	return PublicApiApiGenerateCustomerAccessTokenRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//  @return TokenResponse
func (a *PublicApiService) GenerateCustomerAccessTokenExecute(r PublicApiApiGenerateCustomerAccessTokenRequest) (*TokenResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *TokenResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PublicApiService.GenerateCustomerAccessToken")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/auth/customer/token"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.tokenRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v BadRequestModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
