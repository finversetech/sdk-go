/*
Finverse Public

Documentation of the early finverse services

API version: 0.0.1
Contact: info@finverse.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package finverse

import (
	"encoding/json"
	"fmt"
)

// checks if the ConfirmPaymentResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConfirmPaymentResponse{}

// ConfirmPaymentResponse struct for ConfirmPaymentResponse
type ConfirmPaymentResponse struct {
	Success              bool `json:"success"`
	AdditionalProperties map[string]interface{}
}

type _ConfirmPaymentResponse ConfirmPaymentResponse

// NewConfirmPaymentResponse instantiates a new ConfirmPaymentResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfirmPaymentResponse(success bool) *ConfirmPaymentResponse {
	this := ConfirmPaymentResponse{}
	this.Success = success
	return &this
}

// NewConfirmPaymentResponseWithDefaults instantiates a new ConfirmPaymentResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfirmPaymentResponseWithDefaults() *ConfirmPaymentResponse {
	this := ConfirmPaymentResponse{}
	return &this
}

// GetSuccess returns the Success field value
func (o *ConfirmPaymentResponse) GetSuccess() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Success
}

// GetSuccessOk returns a tuple with the Success field value
// and a boolean to check if the value has been set.
func (o *ConfirmPaymentResponse) GetSuccessOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Success, true
}

// SetSuccess sets field value
func (o *ConfirmPaymentResponse) SetSuccess(v bool) {
	o.Success = v
}

func (o ConfirmPaymentResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConfirmPaymentResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["success"] = o.Success

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ConfirmPaymentResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"success",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varConfirmPaymentResponse := _ConfirmPaymentResponse{}

	err = json.Unmarshal(data, &varConfirmPaymentResponse)

	if err != nil {
		return err
	}

	*o = ConfirmPaymentResponse(varConfirmPaymentResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "success")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableConfirmPaymentResponse struct {
	value *ConfirmPaymentResponse
	isSet bool
}

func (v NullableConfirmPaymentResponse) Get() *ConfirmPaymentResponse {
	return v.value
}

func (v *NullableConfirmPaymentResponse) Set(val *ConfirmPaymentResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableConfirmPaymentResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableConfirmPaymentResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfirmPaymentResponse(val *ConfirmPaymentResponse) *NullableConfirmPaymentResponse {
	return &NullableConfirmPaymentResponse{value: val, isSet: true}
}

func (v NullableConfirmPaymentResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfirmPaymentResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
