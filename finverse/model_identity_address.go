/*
Finverse Public

Documentation of the early finverse services

API version: 0.0.1
Contact: devs@finverse.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package finverse

import (
	"encoding/json"
)

// IdentityAddress struct for IdentityAddress
type IdentityAddress struct {
	Raw           *string  `json:"raw,omitempty"`
	FullAddress   *string  `json:"full_address,omitempty"`
	UnitNumber    *string  `json:"unit_number,omitempty"`
	FloorNumber   *string  `json:"floor_number,omitempty"`
	BuildingName  *string  `json:"building_name,omitempty"`
	StreetNumber  *string  `json:"street_number,omitempty"`
	StreetName    *string  `json:"street_name,omitempty"`
	City          *string  `json:"city,omitempty"`
	District      *string  `json:"district,omitempty"`
	Ward          *string  `json:"ward,omitempty"`
	StreetAddress *string  `json:"street_address,omitempty"`
	Province      *string  `json:"province,omitempty"`
	Country       *string  `json:"country,omitempty"`
	PostalCode    *string  `json:"postal_code,omitempty"`
	Source        *string  `json:"source,omitempty"`
	SourceIds     []string `json:"source_ids,omitempty"`
	AccountIds    []string `json:"account_ids,omitempty"`
}

// NewIdentityAddress instantiates a new IdentityAddress object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIdentityAddress() *IdentityAddress {
	this := IdentityAddress{}
	return &this
}

// NewIdentityAddressWithDefaults instantiates a new IdentityAddress object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIdentityAddressWithDefaults() *IdentityAddress {
	this := IdentityAddress{}
	return &this
}

// GetRaw returns the Raw field value if set, zero value otherwise.
func (o *IdentityAddress) GetRaw() string {
	if o == nil || o.Raw == nil {
		var ret string
		return ret
	}
	return *o.Raw
}

// GetRawOk returns a tuple with the Raw field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityAddress) GetRawOk() (*string, bool) {
	if o == nil || o.Raw == nil {
		return nil, false
	}
	return o.Raw, true
}

// HasRaw returns a boolean if a field has been set.
func (o *IdentityAddress) HasRaw() bool {
	if o != nil && o.Raw != nil {
		return true
	}

	return false
}

// SetRaw gets a reference to the given string and assigns it to the Raw field.
func (o *IdentityAddress) SetRaw(v string) {
	o.Raw = &v
}

// GetFullAddress returns the FullAddress field value if set, zero value otherwise.
func (o *IdentityAddress) GetFullAddress() string {
	if o == nil || o.FullAddress == nil {
		var ret string
		return ret
	}
	return *o.FullAddress
}

// GetFullAddressOk returns a tuple with the FullAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityAddress) GetFullAddressOk() (*string, bool) {
	if o == nil || o.FullAddress == nil {
		return nil, false
	}
	return o.FullAddress, true
}

// HasFullAddress returns a boolean if a field has been set.
func (o *IdentityAddress) HasFullAddress() bool {
	if o != nil && o.FullAddress != nil {
		return true
	}

	return false
}

// SetFullAddress gets a reference to the given string and assigns it to the FullAddress field.
func (o *IdentityAddress) SetFullAddress(v string) {
	o.FullAddress = &v
}

// GetUnitNumber returns the UnitNumber field value if set, zero value otherwise.
func (o *IdentityAddress) GetUnitNumber() string {
	if o == nil || o.UnitNumber == nil {
		var ret string
		return ret
	}
	return *o.UnitNumber
}

// GetUnitNumberOk returns a tuple with the UnitNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityAddress) GetUnitNumberOk() (*string, bool) {
	if o == nil || o.UnitNumber == nil {
		return nil, false
	}
	return o.UnitNumber, true
}

// HasUnitNumber returns a boolean if a field has been set.
func (o *IdentityAddress) HasUnitNumber() bool {
	if o != nil && o.UnitNumber != nil {
		return true
	}

	return false
}

// SetUnitNumber gets a reference to the given string and assigns it to the UnitNumber field.
func (o *IdentityAddress) SetUnitNumber(v string) {
	o.UnitNumber = &v
}

// GetFloorNumber returns the FloorNumber field value if set, zero value otherwise.
func (o *IdentityAddress) GetFloorNumber() string {
	if o == nil || o.FloorNumber == nil {
		var ret string
		return ret
	}
	return *o.FloorNumber
}

// GetFloorNumberOk returns a tuple with the FloorNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityAddress) GetFloorNumberOk() (*string, bool) {
	if o == nil || o.FloorNumber == nil {
		return nil, false
	}
	return o.FloorNumber, true
}

// HasFloorNumber returns a boolean if a field has been set.
func (o *IdentityAddress) HasFloorNumber() bool {
	if o != nil && o.FloorNumber != nil {
		return true
	}

	return false
}

// SetFloorNumber gets a reference to the given string and assigns it to the FloorNumber field.
func (o *IdentityAddress) SetFloorNumber(v string) {
	o.FloorNumber = &v
}

// GetBuildingName returns the BuildingName field value if set, zero value otherwise.
func (o *IdentityAddress) GetBuildingName() string {
	if o == nil || o.BuildingName == nil {
		var ret string
		return ret
	}
	return *o.BuildingName
}

// GetBuildingNameOk returns a tuple with the BuildingName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityAddress) GetBuildingNameOk() (*string, bool) {
	if o == nil || o.BuildingName == nil {
		return nil, false
	}
	return o.BuildingName, true
}

// HasBuildingName returns a boolean if a field has been set.
func (o *IdentityAddress) HasBuildingName() bool {
	if o != nil && o.BuildingName != nil {
		return true
	}

	return false
}

// SetBuildingName gets a reference to the given string and assigns it to the BuildingName field.
func (o *IdentityAddress) SetBuildingName(v string) {
	o.BuildingName = &v
}

// GetStreetNumber returns the StreetNumber field value if set, zero value otherwise.
func (o *IdentityAddress) GetStreetNumber() string {
	if o == nil || o.StreetNumber == nil {
		var ret string
		return ret
	}
	return *o.StreetNumber
}

// GetStreetNumberOk returns a tuple with the StreetNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityAddress) GetStreetNumberOk() (*string, bool) {
	if o == nil || o.StreetNumber == nil {
		return nil, false
	}
	return o.StreetNumber, true
}

// HasStreetNumber returns a boolean if a field has been set.
func (o *IdentityAddress) HasStreetNumber() bool {
	if o != nil && o.StreetNumber != nil {
		return true
	}

	return false
}

// SetStreetNumber gets a reference to the given string and assigns it to the StreetNumber field.
func (o *IdentityAddress) SetStreetNumber(v string) {
	o.StreetNumber = &v
}

// GetStreetName returns the StreetName field value if set, zero value otherwise.
func (o *IdentityAddress) GetStreetName() string {
	if o == nil || o.StreetName == nil {
		var ret string
		return ret
	}
	return *o.StreetName
}

// GetStreetNameOk returns a tuple with the StreetName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityAddress) GetStreetNameOk() (*string, bool) {
	if o == nil || o.StreetName == nil {
		return nil, false
	}
	return o.StreetName, true
}

// HasStreetName returns a boolean if a field has been set.
func (o *IdentityAddress) HasStreetName() bool {
	if o != nil && o.StreetName != nil {
		return true
	}

	return false
}

// SetStreetName gets a reference to the given string and assigns it to the StreetName field.
func (o *IdentityAddress) SetStreetName(v string) {
	o.StreetName = &v
}

// GetCity returns the City field value if set, zero value otherwise.
func (o *IdentityAddress) GetCity() string {
	if o == nil || o.City == nil {
		var ret string
		return ret
	}
	return *o.City
}

// GetCityOk returns a tuple with the City field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityAddress) GetCityOk() (*string, bool) {
	if o == nil || o.City == nil {
		return nil, false
	}
	return o.City, true
}

// HasCity returns a boolean if a field has been set.
func (o *IdentityAddress) HasCity() bool {
	if o != nil && o.City != nil {
		return true
	}

	return false
}

// SetCity gets a reference to the given string and assigns it to the City field.
func (o *IdentityAddress) SetCity(v string) {
	o.City = &v
}

// GetDistrict returns the District field value if set, zero value otherwise.
func (o *IdentityAddress) GetDistrict() string {
	if o == nil || o.District == nil {
		var ret string
		return ret
	}
	return *o.District
}

// GetDistrictOk returns a tuple with the District field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityAddress) GetDistrictOk() (*string, bool) {
	if o == nil || o.District == nil {
		return nil, false
	}
	return o.District, true
}

// HasDistrict returns a boolean if a field has been set.
func (o *IdentityAddress) HasDistrict() bool {
	if o != nil && o.District != nil {
		return true
	}

	return false
}

// SetDistrict gets a reference to the given string and assigns it to the District field.
func (o *IdentityAddress) SetDistrict(v string) {
	o.District = &v
}

// GetWard returns the Ward field value if set, zero value otherwise.
func (o *IdentityAddress) GetWard() string {
	if o == nil || o.Ward == nil {
		var ret string
		return ret
	}
	return *o.Ward
}

// GetWardOk returns a tuple with the Ward field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityAddress) GetWardOk() (*string, bool) {
	if o == nil || o.Ward == nil {
		return nil, false
	}
	return o.Ward, true
}

// HasWard returns a boolean if a field has been set.
func (o *IdentityAddress) HasWard() bool {
	if o != nil && o.Ward != nil {
		return true
	}

	return false
}

// SetWard gets a reference to the given string and assigns it to the Ward field.
func (o *IdentityAddress) SetWard(v string) {
	o.Ward = &v
}

// GetStreetAddress returns the StreetAddress field value if set, zero value otherwise.
func (o *IdentityAddress) GetStreetAddress() string {
	if o == nil || o.StreetAddress == nil {
		var ret string
		return ret
	}
	return *o.StreetAddress
}

// GetStreetAddressOk returns a tuple with the StreetAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityAddress) GetStreetAddressOk() (*string, bool) {
	if o == nil || o.StreetAddress == nil {
		return nil, false
	}
	return o.StreetAddress, true
}

// HasStreetAddress returns a boolean if a field has been set.
func (o *IdentityAddress) HasStreetAddress() bool {
	if o != nil && o.StreetAddress != nil {
		return true
	}

	return false
}

// SetStreetAddress gets a reference to the given string and assigns it to the StreetAddress field.
func (o *IdentityAddress) SetStreetAddress(v string) {
	o.StreetAddress = &v
}

// GetProvince returns the Province field value if set, zero value otherwise.
func (o *IdentityAddress) GetProvince() string {
	if o == nil || o.Province == nil {
		var ret string
		return ret
	}
	return *o.Province
}

// GetProvinceOk returns a tuple with the Province field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityAddress) GetProvinceOk() (*string, bool) {
	if o == nil || o.Province == nil {
		return nil, false
	}
	return o.Province, true
}

// HasProvince returns a boolean if a field has been set.
func (o *IdentityAddress) HasProvince() bool {
	if o != nil && o.Province != nil {
		return true
	}

	return false
}

// SetProvince gets a reference to the given string and assigns it to the Province field.
func (o *IdentityAddress) SetProvince(v string) {
	o.Province = &v
}

// GetCountry returns the Country field value if set, zero value otherwise.
func (o *IdentityAddress) GetCountry() string {
	if o == nil || o.Country == nil {
		var ret string
		return ret
	}
	return *o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityAddress) GetCountryOk() (*string, bool) {
	if o == nil || o.Country == nil {
		return nil, false
	}
	return o.Country, true
}

// HasCountry returns a boolean if a field has been set.
func (o *IdentityAddress) HasCountry() bool {
	if o != nil && o.Country != nil {
		return true
	}

	return false
}

// SetCountry gets a reference to the given string and assigns it to the Country field.
func (o *IdentityAddress) SetCountry(v string) {
	o.Country = &v
}

// GetPostalCode returns the PostalCode field value if set, zero value otherwise.
func (o *IdentityAddress) GetPostalCode() string {
	if o == nil || o.PostalCode == nil {
		var ret string
		return ret
	}
	return *o.PostalCode
}

// GetPostalCodeOk returns a tuple with the PostalCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityAddress) GetPostalCodeOk() (*string, bool) {
	if o == nil || o.PostalCode == nil {
		return nil, false
	}
	return o.PostalCode, true
}

// HasPostalCode returns a boolean if a field has been set.
func (o *IdentityAddress) HasPostalCode() bool {
	if o != nil && o.PostalCode != nil {
		return true
	}

	return false
}

// SetPostalCode gets a reference to the given string and assigns it to the PostalCode field.
func (o *IdentityAddress) SetPostalCode(v string) {
	o.PostalCode = &v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *IdentityAddress) GetSource() string {
	if o == nil || o.Source == nil {
		var ret string
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityAddress) GetSourceOk() (*string, bool) {
	if o == nil || o.Source == nil {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *IdentityAddress) HasSource() bool {
	if o != nil && o.Source != nil {
		return true
	}

	return false
}

// SetSource gets a reference to the given string and assigns it to the Source field.
func (o *IdentityAddress) SetSource(v string) {
	o.Source = &v
}

// GetSourceIds returns the SourceIds field value if set, zero value otherwise.
func (o *IdentityAddress) GetSourceIds() []string {
	if o == nil || o.SourceIds == nil {
		var ret []string
		return ret
	}
	return o.SourceIds
}

// GetSourceIdsOk returns a tuple with the SourceIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityAddress) GetSourceIdsOk() ([]string, bool) {
	if o == nil || o.SourceIds == nil {
		return nil, false
	}
	return o.SourceIds, true
}

// HasSourceIds returns a boolean if a field has been set.
func (o *IdentityAddress) HasSourceIds() bool {
	if o != nil && o.SourceIds != nil {
		return true
	}

	return false
}

// SetSourceIds gets a reference to the given []string and assigns it to the SourceIds field.
func (o *IdentityAddress) SetSourceIds(v []string) {
	o.SourceIds = v
}

// GetAccountIds returns the AccountIds field value if set, zero value otherwise.
func (o *IdentityAddress) GetAccountIds() []string {
	if o == nil || o.AccountIds == nil {
		var ret []string
		return ret
	}
	return o.AccountIds
}

// GetAccountIdsOk returns a tuple with the AccountIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityAddress) GetAccountIdsOk() ([]string, bool) {
	if o == nil || o.AccountIds == nil {
		return nil, false
	}
	return o.AccountIds, true
}

// HasAccountIds returns a boolean if a field has been set.
func (o *IdentityAddress) HasAccountIds() bool {
	if o != nil && o.AccountIds != nil {
		return true
	}

	return false
}

// SetAccountIds gets a reference to the given []string and assigns it to the AccountIds field.
func (o *IdentityAddress) SetAccountIds(v []string) {
	o.AccountIds = v
}

func (o IdentityAddress) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Raw != nil {
		toSerialize["raw"] = o.Raw
	}
	if o.FullAddress != nil {
		toSerialize["full_address"] = o.FullAddress
	}
	if o.UnitNumber != nil {
		toSerialize["unit_number"] = o.UnitNumber
	}
	if o.FloorNumber != nil {
		toSerialize["floor_number"] = o.FloorNumber
	}
	if o.BuildingName != nil {
		toSerialize["building_name"] = o.BuildingName
	}
	if o.StreetNumber != nil {
		toSerialize["street_number"] = o.StreetNumber
	}
	if o.StreetName != nil {
		toSerialize["street_name"] = o.StreetName
	}
	if o.City != nil {
		toSerialize["city"] = o.City
	}
	if o.District != nil {
		toSerialize["district"] = o.District
	}
	if o.Ward != nil {
		toSerialize["ward"] = o.Ward
	}
	if o.StreetAddress != nil {
		toSerialize["street_address"] = o.StreetAddress
	}
	if o.Province != nil {
		toSerialize["province"] = o.Province
	}
	if o.Country != nil {
		toSerialize["country"] = o.Country
	}
	if o.PostalCode != nil {
		toSerialize["postal_code"] = o.PostalCode
	}
	if o.Source != nil {
		toSerialize["source"] = o.Source
	}
	if o.SourceIds != nil {
		toSerialize["source_ids"] = o.SourceIds
	}
	if o.AccountIds != nil {
		toSerialize["account_ids"] = o.AccountIds
	}
	return json.Marshal(toSerialize)
}

type NullableIdentityAddress struct {
	value *IdentityAddress
	isSet bool
}

func (v NullableIdentityAddress) Get() *IdentityAddress {
	return v.value
}

func (v *NullableIdentityAddress) Set(val *IdentityAddress) {
	v.value = val
	v.isSet = true
}

func (v NullableIdentityAddress) IsSet() bool {
	return v.isSet
}

func (v *NullableIdentityAddress) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIdentityAddress(val *IdentityAddress) *NullableIdentityAddress {
	return &NullableIdentityAddress{value: val, isSet: true}
}

func (v NullableIdentityAddress) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIdentityAddress) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
