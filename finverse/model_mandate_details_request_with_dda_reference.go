/*
Finverse Public

Documentation of the early finverse services

API version: 0.0.1
Contact: info@finverse.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package finverse

import (
	"encoding/json"
)

// MandateDetailsRequestWithDdaReference struct for MandateDetailsRequestWithDdaReference
type MandateDetailsRequestWithDdaReference struct {
	// The direct debit authorization reference
	DdaReference *string `json:"dda_reference,omitempty"`
	// ISO currency code
	Currency string `json:"currency"`
	// YYYY-MM-DD, must be later than or the same as the date of creation. If unspecified, default to the date of creation.
	StartDate NullableString `json:"start_date,omitempty"`
	// YYYY-MM-DD, must be later than the date of creation.
	EndDate           NullableString     `json:"end_date,omitempty"`
	TransactionLimits *TransactionLimits `json:"transaction_limits,omitempty"`
	// End-user facing description of the mandate (used in notifications, and in payments if no description is provided)
	Description string `json:"description"`
}

// NewMandateDetailsRequestWithDdaReference instantiates a new MandateDetailsRequestWithDdaReference object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMandateDetailsRequestWithDdaReference(currency string, description string) *MandateDetailsRequestWithDdaReference {
	this := MandateDetailsRequestWithDdaReference{}
	this.Currency = currency
	this.Description = description
	return &this
}

// NewMandateDetailsRequestWithDdaReferenceWithDefaults instantiates a new MandateDetailsRequestWithDdaReference object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMandateDetailsRequestWithDdaReferenceWithDefaults() *MandateDetailsRequestWithDdaReference {
	this := MandateDetailsRequestWithDdaReference{}
	return &this
}

// GetDdaReference returns the DdaReference field value if set, zero value otherwise.
func (o *MandateDetailsRequestWithDdaReference) GetDdaReference() string {
	if o == nil || o.DdaReference == nil {
		var ret string
		return ret
	}
	return *o.DdaReference
}

// GetDdaReferenceOk returns a tuple with the DdaReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MandateDetailsRequestWithDdaReference) GetDdaReferenceOk() (*string, bool) {
	if o == nil || o.DdaReference == nil {
		return nil, false
	}
	return o.DdaReference, true
}

// HasDdaReference returns a boolean if a field has been set.
func (o *MandateDetailsRequestWithDdaReference) HasDdaReference() bool {
	if o != nil && o.DdaReference != nil {
		return true
	}

	return false
}

// SetDdaReference gets a reference to the given string and assigns it to the DdaReference field.
func (o *MandateDetailsRequestWithDdaReference) SetDdaReference(v string) {
	o.DdaReference = &v
}

// GetCurrency returns the Currency field value
func (o *MandateDetailsRequestWithDdaReference) GetCurrency() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value
// and a boolean to check if the value has been set.
func (o *MandateDetailsRequestWithDdaReference) GetCurrencyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Currency, true
}

// SetCurrency sets field value
func (o *MandateDetailsRequestWithDdaReference) SetCurrency(v string) {
	o.Currency = v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MandateDetailsRequestWithDdaReference) GetStartDate() string {
	if o == nil || o.StartDate.Get() == nil {
		var ret string
		return ret
	}
	return *o.StartDate.Get()
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MandateDetailsRequestWithDdaReference) GetStartDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.StartDate.Get(), o.StartDate.IsSet()
}

// HasStartDate returns a boolean if a field has been set.
func (o *MandateDetailsRequestWithDdaReference) HasStartDate() bool {
	if o != nil && o.StartDate.IsSet() {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given NullableString and assigns it to the StartDate field.
func (o *MandateDetailsRequestWithDdaReference) SetStartDate(v string) {
	o.StartDate.Set(&v)
}

// SetStartDateNil sets the value for StartDate to be an explicit nil
func (o *MandateDetailsRequestWithDdaReference) SetStartDateNil() {
	o.StartDate.Set(nil)
}

// UnsetStartDate ensures that no value is present for StartDate, not even an explicit nil
func (o *MandateDetailsRequestWithDdaReference) UnsetStartDate() {
	o.StartDate.Unset()
}

// GetEndDate returns the EndDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MandateDetailsRequestWithDdaReference) GetEndDate() string {
	if o == nil || o.EndDate.Get() == nil {
		var ret string
		return ret
	}
	return *o.EndDate.Get()
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MandateDetailsRequestWithDdaReference) GetEndDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EndDate.Get(), o.EndDate.IsSet()
}

// HasEndDate returns a boolean if a field has been set.
func (o *MandateDetailsRequestWithDdaReference) HasEndDate() bool {
	if o != nil && o.EndDate.IsSet() {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given NullableString and assigns it to the EndDate field.
func (o *MandateDetailsRequestWithDdaReference) SetEndDate(v string) {
	o.EndDate.Set(&v)
}

// SetEndDateNil sets the value for EndDate to be an explicit nil
func (o *MandateDetailsRequestWithDdaReference) SetEndDateNil() {
	o.EndDate.Set(nil)
}

// UnsetEndDate ensures that no value is present for EndDate, not even an explicit nil
func (o *MandateDetailsRequestWithDdaReference) UnsetEndDate() {
	o.EndDate.Unset()
}

// GetTransactionLimits returns the TransactionLimits field value if set, zero value otherwise.
func (o *MandateDetailsRequestWithDdaReference) GetTransactionLimits() TransactionLimits {
	if o == nil || o.TransactionLimits == nil {
		var ret TransactionLimits
		return ret
	}
	return *o.TransactionLimits
}

// GetTransactionLimitsOk returns a tuple with the TransactionLimits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MandateDetailsRequestWithDdaReference) GetTransactionLimitsOk() (*TransactionLimits, bool) {
	if o == nil || o.TransactionLimits == nil {
		return nil, false
	}
	return o.TransactionLimits, true
}

// HasTransactionLimits returns a boolean if a field has been set.
func (o *MandateDetailsRequestWithDdaReference) HasTransactionLimits() bool {
	if o != nil && o.TransactionLimits != nil {
		return true
	}

	return false
}

// SetTransactionLimits gets a reference to the given TransactionLimits and assigns it to the TransactionLimits field.
func (o *MandateDetailsRequestWithDdaReference) SetTransactionLimits(v TransactionLimits) {
	o.TransactionLimits = &v
}

// GetDescription returns the Description field value
func (o *MandateDetailsRequestWithDdaReference) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *MandateDetailsRequestWithDdaReference) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *MandateDetailsRequestWithDdaReference) SetDescription(v string) {
	o.Description = v
}

func (o MandateDetailsRequestWithDdaReference) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DdaReference != nil {
		toSerialize["dda_reference"] = o.DdaReference
	}
	if true {
		toSerialize["currency"] = o.Currency
	}
	if o.StartDate.IsSet() {
		toSerialize["start_date"] = o.StartDate.Get()
	}
	if o.EndDate.IsSet() {
		toSerialize["end_date"] = o.EndDate.Get()
	}
	if o.TransactionLimits != nil {
		toSerialize["transaction_limits"] = o.TransactionLimits
	}
	if true {
		toSerialize["description"] = o.Description
	}
	return json.Marshal(toSerialize)
}

type NullableMandateDetailsRequestWithDdaReference struct {
	value *MandateDetailsRequestWithDdaReference
	isSet bool
}

func (v NullableMandateDetailsRequestWithDdaReference) Get() *MandateDetailsRequestWithDdaReference {
	return v.value
}

func (v *NullableMandateDetailsRequestWithDdaReference) Set(val *MandateDetailsRequestWithDdaReference) {
	v.value = val
	v.isSet = true
}

func (v NullableMandateDetailsRequestWithDdaReference) IsSet() bool {
	return v.isSet
}

func (v *NullableMandateDetailsRequestWithDdaReference) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMandateDetailsRequestWithDdaReference(val *MandateDetailsRequestWithDdaReference) *NullableMandateDetailsRequestWithDdaReference {
	return &NullableMandateDetailsRequestWithDdaReference{value: val, isSet: true}
}

func (v NullableMandateDetailsRequestWithDdaReference) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMandateDetailsRequestWithDdaReference) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
