/*
Finverse Public

Documentation of the early finverse services

API version: 0.0.1
Contact: info@finverse.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package finverse

import (
	"encoding/json"
	"time"
)

// checks if the LoginIdentityStatusDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LoginIdentityStatusDetails{}

// LoginIdentityStatusDetails struct for LoginIdentityStatusDetails
type LoginIdentityStatusDetails struct {
	EventDate            *time.Time `json:"event_date,omitempty"`
	EventName            *string    `json:"event_name,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _LoginIdentityStatusDetails LoginIdentityStatusDetails

// NewLoginIdentityStatusDetails instantiates a new LoginIdentityStatusDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLoginIdentityStatusDetails() *LoginIdentityStatusDetails {
	this := LoginIdentityStatusDetails{}
	return &this
}

// NewLoginIdentityStatusDetailsWithDefaults instantiates a new LoginIdentityStatusDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLoginIdentityStatusDetailsWithDefaults() *LoginIdentityStatusDetails {
	this := LoginIdentityStatusDetails{}
	return &this
}

// GetEventDate returns the EventDate field value if set, zero value otherwise.
func (o *LoginIdentityStatusDetails) GetEventDate() time.Time {
	if o == nil || IsNil(o.EventDate) {
		var ret time.Time
		return ret
	}
	return *o.EventDate
}

// GetEventDateOk returns a tuple with the EventDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoginIdentityStatusDetails) GetEventDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.EventDate) {
		return nil, false
	}
	return o.EventDate, true
}

// HasEventDate returns a boolean if a field has been set.
func (o *LoginIdentityStatusDetails) HasEventDate() bool {
	if o != nil && !IsNil(o.EventDate) {
		return true
	}

	return false
}

// SetEventDate gets a reference to the given time.Time and assigns it to the EventDate field.
func (o *LoginIdentityStatusDetails) SetEventDate(v time.Time) {
	o.EventDate = &v
}

// GetEventName returns the EventName field value if set, zero value otherwise.
func (o *LoginIdentityStatusDetails) GetEventName() string {
	if o == nil || IsNil(o.EventName) {
		var ret string
		return ret
	}
	return *o.EventName
}

// GetEventNameOk returns a tuple with the EventName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoginIdentityStatusDetails) GetEventNameOk() (*string, bool) {
	if o == nil || IsNil(o.EventName) {
		return nil, false
	}
	return o.EventName, true
}

// HasEventName returns a boolean if a field has been set.
func (o *LoginIdentityStatusDetails) HasEventName() bool {
	if o != nil && !IsNil(o.EventName) {
		return true
	}

	return false
}

// SetEventName gets a reference to the given string and assigns it to the EventName field.
func (o *LoginIdentityStatusDetails) SetEventName(v string) {
	o.EventName = &v
}

func (o LoginIdentityStatusDetails) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LoginIdentityStatusDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EventDate) {
		toSerialize["event_date"] = o.EventDate
	}
	if !IsNil(o.EventName) {
		toSerialize["event_name"] = o.EventName
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *LoginIdentityStatusDetails) UnmarshalJSON(data []byte) (err error) {
	varLoginIdentityStatusDetails := _LoginIdentityStatusDetails{}

	err = json.Unmarshal(data, &varLoginIdentityStatusDetails)

	if err != nil {
		return err
	}

	*o = LoginIdentityStatusDetails(varLoginIdentityStatusDetails)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "event_date")
		delete(additionalProperties, "event_name")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableLoginIdentityStatusDetails struct {
	value *LoginIdentityStatusDetails
	isSet bool
}

func (v NullableLoginIdentityStatusDetails) Get() *LoginIdentityStatusDetails {
	return v.value
}

func (v *NullableLoginIdentityStatusDetails) Set(val *LoginIdentityStatusDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableLoginIdentityStatusDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableLoginIdentityStatusDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLoginIdentityStatusDetails(val *LoginIdentityStatusDetails) *NullableLoginIdentityStatusDetails {
	return &NullableLoginIdentityStatusDetails{value: val, isSet: true}
}

func (v NullableLoginIdentityStatusDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLoginIdentityStatusDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
