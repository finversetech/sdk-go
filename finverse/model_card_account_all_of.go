/*
Finverse Public

Documentation of the early finverse services

API version: 0.0.1
Contact: info@finverse.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package finverse

import (
	"encoding/json"
)

// CardAccountAllOf struct for CardAccountAllOf
type CardAccountAllOf struct {
	// Account this card is associated with
	AccountId   *string `json:"account_id,omitempty"`
	AccountName *string `json:"account_name,omitempty"`
	// Masked Account number of the card account
	AccountNumberMasked *string      `json:"account_number_masked,omitempty"`
	AccountType         *AccountType `json:"account_type,omitempty"`
	// The statement payment due date
	StatementPaymentDueDate *string `json:"statement_payment_due_date,omitempty"`
	// The next payment due date
	NextPaymentDueDate *string `json:"next_payment_due_date,omitempty"`
	// The statement date
	StatementDate *string `json:"statement_date,omitempty"`
	// The date of the last payment
	LastPaymentDate   *string         `json:"last_payment_date,omitempty"`
	LastPaymentAmount *CurrencyAmount `json:"last_payment_amount,omitempty"`
}

// NewCardAccountAllOf instantiates a new CardAccountAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCardAccountAllOf() *CardAccountAllOf {
	this := CardAccountAllOf{}
	return &this
}

// NewCardAccountAllOfWithDefaults instantiates a new CardAccountAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCardAccountAllOfWithDefaults() *CardAccountAllOf {
	this := CardAccountAllOf{}
	return &this
}

// GetAccountId returns the AccountId field value if set, zero value otherwise.
func (o *CardAccountAllOf) GetAccountId() string {
	if o == nil || o.AccountId == nil {
		var ret string
		return ret
	}
	return *o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CardAccountAllOf) GetAccountIdOk() (*string, bool) {
	if o == nil || o.AccountId == nil {
		return nil, false
	}
	return o.AccountId, true
}

// HasAccountId returns a boolean if a field has been set.
func (o *CardAccountAllOf) HasAccountId() bool {
	if o != nil && o.AccountId != nil {
		return true
	}

	return false
}

// SetAccountId gets a reference to the given string and assigns it to the AccountId field.
func (o *CardAccountAllOf) SetAccountId(v string) {
	o.AccountId = &v
}

// GetAccountName returns the AccountName field value if set, zero value otherwise.
func (o *CardAccountAllOf) GetAccountName() string {
	if o == nil || o.AccountName == nil {
		var ret string
		return ret
	}
	return *o.AccountName
}

// GetAccountNameOk returns a tuple with the AccountName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CardAccountAllOf) GetAccountNameOk() (*string, bool) {
	if o == nil || o.AccountName == nil {
		return nil, false
	}
	return o.AccountName, true
}

// HasAccountName returns a boolean if a field has been set.
func (o *CardAccountAllOf) HasAccountName() bool {
	if o != nil && o.AccountName != nil {
		return true
	}

	return false
}

// SetAccountName gets a reference to the given string and assigns it to the AccountName field.
func (o *CardAccountAllOf) SetAccountName(v string) {
	o.AccountName = &v
}

// GetAccountNumberMasked returns the AccountNumberMasked field value if set, zero value otherwise.
func (o *CardAccountAllOf) GetAccountNumberMasked() string {
	if o == nil || o.AccountNumberMasked == nil {
		var ret string
		return ret
	}
	return *o.AccountNumberMasked
}

// GetAccountNumberMaskedOk returns a tuple with the AccountNumberMasked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CardAccountAllOf) GetAccountNumberMaskedOk() (*string, bool) {
	if o == nil || o.AccountNumberMasked == nil {
		return nil, false
	}
	return o.AccountNumberMasked, true
}

// HasAccountNumberMasked returns a boolean if a field has been set.
func (o *CardAccountAllOf) HasAccountNumberMasked() bool {
	if o != nil && o.AccountNumberMasked != nil {
		return true
	}

	return false
}

// SetAccountNumberMasked gets a reference to the given string and assigns it to the AccountNumberMasked field.
func (o *CardAccountAllOf) SetAccountNumberMasked(v string) {
	o.AccountNumberMasked = &v
}

// GetAccountType returns the AccountType field value if set, zero value otherwise.
func (o *CardAccountAllOf) GetAccountType() AccountType {
	if o == nil || o.AccountType == nil {
		var ret AccountType
		return ret
	}
	return *o.AccountType
}

// GetAccountTypeOk returns a tuple with the AccountType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CardAccountAllOf) GetAccountTypeOk() (*AccountType, bool) {
	if o == nil || o.AccountType == nil {
		return nil, false
	}
	return o.AccountType, true
}

// HasAccountType returns a boolean if a field has been set.
func (o *CardAccountAllOf) HasAccountType() bool {
	if o != nil && o.AccountType != nil {
		return true
	}

	return false
}

// SetAccountType gets a reference to the given AccountType and assigns it to the AccountType field.
func (o *CardAccountAllOf) SetAccountType(v AccountType) {
	o.AccountType = &v
}

// GetStatementPaymentDueDate returns the StatementPaymentDueDate field value if set, zero value otherwise.
func (o *CardAccountAllOf) GetStatementPaymentDueDate() string {
	if o == nil || o.StatementPaymentDueDate == nil {
		var ret string
		return ret
	}
	return *o.StatementPaymentDueDate
}

// GetStatementPaymentDueDateOk returns a tuple with the StatementPaymentDueDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CardAccountAllOf) GetStatementPaymentDueDateOk() (*string, bool) {
	if o == nil || o.StatementPaymentDueDate == nil {
		return nil, false
	}
	return o.StatementPaymentDueDate, true
}

// HasStatementPaymentDueDate returns a boolean if a field has been set.
func (o *CardAccountAllOf) HasStatementPaymentDueDate() bool {
	if o != nil && o.StatementPaymentDueDate != nil {
		return true
	}

	return false
}

// SetStatementPaymentDueDate gets a reference to the given string and assigns it to the StatementPaymentDueDate field.
func (o *CardAccountAllOf) SetStatementPaymentDueDate(v string) {
	o.StatementPaymentDueDate = &v
}

// GetNextPaymentDueDate returns the NextPaymentDueDate field value if set, zero value otherwise.
func (o *CardAccountAllOf) GetNextPaymentDueDate() string {
	if o == nil || o.NextPaymentDueDate == nil {
		var ret string
		return ret
	}
	return *o.NextPaymentDueDate
}

// GetNextPaymentDueDateOk returns a tuple with the NextPaymentDueDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CardAccountAllOf) GetNextPaymentDueDateOk() (*string, bool) {
	if o == nil || o.NextPaymentDueDate == nil {
		return nil, false
	}
	return o.NextPaymentDueDate, true
}

// HasNextPaymentDueDate returns a boolean if a field has been set.
func (o *CardAccountAllOf) HasNextPaymentDueDate() bool {
	if o != nil && o.NextPaymentDueDate != nil {
		return true
	}

	return false
}

// SetNextPaymentDueDate gets a reference to the given string and assigns it to the NextPaymentDueDate field.
func (o *CardAccountAllOf) SetNextPaymentDueDate(v string) {
	o.NextPaymentDueDate = &v
}

// GetStatementDate returns the StatementDate field value if set, zero value otherwise.
func (o *CardAccountAllOf) GetStatementDate() string {
	if o == nil || o.StatementDate == nil {
		var ret string
		return ret
	}
	return *o.StatementDate
}

// GetStatementDateOk returns a tuple with the StatementDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CardAccountAllOf) GetStatementDateOk() (*string, bool) {
	if o == nil || o.StatementDate == nil {
		return nil, false
	}
	return o.StatementDate, true
}

// HasStatementDate returns a boolean if a field has been set.
func (o *CardAccountAllOf) HasStatementDate() bool {
	if o != nil && o.StatementDate != nil {
		return true
	}

	return false
}

// SetStatementDate gets a reference to the given string and assigns it to the StatementDate field.
func (o *CardAccountAllOf) SetStatementDate(v string) {
	o.StatementDate = &v
}

// GetLastPaymentDate returns the LastPaymentDate field value if set, zero value otherwise.
func (o *CardAccountAllOf) GetLastPaymentDate() string {
	if o == nil || o.LastPaymentDate == nil {
		var ret string
		return ret
	}
	return *o.LastPaymentDate
}

// GetLastPaymentDateOk returns a tuple with the LastPaymentDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CardAccountAllOf) GetLastPaymentDateOk() (*string, bool) {
	if o == nil || o.LastPaymentDate == nil {
		return nil, false
	}
	return o.LastPaymentDate, true
}

// HasLastPaymentDate returns a boolean if a field has been set.
func (o *CardAccountAllOf) HasLastPaymentDate() bool {
	if o != nil && o.LastPaymentDate != nil {
		return true
	}

	return false
}

// SetLastPaymentDate gets a reference to the given string and assigns it to the LastPaymentDate field.
func (o *CardAccountAllOf) SetLastPaymentDate(v string) {
	o.LastPaymentDate = &v
}

// GetLastPaymentAmount returns the LastPaymentAmount field value if set, zero value otherwise.
func (o *CardAccountAllOf) GetLastPaymentAmount() CurrencyAmount {
	if o == nil || o.LastPaymentAmount == nil {
		var ret CurrencyAmount
		return ret
	}
	return *o.LastPaymentAmount
}

// GetLastPaymentAmountOk returns a tuple with the LastPaymentAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CardAccountAllOf) GetLastPaymentAmountOk() (*CurrencyAmount, bool) {
	if o == nil || o.LastPaymentAmount == nil {
		return nil, false
	}
	return o.LastPaymentAmount, true
}

// HasLastPaymentAmount returns a boolean if a field has been set.
func (o *CardAccountAllOf) HasLastPaymentAmount() bool {
	if o != nil && o.LastPaymentAmount != nil {
		return true
	}

	return false
}

// SetLastPaymentAmount gets a reference to the given CurrencyAmount and assigns it to the LastPaymentAmount field.
func (o *CardAccountAllOf) SetLastPaymentAmount(v CurrencyAmount) {
	o.LastPaymentAmount = &v
}

func (o CardAccountAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AccountId != nil {
		toSerialize["account_id"] = o.AccountId
	}
	if o.AccountName != nil {
		toSerialize["account_name"] = o.AccountName
	}
	if o.AccountNumberMasked != nil {
		toSerialize["account_number_masked"] = o.AccountNumberMasked
	}
	if o.AccountType != nil {
		toSerialize["account_type"] = o.AccountType
	}
	if o.StatementPaymentDueDate != nil {
		toSerialize["statement_payment_due_date"] = o.StatementPaymentDueDate
	}
	if o.NextPaymentDueDate != nil {
		toSerialize["next_payment_due_date"] = o.NextPaymentDueDate
	}
	if o.StatementDate != nil {
		toSerialize["statement_date"] = o.StatementDate
	}
	if o.LastPaymentDate != nil {
		toSerialize["last_payment_date"] = o.LastPaymentDate
	}
	if o.LastPaymentAmount != nil {
		toSerialize["last_payment_amount"] = o.LastPaymentAmount
	}
	return json.Marshal(toSerialize)
}

type NullableCardAccountAllOf struct {
	value *CardAccountAllOf
	isSet bool
}

func (v NullableCardAccountAllOf) Get() *CardAccountAllOf {
	return v.value
}

func (v *NullableCardAccountAllOf) Set(val *CardAccountAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableCardAccountAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableCardAccountAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCardAccountAllOf(val *CardAccountAllOf) *NullableCardAccountAllOf {
	return &NullableCardAccountAllOf{value: val, isSet: true}
}

func (v NullableCardAccountAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCardAccountAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
