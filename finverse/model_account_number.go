/*
Finverse Public

Documentation of the early finverse services

API version: 0.0.1
Contact: info@finverse.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package finverse

import (
	"encoding/json"
	"fmt"
)

// checks if the AccountNumber type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AccountNumber{}

// AccountNumber struct for AccountNumber
type AccountNumber struct {
	AccountId            string  `json:"account_id"`
	Number               *string `json:"number,omitempty"`
	Raw                  string  `json:"raw"`
	AdditionalProperties map[string]interface{}
}

type _AccountNumber AccountNumber

// NewAccountNumber instantiates a new AccountNumber object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccountNumber(accountId string, raw string) *AccountNumber {
	this := AccountNumber{}
	this.AccountId = accountId
	this.Raw = raw
	return &this
}

// NewAccountNumberWithDefaults instantiates a new AccountNumber object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccountNumberWithDefaults() *AccountNumber {
	this := AccountNumber{}
	return &this
}

// GetAccountId returns the AccountId field value
func (o *AccountNumber) GetAccountId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value
// and a boolean to check if the value has been set.
func (o *AccountNumber) GetAccountIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccountId, true
}

// SetAccountId sets field value
func (o *AccountNumber) SetAccountId(v string) {
	o.AccountId = v
}

// GetNumber returns the Number field value if set, zero value otherwise.
func (o *AccountNumber) GetNumber() string {
	if o == nil || IsNil(o.Number) {
		var ret string
		return ret
	}
	return *o.Number
}

// GetNumberOk returns a tuple with the Number field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountNumber) GetNumberOk() (*string, bool) {
	if o == nil || IsNil(o.Number) {
		return nil, false
	}
	return o.Number, true
}

// HasNumber returns a boolean if a field has been set.
func (o *AccountNumber) HasNumber() bool {
	if o != nil && !IsNil(o.Number) {
		return true
	}

	return false
}

// SetNumber gets a reference to the given string and assigns it to the Number field.
func (o *AccountNumber) SetNumber(v string) {
	o.Number = &v
}

// GetRaw returns the Raw field value
func (o *AccountNumber) GetRaw() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Raw
}

// GetRawOk returns a tuple with the Raw field value
// and a boolean to check if the value has been set.
func (o *AccountNumber) GetRawOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Raw, true
}

// SetRaw sets field value
func (o *AccountNumber) SetRaw(v string) {
	o.Raw = v
}

func (o AccountNumber) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AccountNumber) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["account_id"] = o.AccountId
	if !IsNil(o.Number) {
		toSerialize["number"] = o.Number
	}
	toSerialize["raw"] = o.Raw

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AccountNumber) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"account_id",
		"raw",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAccountNumber := _AccountNumber{}

	err = json.Unmarshal(data, &varAccountNumber)

	if err != nil {
		return err
	}

	*o = AccountNumber(varAccountNumber)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "account_id")
		delete(additionalProperties, "number")
		delete(additionalProperties, "raw")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAccountNumber struct {
	value *AccountNumber
	isSet bool
}

func (v NullableAccountNumber) Get() *AccountNumber {
	return v.value
}

func (v *NullableAccountNumber) Set(val *AccountNumber) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountNumber) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountNumber) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountNumber(val *AccountNumber) *NullableAccountNumber {
	return &NullableAccountNumber{value: val, isSet: true}
}

func (v NullableAccountNumber) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountNumber) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
