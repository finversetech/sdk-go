/*
Finverse Public

Documentation of the early finverse services

API version: 0.0.1
Contact: info@finverse.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package finverse

import (
	"encoding/json"
	"fmt"
	"time"
)

// checks if the SubmitAuthChecklistResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubmitAuthChecklistResponse{}

// SubmitAuthChecklistResponse struct for SubmitAuthChecklistResponse
type SubmitAuthChecklistResponse struct {
	// Finverse Mandate ID
	MandateId string `json:"mandate_id"`
	// Checklist of the authorization factors needed to complete Mandate authorization
	AuthChecklist []AuthChecklistFactor `json:"auth_checklist"`
	// Mandate status
	MandateStatus string `json:"mandate_status"`
	// Timestamp in ISO format (YYYY-MM-DDTHH:MM:SS.SSSZ)
	LastUpdate           time.Time `json:"last_update"`
	AdditionalProperties map[string]interface{}
}

type _SubmitAuthChecklistResponse SubmitAuthChecklistResponse

// NewSubmitAuthChecklistResponse instantiates a new SubmitAuthChecklistResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubmitAuthChecklistResponse(mandateId string, authChecklist []AuthChecklistFactor, mandateStatus string, lastUpdate time.Time) *SubmitAuthChecklistResponse {
	this := SubmitAuthChecklistResponse{}
	this.MandateId = mandateId
	this.AuthChecklist = authChecklist
	this.MandateStatus = mandateStatus
	this.LastUpdate = lastUpdate
	return &this
}

// NewSubmitAuthChecklistResponseWithDefaults instantiates a new SubmitAuthChecklistResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubmitAuthChecklistResponseWithDefaults() *SubmitAuthChecklistResponse {
	this := SubmitAuthChecklistResponse{}
	return &this
}

// GetMandateId returns the MandateId field value
func (o *SubmitAuthChecklistResponse) GetMandateId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MandateId
}

// GetMandateIdOk returns a tuple with the MandateId field value
// and a boolean to check if the value has been set.
func (o *SubmitAuthChecklistResponse) GetMandateIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MandateId, true
}

// SetMandateId sets field value
func (o *SubmitAuthChecklistResponse) SetMandateId(v string) {
	o.MandateId = v
}

// GetAuthChecklist returns the AuthChecklist field value
func (o *SubmitAuthChecklistResponse) GetAuthChecklist() []AuthChecklistFactor {
	if o == nil {
		var ret []AuthChecklistFactor
		return ret
	}

	return o.AuthChecklist
}

// GetAuthChecklistOk returns a tuple with the AuthChecklist field value
// and a boolean to check if the value has been set.
func (o *SubmitAuthChecklistResponse) GetAuthChecklistOk() ([]AuthChecklistFactor, bool) {
	if o == nil {
		return nil, false
	}
	return o.AuthChecklist, true
}

// SetAuthChecklist sets field value
func (o *SubmitAuthChecklistResponse) SetAuthChecklist(v []AuthChecklistFactor) {
	o.AuthChecklist = v
}

// GetMandateStatus returns the MandateStatus field value
func (o *SubmitAuthChecklistResponse) GetMandateStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MandateStatus
}

// GetMandateStatusOk returns a tuple with the MandateStatus field value
// and a boolean to check if the value has been set.
func (o *SubmitAuthChecklistResponse) GetMandateStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MandateStatus, true
}

// SetMandateStatus sets field value
func (o *SubmitAuthChecklistResponse) SetMandateStatus(v string) {
	o.MandateStatus = v
}

// GetLastUpdate returns the LastUpdate field value
func (o *SubmitAuthChecklistResponse) GetLastUpdate() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.LastUpdate
}

// GetLastUpdateOk returns a tuple with the LastUpdate field value
// and a boolean to check if the value has been set.
func (o *SubmitAuthChecklistResponse) GetLastUpdateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastUpdate, true
}

// SetLastUpdate sets field value
func (o *SubmitAuthChecklistResponse) SetLastUpdate(v time.Time) {
	o.LastUpdate = v
}

func (o SubmitAuthChecklistResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubmitAuthChecklistResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["mandate_id"] = o.MandateId
	toSerialize["auth_checklist"] = o.AuthChecklist
	toSerialize["mandate_status"] = o.MandateStatus
	toSerialize["last_update"] = o.LastUpdate

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SubmitAuthChecklistResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"mandate_id",
		"auth_checklist",
		"mandate_status",
		"last_update",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSubmitAuthChecklistResponse := _SubmitAuthChecklistResponse{}

	err = json.Unmarshal(data, &varSubmitAuthChecklistResponse)

	if err != nil {
		return err
	}

	*o = SubmitAuthChecklistResponse(varSubmitAuthChecklistResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "mandate_id")
		delete(additionalProperties, "auth_checklist")
		delete(additionalProperties, "mandate_status")
		delete(additionalProperties, "last_update")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSubmitAuthChecklistResponse struct {
	value *SubmitAuthChecklistResponse
	isSet bool
}

func (v NullableSubmitAuthChecklistResponse) Get() *SubmitAuthChecklistResponse {
	return v.value
}

func (v *NullableSubmitAuthChecklistResponse) Set(val *SubmitAuthChecklistResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableSubmitAuthChecklistResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableSubmitAuthChecklistResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubmitAuthChecklistResponse(val *SubmitAuthChecklistResponse) *NullableSubmitAuthChecklistResponse {
	return &NullableSubmitAuthChecklistResponse{value: val, isSet: true}
}

func (v NullableSubmitAuthChecklistResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubmitAuthChecklistResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
